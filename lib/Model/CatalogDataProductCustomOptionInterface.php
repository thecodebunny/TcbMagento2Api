<?php
/**
 * CatalogDataProductCustomOptionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * CatalogDataProductCustomOptionInterface Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class CatalogDataProductCustomOptionInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'catalog-data-product-custom-option-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'productSku' => 'string',
        'optionId' => 'int',
        'title' => 'string',
        'type' => 'string',
        'sortOrder' => 'int',
        'isRequire' => 'bool',
        'price' => 'float',
        'priceType' => 'string',
        'sku' => 'string',
        'fileExtension' => 'string',
        'maxCharacters' => 'int',
        'imageSizeX' => 'int',
        'imageSizeY' => 'int',
        'values' => '\TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionValuesInterface[]',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'productSku' => 'product_sku',
        'optionId' => 'option_id',
        'title' => 'title',
        'type' => 'type',
        'sortOrder' => 'sort_order',
        'isRequire' => 'is_require',
        'price' => 'price',
        'priceType' => 'price_type',
        'sku' => 'sku',
        'fileExtension' => 'file_extension',
        'maxCharacters' => 'max_characters',
        'imageSizeX' => 'image_size_x',
        'imageSizeY' => 'image_size_y',
        'values' => 'values',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'productSku' => 'setProductSku',
        'optionId' => 'setOptionId',
        'title' => 'setTitle',
        'type' => 'setType',
        'sortOrder' => 'setSortOrder',
        'isRequire' => 'setIsRequire',
        'price' => 'setPrice',
        'priceType' => 'setPriceType',
        'sku' => 'setSku',
        'fileExtension' => 'setFileExtension',
        'maxCharacters' => 'setMaxCharacters',
        'imageSizeX' => 'setImageSizeX',
        'imageSizeY' => 'setImageSizeY',
        'values' => 'setValues',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'productSku' => 'getProductSku',
        'optionId' => 'getOptionId',
        'title' => 'getTitle',
        'type' => 'getType',
        'sortOrder' => 'getSortOrder',
        'isRequire' => 'getIsRequire',
        'price' => 'getPrice',
        'priceType' => 'getPriceType',
        'sku' => 'getSku',
        'fileExtension' => 'getFileExtension',
        'maxCharacters' => 'getMaxCharacters',
        'imageSizeX' => 'getImageSizeX',
        'imageSizeY' => 'getImageSizeY',
        'values' => 'getValues',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['productSku'] = isset($data['productSku']) ? $data['productSku'] : null;
        $this->container['optionId'] = isset($data['optionId']) ? $data['optionId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['isRequire'] = isset($data['isRequire']) ? $data['isRequire'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['priceType'] = isset($data['priceType']) ? $data['priceType'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['fileExtension'] = isset($data['fileExtension']) ? $data['fileExtension'] : null;
        $this->container['maxCharacters'] = isset($data['maxCharacters']) ? $data['maxCharacters'] : null;
        $this->container['imageSizeX'] = isset($data['imageSizeX']) ? $data['imageSizeX'] : null;
        $this->container['imageSizeY'] = isset($data['imageSizeY']) ? $data['imageSizeY'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['productSku'] === null) {
            $invalid_properties[] = "'productSku' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['sortOrder'] === null) {
            $invalid_properties[] = "'sortOrder' can't be null";
        }
        if ($this->container['isRequire'] === null) {
            $invalid_properties[] = "'isRequire' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['productSku'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['sortOrder'] === null) {
            return false;
        }
        if ($this->container['isRequire'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets productSku
     * @return string
     */
    public function getProductSku()
    {
        return $this->container['productSku'];
    }

    /**
     * Sets productSku
     * @param string $productSku Product SKU
     * @return $this
     */
    public function setProductSku($productSku)
    {
        $this->container['productSku'] = $productSku;

        return $this;
    }

    /**
     * Gets optionId
     * @return int
     */
    public function getOptionId()
    {
        return $this->container['optionId'];
    }

    /**
     * Sets optionId
     * @param int $optionId Option id
     * @return $this
     */
    public function setOptionId($optionId)
    {
        $this->container['optionId'] = $optionId;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Option title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Option type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sortOrder
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     * @param int $sortOrder Sort order
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets isRequire
     * @return bool
     */
    public function getIsRequire()
    {
        return $this->container['isRequire'];
    }

    /**
     * Sets isRequire
     * @param bool $isRequire Is require
     * @return $this
     */
    public function setIsRequire($isRequire)
    {
        $this->container['isRequire'] = $isRequire;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price Price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceType
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['priceType'];
    }

    /**
     * Sets priceType
     * @param string $priceType Price type
     * @return $this
     */
    public function setPriceType($priceType)
    {
        $this->container['priceType'] = $priceType;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku Sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets fileExtension
     * @return string
     */
    public function getFileExtension()
    {
        return $this->container['fileExtension'];
    }

    /**
     * Sets fileExtension
     * @param string $fileExtension
     * @return $this
     */
    public function setFileExtension($fileExtension)
    {
        $this->container['fileExtension'] = $fileExtension;

        return $this;
    }

    /**
     * Gets maxCharacters
     * @return int
     */
    public function getMaxCharacters()
    {
        return $this->container['maxCharacters'];
    }

    /**
     * Sets maxCharacters
     * @param int $maxCharacters
     * @return $this
     */
    public function setMaxCharacters($maxCharacters)
    {
        $this->container['maxCharacters'] = $maxCharacters;

        return $this;
    }

    /**
     * Gets imageSizeX
     * @return int
     */
    public function getImageSizeX()
    {
        return $this->container['imageSizeX'];
    }

    /**
     * Sets imageSizeX
     * @param int $imageSizeX
     * @return $this
     */
    public function setImageSizeX($imageSizeX)
    {
        $this->container['imageSizeX'] = $imageSizeX;

        return $this;
    }

    /**
     * Gets imageSizeY
     * @return int
     */
    public function getImageSizeY()
    {
        return $this->container['imageSizeY'];
    }

    /**
     * Sets imageSizeY
     * @param int $imageSizeY
     * @return $this
     */
    public function setImageSizeY($imageSizeY)
    {
        $this->container['imageSizeY'] = $imageSizeY;

        return $this;
    }

    /**
     * Gets values
     * @return \TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionValuesInterface[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     * @param \TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionValuesInterface[] $values
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\CatalogDataProductCustomOptionExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


