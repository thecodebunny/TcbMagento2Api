<?php
/**
 * GiftCardDataGiftCardOptionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * GiftCardDataGiftCardOptionInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface GiftCardOptionInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class GiftCardDataGiftCardOptionInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'gift-card-data-gift-card-option-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'giftcardAmount' => 'string',
        'customGiftcardAmount' => 'float',
        'giftcardSenderName' => 'string',
        'giftcardRecipientName' => 'string',
        'giftcardSenderEmail' => 'string',
        'giftcardRecipientEmail' => 'string',
        'giftcardMessage' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\GiftCardDataGiftCardOptionExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'giftcardAmount' => 'giftcard_amount',
        'customGiftcardAmount' => 'custom_giftcard_amount',
        'giftcardSenderName' => 'giftcard_sender_name',
        'giftcardRecipientName' => 'giftcard_recipient_name',
        'giftcardSenderEmail' => 'giftcard_sender_email',
        'giftcardRecipientEmail' => 'giftcard_recipient_email',
        'giftcardMessage' => 'giftcard_message',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'giftcardAmount' => 'setGiftcardAmount',
        'customGiftcardAmount' => 'setCustomGiftcardAmount',
        'giftcardSenderName' => 'setGiftcardSenderName',
        'giftcardRecipientName' => 'setGiftcardRecipientName',
        'giftcardSenderEmail' => 'setGiftcardSenderEmail',
        'giftcardRecipientEmail' => 'setGiftcardRecipientEmail',
        'giftcardMessage' => 'setGiftcardMessage',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'giftcardAmount' => 'getGiftcardAmount',
        'customGiftcardAmount' => 'getCustomGiftcardAmount',
        'giftcardSenderName' => 'getGiftcardSenderName',
        'giftcardRecipientName' => 'getGiftcardRecipientName',
        'giftcardSenderEmail' => 'getGiftcardSenderEmail',
        'giftcardRecipientEmail' => 'getGiftcardRecipientEmail',
        'giftcardMessage' => 'getGiftcardMessage',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['giftcardAmount'] = isset($data['giftcardAmount']) ? $data['giftcardAmount'] : null;
        $this->container['customGiftcardAmount'] = isset($data['customGiftcardAmount']) ? $data['customGiftcardAmount'] : null;
        $this->container['giftcardSenderName'] = isset($data['giftcardSenderName']) ? $data['giftcardSenderName'] : null;
        $this->container['giftcardRecipientName'] = isset($data['giftcardRecipientName']) ? $data['giftcardRecipientName'] : null;
        $this->container['giftcardSenderEmail'] = isset($data['giftcardSenderEmail']) ? $data['giftcardSenderEmail'] : null;
        $this->container['giftcardRecipientEmail'] = isset($data['giftcardRecipientEmail']) ? $data['giftcardRecipientEmail'] : null;
        $this->container['giftcardMessage'] = isset($data['giftcardMessage']) ? $data['giftcardMessage'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['giftcardAmount'] === null) {
            $invalid_properties[] = "'giftcardAmount' can't be null";
        }
        if ($this->container['giftcardSenderName'] === null) {
            $invalid_properties[] = "'giftcardSenderName' can't be null";
        }
        if ($this->container['giftcardRecipientName'] === null) {
            $invalid_properties[] = "'giftcardRecipientName' can't be null";
        }
        if ($this->container['giftcardSenderEmail'] === null) {
            $invalid_properties[] = "'giftcardSenderEmail' can't be null";
        }
        if ($this->container['giftcardRecipientEmail'] === null) {
            $invalid_properties[] = "'giftcardRecipientEmail' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['giftcardAmount'] === null) {
            return false;
        }
        if ($this->container['giftcardSenderName'] === null) {
            return false;
        }
        if ($this->container['giftcardRecipientName'] === null) {
            return false;
        }
        if ($this->container['giftcardSenderEmail'] === null) {
            return false;
        }
        if ($this->container['giftcardRecipientEmail'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets giftcardAmount
     * @return string
     */
    public function getGiftcardAmount()
    {
        return $this->container['giftcardAmount'];
    }

    /**
     * Sets giftcardAmount
     * @param string $giftcardAmount Gift card amount.
     * @return $this
     */
    public function setGiftcardAmount($giftcardAmount)
    {
        $this->container['giftcardAmount'] = $giftcardAmount;

        return $this;
    }

    /**
     * Gets customGiftcardAmount
     * @return float
     */
    public function getCustomGiftcardAmount()
    {
        return $this->container['customGiftcardAmount'];
    }

    /**
     * Sets customGiftcardAmount
     * @param float $customGiftcardAmount Gift card open amount value.
     * @return $this
     */
    public function setCustomGiftcardAmount($customGiftcardAmount)
    {
        $this->container['customGiftcardAmount'] = $customGiftcardAmount;

        return $this;
    }

    /**
     * Gets giftcardSenderName
     * @return string
     */
    public function getGiftcardSenderName()
    {
        return $this->container['giftcardSenderName'];
    }

    /**
     * Sets giftcardSenderName
     * @param string $giftcardSenderName Gift card sender name.
     * @return $this
     */
    public function setGiftcardSenderName($giftcardSenderName)
    {
        $this->container['giftcardSenderName'] = $giftcardSenderName;

        return $this;
    }

    /**
     * Gets giftcardRecipientName
     * @return string
     */
    public function getGiftcardRecipientName()
    {
        return $this->container['giftcardRecipientName'];
    }

    /**
     * Sets giftcardRecipientName
     * @param string $giftcardRecipientName Gift card recipient name.
     * @return $this
     */
    public function setGiftcardRecipientName($giftcardRecipientName)
    {
        $this->container['giftcardRecipientName'] = $giftcardRecipientName;

        return $this;
    }

    /**
     * Gets giftcardSenderEmail
     * @return string
     */
    public function getGiftcardSenderEmail()
    {
        return $this->container['giftcardSenderEmail'];
    }

    /**
     * Sets giftcardSenderEmail
     * @param string $giftcardSenderEmail Gift card sender email.
     * @return $this
     */
    public function setGiftcardSenderEmail($giftcardSenderEmail)
    {
        $this->container['giftcardSenderEmail'] = $giftcardSenderEmail;

        return $this;
    }

    /**
     * Gets giftcardRecipientEmail
     * @return string
     */
    public function getGiftcardRecipientEmail()
    {
        return $this->container['giftcardRecipientEmail'];
    }

    /**
     * Sets giftcardRecipientEmail
     * @param string $giftcardRecipientEmail Gift card recipient email.
     * @return $this
     */
    public function setGiftcardRecipientEmail($giftcardRecipientEmail)
    {
        $this->container['giftcardRecipientEmail'] = $giftcardRecipientEmail;

        return $this;
    }

    /**
     * Gets giftcardMessage
     * @return string
     */
    public function getGiftcardMessage()
    {
        return $this->container['giftcardMessage'];
    }

    /**
     * Sets giftcardMessage
     * @param string $giftcardMessage Giftcard message.
     * @return $this
     */
    public function setGiftcardMessage($giftcardMessage)
    {
        $this->container['giftcardMessage'] = $giftcardMessage;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\GiftCardDataGiftCardOptionExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\GiftCardDataGiftCardOptionExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


