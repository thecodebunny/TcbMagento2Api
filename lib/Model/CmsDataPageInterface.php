<?php
/**
 * CmsDataPageInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * CmsDataPageInterface Class Doc Comment
 *
 * @category    Class
 * @description CMS page interface.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class CmsDataPageInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'cms-data-page-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'title' => 'string',
        'pageLayout' => 'string',
        'metaTitle' => 'string',
        'metaKeywords' => 'string',
        'metaDescription' => 'string',
        'contentHeading' => 'string',
        'content' => 'string',
        'creationTime' => 'string',
        'updateTime' => 'string',
        'sortOrder' => 'string',
        'layoutUpdateXml' => 'string',
        'customTheme' => 'string',
        'customRootTemplate' => 'string',
        'customLayoutUpdateXml' => 'string',
        'customThemeFrom' => 'string',
        'customThemeTo' => 'string',
        'active' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'title' => 'title',
        'pageLayout' => 'page_layout',
        'metaTitle' => 'meta_title',
        'metaKeywords' => 'meta_keywords',
        'metaDescription' => 'meta_description',
        'contentHeading' => 'content_heading',
        'content' => 'content',
        'creationTime' => 'creation_time',
        'updateTime' => 'update_time',
        'sortOrder' => 'sort_order',
        'layoutUpdateXml' => 'layout_update_xml',
        'customTheme' => 'custom_theme',
        'customRootTemplate' => 'custom_root_template',
        'customLayoutUpdateXml' => 'custom_layout_update_xml',
        'customThemeFrom' => 'custom_theme_from',
        'customThemeTo' => 'custom_theme_to',
        'active' => 'active'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'title' => 'setTitle',
        'pageLayout' => 'setPageLayout',
        'metaTitle' => 'setMetaTitle',
        'metaKeywords' => 'setMetaKeywords',
        'metaDescription' => 'setMetaDescription',
        'contentHeading' => 'setContentHeading',
        'content' => 'setContent',
        'creationTime' => 'setCreationTime',
        'updateTime' => 'setUpdateTime',
        'sortOrder' => 'setSortOrder',
        'layoutUpdateXml' => 'setLayoutUpdateXml',
        'customTheme' => 'setCustomTheme',
        'customRootTemplate' => 'setCustomRootTemplate',
        'customLayoutUpdateXml' => 'setCustomLayoutUpdateXml',
        'customThemeFrom' => 'setCustomThemeFrom',
        'customThemeTo' => 'setCustomThemeTo',
        'active' => 'setActive'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'title' => 'getTitle',
        'pageLayout' => 'getPageLayout',
        'metaTitle' => 'getMetaTitle',
        'metaKeywords' => 'getMetaKeywords',
        'metaDescription' => 'getMetaDescription',
        'contentHeading' => 'getContentHeading',
        'content' => 'getContent',
        'creationTime' => 'getCreationTime',
        'updateTime' => 'getUpdateTime',
        'sortOrder' => 'getSortOrder',
        'layoutUpdateXml' => 'getLayoutUpdateXml',
        'customTheme' => 'getCustomTheme',
        'customRootTemplate' => 'getCustomRootTemplate',
        'customLayoutUpdateXml' => 'getCustomLayoutUpdateXml',
        'customThemeFrom' => 'getCustomThemeFrom',
        'customThemeTo' => 'getCustomThemeTo',
        'active' => 'getActive'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['pageLayout'] = isset($data['pageLayout']) ? $data['pageLayout'] : null;
        $this->container['metaTitle'] = isset($data['metaTitle']) ? $data['metaTitle'] : null;
        $this->container['metaKeywords'] = isset($data['metaKeywords']) ? $data['metaKeywords'] : null;
        $this->container['metaDescription'] = isset($data['metaDescription']) ? $data['metaDescription'] : null;
        $this->container['contentHeading'] = isset($data['contentHeading']) ? $data['contentHeading'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creationTime'] = isset($data['creationTime']) ? $data['creationTime'] : null;
        $this->container['updateTime'] = isset($data['updateTime']) ? $data['updateTime'] : null;
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['layoutUpdateXml'] = isset($data['layoutUpdateXml']) ? $data['layoutUpdateXml'] : null;
        $this->container['customTheme'] = isset($data['customTheme']) ? $data['customTheme'] : null;
        $this->container['customRootTemplate'] = isset($data['customRootTemplate']) ? $data['customRootTemplate'] : null;
        $this->container['customLayoutUpdateXml'] = isset($data['customLayoutUpdateXml']) ? $data['customLayoutUpdateXml'] : null;
        $this->container['customThemeFrom'] = isset($data['customThemeFrom']) ? $data['customThemeFrom'] : null;
        $this->container['customThemeTo'] = isset($data['customThemeTo']) ? $data['customThemeTo'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['identifier'] === null) {
            $invalid_properties[] = "'identifier' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['identifier'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier Identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets pageLayout
     * @return string
     */
    public function getPageLayout()
    {
        return $this->container['pageLayout'];
    }

    /**
     * Sets pageLayout
     * @param string $pageLayout Page layout
     * @return $this
     */
    public function setPageLayout($pageLayout)
    {
        $this->container['pageLayout'] = $pageLayout;

        return $this;
    }

    /**
     * Gets metaTitle
     * @return string
     */
    public function getMetaTitle()
    {
        return $this->container['metaTitle'];
    }

    /**
     * Sets metaTitle
     * @param string $metaTitle Meta title
     * @return $this
     */
    public function setMetaTitle($metaTitle)
    {
        $this->container['metaTitle'] = $metaTitle;

        return $this;
    }

    /**
     * Gets metaKeywords
     * @return string
     */
    public function getMetaKeywords()
    {
        return $this->container['metaKeywords'];
    }

    /**
     * Sets metaKeywords
     * @param string $metaKeywords Meta keywords
     * @return $this
     */
    public function setMetaKeywords($metaKeywords)
    {
        $this->container['metaKeywords'] = $metaKeywords;

        return $this;
    }

    /**
     * Gets metaDescription
     * @return string
     */
    public function getMetaDescription()
    {
        return $this->container['metaDescription'];
    }

    /**
     * Sets metaDescription
     * @param string $metaDescription Meta description
     * @return $this
     */
    public function setMetaDescription($metaDescription)
    {
        $this->container['metaDescription'] = $metaDescription;

        return $this;
    }

    /**
     * Gets contentHeading
     * @return string
     */
    public function getContentHeading()
    {
        return $this->container['contentHeading'];
    }

    /**
     * Sets contentHeading
     * @param string $contentHeading Content heading
     * @return $this
     */
    public function setContentHeading($contentHeading)
    {
        $this->container['contentHeading'] = $contentHeading;

        return $this;
    }

    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param string $content Content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creationTime
     * @return string
     */
    public function getCreationTime()
    {
        return $this->container['creationTime'];
    }

    /**
     * Sets creationTime
     * @param string $creationTime Creation time
     * @return $this
     */
    public function setCreationTime($creationTime)
    {
        $this->container['creationTime'] = $creationTime;

        return $this;
    }

    /**
     * Gets updateTime
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['updateTime'];
    }

    /**
     * Sets updateTime
     * @param string $updateTime Update time
     * @return $this
     */
    public function setUpdateTime($updateTime)
    {
        $this->container['updateTime'] = $updateTime;

        return $this;
    }

    /**
     * Gets sortOrder
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     * @param string $sortOrder Sort order
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets layoutUpdateXml
     * @return string
     */
    public function getLayoutUpdateXml()
    {
        return $this->container['layoutUpdateXml'];
    }

    /**
     * Sets layoutUpdateXml
     * @param string $layoutUpdateXml Layout update xml
     * @return $this
     */
    public function setLayoutUpdateXml($layoutUpdateXml)
    {
        $this->container['layoutUpdateXml'] = $layoutUpdateXml;

        return $this;
    }

    /**
     * Gets customTheme
     * @return string
     */
    public function getCustomTheme()
    {
        return $this->container['customTheme'];
    }

    /**
     * Sets customTheme
     * @param string $customTheme Custom theme
     * @return $this
     */
    public function setCustomTheme($customTheme)
    {
        $this->container['customTheme'] = $customTheme;

        return $this;
    }

    /**
     * Gets customRootTemplate
     * @return string
     */
    public function getCustomRootTemplate()
    {
        return $this->container['customRootTemplate'];
    }

    /**
     * Sets customRootTemplate
     * @param string $customRootTemplate Custom root template
     * @return $this
     */
    public function setCustomRootTemplate($customRootTemplate)
    {
        $this->container['customRootTemplate'] = $customRootTemplate;

        return $this;
    }

    /**
     * Gets customLayoutUpdateXml
     * @return string
     */
    public function getCustomLayoutUpdateXml()
    {
        return $this->container['customLayoutUpdateXml'];
    }

    /**
     * Sets customLayoutUpdateXml
     * @param string $customLayoutUpdateXml Custom layout update xml
     * @return $this
     */
    public function setCustomLayoutUpdateXml($customLayoutUpdateXml)
    {
        $this->container['customLayoutUpdateXml'] = $customLayoutUpdateXml;

        return $this;
    }

    /**
     * Gets customThemeFrom
     * @return string
     */
    public function getCustomThemeFrom()
    {
        return $this->container['customThemeFrom'];
    }

    /**
     * Sets customThemeFrom
     * @param string $customThemeFrom Custom theme from
     * @return $this
     */
    public function setCustomThemeFrom($customThemeFrom)
    {
        $this->container['customThemeFrom'] = $customThemeFrom;

        return $this;
    }

    /**
     * Gets customThemeTo
     * @return string
     */
    public function getCustomThemeTo()
    {
        return $this->container['customThemeTo'];
    }

    /**
     * Sets customThemeTo
     * @param string $customThemeTo Custom theme to
     * @return $this
     */
    public function setCustomThemeTo($customThemeTo)
    {
        $this->container['customThemeTo'] = $customThemeTo;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


