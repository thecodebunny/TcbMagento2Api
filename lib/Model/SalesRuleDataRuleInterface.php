<?php
/**
 * SalesRuleDataRuleInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesRuleDataRuleInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface RuleInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesRuleDataRuleInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-rule-data-rule-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ruleId' => 'int',
        'name' => 'string',
        'storeLabels' => '\TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleLabelInterface[]',
        'description' => 'string',
        'websiteIds' => 'int[]',
        'customerGroupIds' => 'int[]',
        'fromDate' => 'string',
        'toDate' => 'string',
        'usesPerCustomer' => 'int',
        'isActive' => 'bool',
        'condition' => '\TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface',
        'actionCondition' => '\TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface',
        'stopRulesProcessing' => 'bool',
        'isAdvanced' => 'bool',
        'productIds' => 'int[]',
        'sortOrder' => 'int',
        'simpleAction' => 'string',
        'discountAmount' => 'float',
        'discountQty' => 'float',
        'discountStep' => 'int',
        'applyToShipping' => 'bool',
        'timesUsed' => 'int',
        'isRss' => 'bool',
        'couponType' => 'string',
        'useAutoGeneration' => 'bool',
        'usesPerCoupon' => 'int',
        'simpleFreeShipping' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ruleId' => 'rule_id',
        'name' => 'name',
        'storeLabels' => 'store_labels',
        'description' => 'description',
        'websiteIds' => 'website_ids',
        'customerGroupIds' => 'customer_group_ids',
        'fromDate' => 'from_date',
        'toDate' => 'to_date',
        'usesPerCustomer' => 'uses_per_customer',
        'isActive' => 'is_active',
        'condition' => 'condition',
        'actionCondition' => 'action_condition',
        'stopRulesProcessing' => 'stop_rules_processing',
        'isAdvanced' => 'is_advanced',
        'productIds' => 'product_ids',
        'sortOrder' => 'sort_order',
        'simpleAction' => 'simple_action',
        'discountAmount' => 'discount_amount',
        'discountQty' => 'discount_qty',
        'discountStep' => 'discount_step',
        'applyToShipping' => 'apply_to_shipping',
        'timesUsed' => 'times_used',
        'isRss' => 'is_rss',
        'couponType' => 'coupon_type',
        'useAutoGeneration' => 'use_auto_generation',
        'usesPerCoupon' => 'uses_per_coupon',
        'simpleFreeShipping' => 'simple_free_shipping',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ruleId' => 'setRuleId',
        'name' => 'setName',
        'storeLabels' => 'setStoreLabels',
        'description' => 'setDescription',
        'websiteIds' => 'setWebsiteIds',
        'customerGroupIds' => 'setCustomerGroupIds',
        'fromDate' => 'setFromDate',
        'toDate' => 'setToDate',
        'usesPerCustomer' => 'setUsesPerCustomer',
        'isActive' => 'setIsActive',
        'condition' => 'setCondition',
        'actionCondition' => 'setActionCondition',
        'stopRulesProcessing' => 'setStopRulesProcessing',
        'isAdvanced' => 'setIsAdvanced',
        'productIds' => 'setProductIds',
        'sortOrder' => 'setSortOrder',
        'simpleAction' => 'setSimpleAction',
        'discountAmount' => 'setDiscountAmount',
        'discountQty' => 'setDiscountQty',
        'discountStep' => 'setDiscountStep',
        'applyToShipping' => 'setApplyToShipping',
        'timesUsed' => 'setTimesUsed',
        'isRss' => 'setIsRss',
        'couponType' => 'setCouponType',
        'useAutoGeneration' => 'setUseAutoGeneration',
        'usesPerCoupon' => 'setUsesPerCoupon',
        'simpleFreeShipping' => 'setSimpleFreeShipping',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ruleId' => 'getRuleId',
        'name' => 'getName',
        'storeLabels' => 'getStoreLabels',
        'description' => 'getDescription',
        'websiteIds' => 'getWebsiteIds',
        'customerGroupIds' => 'getCustomerGroupIds',
        'fromDate' => 'getFromDate',
        'toDate' => 'getToDate',
        'usesPerCustomer' => 'getUsesPerCustomer',
        'isActive' => 'getIsActive',
        'condition' => 'getCondition',
        'actionCondition' => 'getActionCondition',
        'stopRulesProcessing' => 'getStopRulesProcessing',
        'isAdvanced' => 'getIsAdvanced',
        'productIds' => 'getProductIds',
        'sortOrder' => 'getSortOrder',
        'simpleAction' => 'getSimpleAction',
        'discountAmount' => 'getDiscountAmount',
        'discountQty' => 'getDiscountQty',
        'discountStep' => 'getDiscountStep',
        'applyToShipping' => 'getApplyToShipping',
        'timesUsed' => 'getTimesUsed',
        'isRss' => 'getIsRss',
        'couponType' => 'getCouponType',
        'useAutoGeneration' => 'getUseAutoGeneration',
        'usesPerCoupon' => 'getUsesPerCoupon',
        'simpleFreeShipping' => 'getSimpleFreeShipping',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ruleId'] = isset($data['ruleId']) ? $data['ruleId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['storeLabels'] = isset($data['storeLabels']) ? $data['storeLabels'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['websiteIds'] = isset($data['websiteIds']) ? $data['websiteIds'] : null;
        $this->container['customerGroupIds'] = isset($data['customerGroupIds']) ? $data['customerGroupIds'] : null;
        $this->container['fromDate'] = isset($data['fromDate']) ? $data['fromDate'] : null;
        $this->container['toDate'] = isset($data['toDate']) ? $data['toDate'] : null;
        $this->container['usesPerCustomer'] = isset($data['usesPerCustomer']) ? $data['usesPerCustomer'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['actionCondition'] = isset($data['actionCondition']) ? $data['actionCondition'] : null;
        $this->container['stopRulesProcessing'] = isset($data['stopRulesProcessing']) ? $data['stopRulesProcessing'] : null;
        $this->container['isAdvanced'] = isset($data['isAdvanced']) ? $data['isAdvanced'] : null;
        $this->container['productIds'] = isset($data['productIds']) ? $data['productIds'] : null;
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['simpleAction'] = isset($data['simpleAction']) ? $data['simpleAction'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['discountQty'] = isset($data['discountQty']) ? $data['discountQty'] : null;
        $this->container['discountStep'] = isset($data['discountStep']) ? $data['discountStep'] : null;
        $this->container['applyToShipping'] = isset($data['applyToShipping']) ? $data['applyToShipping'] : null;
        $this->container['timesUsed'] = isset($data['timesUsed']) ? $data['timesUsed'] : null;
        $this->container['isRss'] = isset($data['isRss']) ? $data['isRss'] : null;
        $this->container['couponType'] = isset($data['couponType']) ? $data['couponType'] : null;
        $this->container['useAutoGeneration'] = isset($data['useAutoGeneration']) ? $data['useAutoGeneration'] : null;
        $this->container['usesPerCoupon'] = isset($data['usesPerCoupon']) ? $data['usesPerCoupon'] : null;
        $this->container['simpleFreeShipping'] = isset($data['simpleFreeShipping']) ? $data['simpleFreeShipping'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['websiteIds'] === null) {
            $invalid_properties[] = "'websiteIds' can't be null";
        }
        if ($this->container['customerGroupIds'] === null) {
            $invalid_properties[] = "'customerGroupIds' can't be null";
        }
        if ($this->container['usesPerCustomer'] === null) {
            $invalid_properties[] = "'usesPerCustomer' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalid_properties[] = "'isActive' can't be null";
        }
        if ($this->container['stopRulesProcessing'] === null) {
            $invalid_properties[] = "'stopRulesProcessing' can't be null";
        }
        if ($this->container['isAdvanced'] === null) {
            $invalid_properties[] = "'isAdvanced' can't be null";
        }
        if ($this->container['sortOrder'] === null) {
            $invalid_properties[] = "'sortOrder' can't be null";
        }
        if ($this->container['discountAmount'] === null) {
            $invalid_properties[] = "'discountAmount' can't be null";
        }
        if ($this->container['discountStep'] === null) {
            $invalid_properties[] = "'discountStep' can't be null";
        }
        if ($this->container['applyToShipping'] === null) {
            $invalid_properties[] = "'applyToShipping' can't be null";
        }
        if ($this->container['timesUsed'] === null) {
            $invalid_properties[] = "'timesUsed' can't be null";
        }
        if ($this->container['isRss'] === null) {
            $invalid_properties[] = "'isRss' can't be null";
        }
        if ($this->container['couponType'] === null) {
            $invalid_properties[] = "'couponType' can't be null";
        }
        if ($this->container['useAutoGeneration'] === null) {
            $invalid_properties[] = "'useAutoGeneration' can't be null";
        }
        if ($this->container['usesPerCoupon'] === null) {
            $invalid_properties[] = "'usesPerCoupon' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['websiteIds'] === null) {
            return false;
        }
        if ($this->container['customerGroupIds'] === null) {
            return false;
        }
        if ($this->container['usesPerCustomer'] === null) {
            return false;
        }
        if ($this->container['isActive'] === null) {
            return false;
        }
        if ($this->container['stopRulesProcessing'] === null) {
            return false;
        }
        if ($this->container['isAdvanced'] === null) {
            return false;
        }
        if ($this->container['sortOrder'] === null) {
            return false;
        }
        if ($this->container['discountAmount'] === null) {
            return false;
        }
        if ($this->container['discountStep'] === null) {
            return false;
        }
        if ($this->container['applyToShipping'] === null) {
            return false;
        }
        if ($this->container['timesUsed'] === null) {
            return false;
        }
        if ($this->container['isRss'] === null) {
            return false;
        }
        if ($this->container['couponType'] === null) {
            return false;
        }
        if ($this->container['useAutoGeneration'] === null) {
            return false;
        }
        if ($this->container['usesPerCoupon'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets ruleId
     * @return int
     */
    public function getRuleId()
    {
        return $this->container['ruleId'];
    }

    /**
     * Sets ruleId
     * @param int $ruleId Rule id
     * @return $this
     */
    public function setRuleId($ruleId)
    {
        $this->container['ruleId'] = $ruleId;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Rule name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets storeLabels
     * @return \TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleLabelInterface[]
     */
    public function getStoreLabels()
    {
        return $this->container['storeLabels'];
    }

    /**
     * Sets storeLabels
     * @param \TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleLabelInterface[] $storeLabels Display label
     * @return $this
     */
    public function setStoreLabels($storeLabels)
    {
        $this->container['storeLabels'] = $storeLabels;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets websiteIds
     * @return int[]
     */
    public function getWebsiteIds()
    {
        return $this->container['websiteIds'];
    }

    /**
     * Sets websiteIds
     * @param int[] $websiteIds A list of websites the rule applies to
     * @return $this
     */
    public function setWebsiteIds($websiteIds)
    {
        $this->container['websiteIds'] = $websiteIds;

        return $this;
    }

    /**
     * Gets customerGroupIds
     * @return int[]
     */
    public function getCustomerGroupIds()
    {
        return $this->container['customerGroupIds'];
    }

    /**
     * Sets customerGroupIds
     * @param int[] $customerGroupIds Ids of customer groups that the rule applies to
     * @return $this
     */
    public function setCustomerGroupIds($customerGroupIds)
    {
        $this->container['customerGroupIds'] = $customerGroupIds;

        return $this;
    }

    /**
     * Gets fromDate
     * @return string
     */
    public function getFromDate()
    {
        return $this->container['fromDate'];
    }

    /**
     * Sets fromDate
     * @param string $fromDate The start date when the coupon is active
     * @return $this
     */
    public function setFromDate($fromDate)
    {
        $this->container['fromDate'] = $fromDate;

        return $this;
    }

    /**
     * Gets toDate
     * @return string
     */
    public function getToDate()
    {
        return $this->container['toDate'];
    }

    /**
     * Sets toDate
     * @param string $toDate The end date when the coupon is active
     * @return $this
     */
    public function setToDate($toDate)
    {
        $this->container['toDate'] = $toDate;

        return $this;
    }

    /**
     * Gets usesPerCustomer
     * @return int
     */
    public function getUsesPerCustomer()
    {
        return $this->container['usesPerCustomer'];
    }

    /**
     * Sets usesPerCustomer
     * @param int $usesPerCustomer Number of uses per customer
     * @return $this
     */
    public function setUsesPerCustomer($usesPerCustomer)
    {
        $this->container['usesPerCustomer'] = $usesPerCustomer;

        return $this;
    }

    /**
     * Gets isActive
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     * @param bool $isActive The coupon is active
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets condition
     * @return \TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param \TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface $condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets actionCondition
     * @return \TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface
     */
    public function getActionCondition()
    {
        return $this->container['actionCondition'];
    }

    /**
     * Sets actionCondition
     * @param \TheCodeBunny\Magento2Api\Model\SalesRuleDataConditionInterface $actionCondition
     * @return $this
     */
    public function setActionCondition($actionCondition)
    {
        $this->container['actionCondition'] = $actionCondition;

        return $this;
    }

    /**
     * Gets stopRulesProcessing
     * @return bool
     */
    public function getStopRulesProcessing()
    {
        return $this->container['stopRulesProcessing'];
    }

    /**
     * Sets stopRulesProcessing
     * @param bool $stopRulesProcessing To stop rule processing
     * @return $this
     */
    public function setStopRulesProcessing($stopRulesProcessing)
    {
        $this->container['stopRulesProcessing'] = $stopRulesProcessing;

        return $this;
    }

    /**
     * Gets isAdvanced
     * @return bool
     */
    public function getIsAdvanced()
    {
        return $this->container['isAdvanced'];
    }

    /**
     * Sets isAdvanced
     * @param bool $isAdvanced Is this field needed
     * @return $this
     */
    public function setIsAdvanced($isAdvanced)
    {
        $this->container['isAdvanced'] = $isAdvanced;

        return $this;
    }

    /**
     * Gets productIds
     * @return int[]
     */
    public function getProductIds()
    {
        return $this->container['productIds'];
    }

    /**
     * Sets productIds
     * @param int[] $productIds Product ids
     * @return $this
     */
    public function setProductIds($productIds)
    {
        $this->container['productIds'] = $productIds;

        return $this;
    }

    /**
     * Gets sortOrder
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     * @param int $sortOrder Sort order
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets simpleAction
     * @return string
     */
    public function getSimpleAction()
    {
        return $this->container['simpleAction'];
    }

    /**
     * Sets simpleAction
     * @param string $simpleAction Simple action of the rule
     * @return $this
     */
    public function setSimpleAction($simpleAction)
    {
        $this->container['simpleAction'] = $simpleAction;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param float $discountAmount Discount amount
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets discountQty
     * @return float
     */
    public function getDiscountQty()
    {
        return $this->container['discountQty'];
    }

    /**
     * Sets discountQty
     * @param float $discountQty Maximum qty discount is applied
     * @return $this
     */
    public function setDiscountQty($discountQty)
    {
        $this->container['discountQty'] = $discountQty;

        return $this;
    }

    /**
     * Gets discountStep
     * @return int
     */
    public function getDiscountStep()
    {
        return $this->container['discountStep'];
    }

    /**
     * Sets discountStep
     * @param int $discountStep Discount step
     * @return $this
     */
    public function setDiscountStep($discountStep)
    {
        $this->container['discountStep'] = $discountStep;

        return $this;
    }

    /**
     * Gets applyToShipping
     * @return bool
     */
    public function getApplyToShipping()
    {
        return $this->container['applyToShipping'];
    }

    /**
     * Sets applyToShipping
     * @param bool $applyToShipping The rule applies to shipping
     * @return $this
     */
    public function setApplyToShipping($applyToShipping)
    {
        $this->container['applyToShipping'] = $applyToShipping;

        return $this;
    }

    /**
     * Gets timesUsed
     * @return int
     */
    public function getTimesUsed()
    {
        return $this->container['timesUsed'];
    }

    /**
     * Sets timesUsed
     * @param int $timesUsed How many times the rule has been used
     * @return $this
     */
    public function setTimesUsed($timesUsed)
    {
        $this->container['timesUsed'] = $timesUsed;

        return $this;
    }

    /**
     * Gets isRss
     * @return bool
     */
    public function getIsRss()
    {
        return $this->container['isRss'];
    }

    /**
     * Sets isRss
     * @param bool $isRss Whether the rule is in RSS
     * @return $this
     */
    public function setIsRss($isRss)
    {
        $this->container['isRss'] = $isRss;

        return $this;
    }

    /**
     * Gets couponType
     * @return string
     */
    public function getCouponType()
    {
        return $this->container['couponType'];
    }

    /**
     * Sets couponType
     * @param string $couponType Coupon type
     * @return $this
     */
    public function setCouponType($couponType)
    {
        $this->container['couponType'] = $couponType;

        return $this;
    }

    /**
     * Gets useAutoGeneration
     * @return bool
     */
    public function getUseAutoGeneration()
    {
        return $this->container['useAutoGeneration'];
    }

    /**
     * Sets useAutoGeneration
     * @param bool $useAutoGeneration To auto generate coupon
     * @return $this
     */
    public function setUseAutoGeneration($useAutoGeneration)
    {
        $this->container['useAutoGeneration'] = $useAutoGeneration;

        return $this;
    }

    /**
     * Gets usesPerCoupon
     * @return int
     */
    public function getUsesPerCoupon()
    {
        return $this->container['usesPerCoupon'];
    }

    /**
     * Sets usesPerCoupon
     * @param int $usesPerCoupon Limit of uses per coupon
     * @return $this
     */
    public function setUsesPerCoupon($usesPerCoupon)
    {
        $this->container['usesPerCoupon'] = $usesPerCoupon;

        return $this;
    }

    /**
     * Gets simpleFreeShipping
     * @return string
     */
    public function getSimpleFreeShipping()
    {
        return $this->container['simpleFreeShipping'];
    }

    /**
     * Sets simpleFreeShipping
     * @param string $simpleFreeShipping To grant free shipping
     * @return $this
     */
    public function setSimpleFreeShipping($simpleFreeShipping)
    {
        $this->container['simpleFreeShipping'] = $simpleFreeShipping;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesRuleDataRuleExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


