<?php
/**
 * QuoteDataTotalsInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * QuoteDataTotalsInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface TotalsInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class QuoteDataTotalsInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'quote-data-totals-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'grandTotal' => 'float',
        'baseGrandTotal' => 'float',
        'subtotal' => 'float',
        'baseSubtotal' => 'float',
        'discountAmount' => 'float',
        'baseDiscountAmount' => 'float',
        'subtotalWithDiscount' => 'float',
        'baseSubtotalWithDiscount' => 'float',
        'shippingAmount' => 'float',
        'baseShippingAmount' => 'float',
        'shippingDiscountAmount' => 'float',
        'baseShippingDiscountAmount' => 'float',
        'taxAmount' => 'float',
        'baseTaxAmount' => 'float',
        'weeeTaxAppliedAmount' => 'float',
        'shippingTaxAmount' => 'float',
        'baseShippingTaxAmount' => 'float',
        'subtotalInclTax' => 'float',
        'baseSubtotalInclTax' => 'float',
        'shippingInclTax' => 'float',
        'baseShippingInclTax' => 'float',
        'baseCurrencyCode' => 'string',
        'quoteCurrencyCode' => 'string',
        'couponCode' => 'string',
        'itemsQty' => 'int',
        'items' => '\TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemInterface[]',
        'totalSegments' => '\TheCodeBunny\Magento2Api\Model\QuoteDataTotalSegmentInterface[]',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\QuoteDataTotalsExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'grandTotal' => 'grand_total',
        'baseGrandTotal' => 'base_grand_total',
        'subtotal' => 'subtotal',
        'baseSubtotal' => 'base_subtotal',
        'discountAmount' => 'discount_amount',
        'baseDiscountAmount' => 'base_discount_amount',
        'subtotalWithDiscount' => 'subtotal_with_discount',
        'baseSubtotalWithDiscount' => 'base_subtotal_with_discount',
        'shippingAmount' => 'shipping_amount',
        'baseShippingAmount' => 'base_shipping_amount',
        'shippingDiscountAmount' => 'shipping_discount_amount',
        'baseShippingDiscountAmount' => 'base_shipping_discount_amount',
        'taxAmount' => 'tax_amount',
        'baseTaxAmount' => 'base_tax_amount',
        'weeeTaxAppliedAmount' => 'weee_tax_applied_amount',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'baseShippingTaxAmount' => 'base_shipping_tax_amount',
        'subtotalInclTax' => 'subtotal_incl_tax',
        'baseSubtotalInclTax' => 'base_subtotal_incl_tax',
        'shippingInclTax' => 'shipping_incl_tax',
        'baseShippingInclTax' => 'base_shipping_incl_tax',
        'baseCurrencyCode' => 'base_currency_code',
        'quoteCurrencyCode' => 'quote_currency_code',
        'couponCode' => 'coupon_code',
        'itemsQty' => 'items_qty',
        'items' => 'items',
        'totalSegments' => 'total_segments',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'grandTotal' => 'setGrandTotal',
        'baseGrandTotal' => 'setBaseGrandTotal',
        'subtotal' => 'setSubtotal',
        'baseSubtotal' => 'setBaseSubtotal',
        'discountAmount' => 'setDiscountAmount',
        'baseDiscountAmount' => 'setBaseDiscountAmount',
        'subtotalWithDiscount' => 'setSubtotalWithDiscount',
        'baseSubtotalWithDiscount' => 'setBaseSubtotalWithDiscount',
        'shippingAmount' => 'setShippingAmount',
        'baseShippingAmount' => 'setBaseShippingAmount',
        'shippingDiscountAmount' => 'setShippingDiscountAmount',
        'baseShippingDiscountAmount' => 'setBaseShippingDiscountAmount',
        'taxAmount' => 'setTaxAmount',
        'baseTaxAmount' => 'setBaseTaxAmount',
        'weeeTaxAppliedAmount' => 'setWeeeTaxAppliedAmount',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'baseShippingTaxAmount' => 'setBaseShippingTaxAmount',
        'subtotalInclTax' => 'setSubtotalInclTax',
        'baseSubtotalInclTax' => 'setBaseSubtotalInclTax',
        'shippingInclTax' => 'setShippingInclTax',
        'baseShippingInclTax' => 'setBaseShippingInclTax',
        'baseCurrencyCode' => 'setBaseCurrencyCode',
        'quoteCurrencyCode' => 'setQuoteCurrencyCode',
        'couponCode' => 'setCouponCode',
        'itemsQty' => 'setItemsQty',
        'items' => 'setItems',
        'totalSegments' => 'setTotalSegments',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'grandTotal' => 'getGrandTotal',
        'baseGrandTotal' => 'getBaseGrandTotal',
        'subtotal' => 'getSubtotal',
        'baseSubtotal' => 'getBaseSubtotal',
        'discountAmount' => 'getDiscountAmount',
        'baseDiscountAmount' => 'getBaseDiscountAmount',
        'subtotalWithDiscount' => 'getSubtotalWithDiscount',
        'baseSubtotalWithDiscount' => 'getBaseSubtotalWithDiscount',
        'shippingAmount' => 'getShippingAmount',
        'baseShippingAmount' => 'getBaseShippingAmount',
        'shippingDiscountAmount' => 'getShippingDiscountAmount',
        'baseShippingDiscountAmount' => 'getBaseShippingDiscountAmount',
        'taxAmount' => 'getTaxAmount',
        'baseTaxAmount' => 'getBaseTaxAmount',
        'weeeTaxAppliedAmount' => 'getWeeeTaxAppliedAmount',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'baseShippingTaxAmount' => 'getBaseShippingTaxAmount',
        'subtotalInclTax' => 'getSubtotalInclTax',
        'baseSubtotalInclTax' => 'getBaseSubtotalInclTax',
        'shippingInclTax' => 'getShippingInclTax',
        'baseShippingInclTax' => 'getBaseShippingInclTax',
        'baseCurrencyCode' => 'getBaseCurrencyCode',
        'quoteCurrencyCode' => 'getQuoteCurrencyCode',
        'couponCode' => 'getCouponCode',
        'itemsQty' => 'getItemsQty',
        'items' => 'getItems',
        'totalSegments' => 'getTotalSegments',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['grandTotal'] = isset($data['grandTotal']) ? $data['grandTotal'] : null;
        $this->container['baseGrandTotal'] = isset($data['baseGrandTotal']) ? $data['baseGrandTotal'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['baseSubtotal'] = isset($data['baseSubtotal']) ? $data['baseSubtotal'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['baseDiscountAmount'] = isset($data['baseDiscountAmount']) ? $data['baseDiscountAmount'] : null;
        $this->container['subtotalWithDiscount'] = isset($data['subtotalWithDiscount']) ? $data['subtotalWithDiscount'] : null;
        $this->container['baseSubtotalWithDiscount'] = isset($data['baseSubtotalWithDiscount']) ? $data['baseSubtotalWithDiscount'] : null;
        $this->container['shippingAmount'] = isset($data['shippingAmount']) ? $data['shippingAmount'] : null;
        $this->container['baseShippingAmount'] = isset($data['baseShippingAmount']) ? $data['baseShippingAmount'] : null;
        $this->container['shippingDiscountAmount'] = isset($data['shippingDiscountAmount']) ? $data['shippingDiscountAmount'] : null;
        $this->container['baseShippingDiscountAmount'] = isset($data['baseShippingDiscountAmount']) ? $data['baseShippingDiscountAmount'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['baseTaxAmount'] = isset($data['baseTaxAmount']) ? $data['baseTaxAmount'] : null;
        $this->container['weeeTaxAppliedAmount'] = isset($data['weeeTaxAppliedAmount']) ? $data['weeeTaxAppliedAmount'] : null;
        $this->container['shippingTaxAmount'] = isset($data['shippingTaxAmount']) ? $data['shippingTaxAmount'] : null;
        $this->container['baseShippingTaxAmount'] = isset($data['baseShippingTaxAmount']) ? $data['baseShippingTaxAmount'] : null;
        $this->container['subtotalInclTax'] = isset($data['subtotalInclTax']) ? $data['subtotalInclTax'] : null;
        $this->container['baseSubtotalInclTax'] = isset($data['baseSubtotalInclTax']) ? $data['baseSubtotalInclTax'] : null;
        $this->container['shippingInclTax'] = isset($data['shippingInclTax']) ? $data['shippingInclTax'] : null;
        $this->container['baseShippingInclTax'] = isset($data['baseShippingInclTax']) ? $data['baseShippingInclTax'] : null;
        $this->container['baseCurrencyCode'] = isset($data['baseCurrencyCode']) ? $data['baseCurrencyCode'] : null;
        $this->container['quoteCurrencyCode'] = isset($data['quoteCurrencyCode']) ? $data['quoteCurrencyCode'] : null;
        $this->container['couponCode'] = isset($data['couponCode']) ? $data['couponCode'] : null;
        $this->container['itemsQty'] = isset($data['itemsQty']) ? $data['itemsQty'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['totalSegments'] = isset($data['totalSegments']) ? $data['totalSegments'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['weeeTaxAppliedAmount'] === null) {
            $invalid_properties[] = "'weeeTaxAppliedAmount' can't be null";
        }
        if ($this->container['totalSegments'] === null) {
            $invalid_properties[] = "'totalSegments' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['weeeTaxAppliedAmount'] === null) {
            return false;
        }
        if ($this->container['totalSegments'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets grandTotal
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grandTotal'];
    }

    /**
     * Sets grandTotal
     * @param float $grandTotal Grand total in quote currency
     * @return $this
     */
    public function setGrandTotal($grandTotal)
    {
        $this->container['grandTotal'] = $grandTotal;

        return $this;
    }

    /**
     * Gets baseGrandTotal
     * @return float
     */
    public function getBaseGrandTotal()
    {
        return $this->container['baseGrandTotal'];
    }

    /**
     * Sets baseGrandTotal
     * @param float $baseGrandTotal Grand total in base currency
     * @return $this
     */
    public function setBaseGrandTotal($baseGrandTotal)
    {
        $this->container['baseGrandTotal'] = $baseGrandTotal;

        return $this;
    }

    /**
     * Gets subtotal
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param float $subtotal Subtotal in quote currency
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets baseSubtotal
     * @return float
     */
    public function getBaseSubtotal()
    {
        return $this->container['baseSubtotal'];
    }

    /**
     * Sets baseSubtotal
     * @param float $baseSubtotal Subtotal in base currency
     * @return $this
     */
    public function setBaseSubtotal($baseSubtotal)
    {
        $this->container['baseSubtotal'] = $baseSubtotal;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param float $discountAmount Discount amount in quote currency
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets baseDiscountAmount
     * @return float
     */
    public function getBaseDiscountAmount()
    {
        return $this->container['baseDiscountAmount'];
    }

    /**
     * Sets baseDiscountAmount
     * @param float $baseDiscountAmount Discount amount in base currency
     * @return $this
     */
    public function setBaseDiscountAmount($baseDiscountAmount)
    {
        $this->container['baseDiscountAmount'] = $baseDiscountAmount;

        return $this;
    }

    /**
     * Gets subtotalWithDiscount
     * @return float
     */
    public function getSubtotalWithDiscount()
    {
        return $this->container['subtotalWithDiscount'];
    }

    /**
     * Sets subtotalWithDiscount
     * @param float $subtotalWithDiscount Subtotal in quote currency with applied discount
     * @return $this
     */
    public function setSubtotalWithDiscount($subtotalWithDiscount)
    {
        $this->container['subtotalWithDiscount'] = $subtotalWithDiscount;

        return $this;
    }

    /**
     * Gets baseSubtotalWithDiscount
     * @return float
     */
    public function getBaseSubtotalWithDiscount()
    {
        return $this->container['baseSubtotalWithDiscount'];
    }

    /**
     * Sets baseSubtotalWithDiscount
     * @param float $baseSubtotalWithDiscount Subtotal in base currency with applied discount
     * @return $this
     */
    public function setBaseSubtotalWithDiscount($baseSubtotalWithDiscount)
    {
        $this->container['baseSubtotalWithDiscount'] = $baseSubtotalWithDiscount;

        return $this;
    }

    /**
     * Gets shippingAmount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     * @param float $shippingAmount Shipping amount in quote currency
     * @return $this
     */
    public function setShippingAmount($shippingAmount)
    {
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets baseShippingAmount
     * @return float
     */
    public function getBaseShippingAmount()
    {
        return $this->container['baseShippingAmount'];
    }

    /**
     * Sets baseShippingAmount
     * @param float $baseShippingAmount Shipping amount in base currency
     * @return $this
     */
    public function setBaseShippingAmount($baseShippingAmount)
    {
        $this->container['baseShippingAmount'] = $baseShippingAmount;

        return $this;
    }

    /**
     * Gets shippingDiscountAmount
     * @return float
     */
    public function getShippingDiscountAmount()
    {
        return $this->container['shippingDiscountAmount'];
    }

    /**
     * Sets shippingDiscountAmount
     * @param float $shippingDiscountAmount Shipping discount amount in quote currency
     * @return $this
     */
    public function setShippingDiscountAmount($shippingDiscountAmount)
    {
        $this->container['shippingDiscountAmount'] = $shippingDiscountAmount;

        return $this;
    }

    /**
     * Gets baseShippingDiscountAmount
     * @return float
     */
    public function getBaseShippingDiscountAmount()
    {
        return $this->container['baseShippingDiscountAmount'];
    }

    /**
     * Sets baseShippingDiscountAmount
     * @param float $baseShippingDiscountAmount Shipping discount amount in base currency
     * @return $this
     */
    public function setBaseShippingDiscountAmount($baseShippingDiscountAmount)
    {
        $this->container['baseShippingDiscountAmount'] = $baseShippingDiscountAmount;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param float $taxAmount Tax amount in quote currency
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets baseTaxAmount
     * @return float
     */
    public function getBaseTaxAmount()
    {
        return $this->container['baseTaxAmount'];
    }

    /**
     * Sets baseTaxAmount
     * @param float $baseTaxAmount Tax amount in base currency
     * @return $this
     */
    public function setBaseTaxAmount($baseTaxAmount)
    {
        $this->container['baseTaxAmount'] = $baseTaxAmount;

        return $this;
    }

    /**
     * Gets weeeTaxAppliedAmount
     * @return float
     */
    public function getWeeeTaxAppliedAmount()
    {
        return $this->container['weeeTaxAppliedAmount'];
    }

    /**
     * Sets weeeTaxAppliedAmount
     * @param float $weeeTaxAppliedAmount Item weee tax applied amount in quote currency.
     * @return $this
     */
    public function setWeeeTaxAppliedAmount($weeeTaxAppliedAmount)
    {
        $this->container['weeeTaxAppliedAmount'] = $weeeTaxAppliedAmount;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     * @return float
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     * @param float $shippingTaxAmount Shipping tax amount in quote currency
     * @return $this
     */
    public function setShippingTaxAmount($shippingTaxAmount)
    {
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseShippingTaxAmount
     * @return float
     */
    public function getBaseShippingTaxAmount()
    {
        return $this->container['baseShippingTaxAmount'];
    }

    /**
     * Sets baseShippingTaxAmount
     * @param float $baseShippingTaxAmount Shipping tax amount in base currency
     * @return $this
     */
    public function setBaseShippingTaxAmount($baseShippingTaxAmount)
    {
        $this->container['baseShippingTaxAmount'] = $baseShippingTaxAmount;

        return $this;
    }

    /**
     * Gets subtotalInclTax
     * @return float
     */
    public function getSubtotalInclTax()
    {
        return $this->container['subtotalInclTax'];
    }

    /**
     * Sets subtotalInclTax
     * @param float $subtotalInclTax Subtotal including tax in quote currency
     * @return $this
     */
    public function setSubtotalInclTax($subtotalInclTax)
    {
        $this->container['subtotalInclTax'] = $subtotalInclTax;

        return $this;
    }

    /**
     * Gets baseSubtotalInclTax
     * @return float
     */
    public function getBaseSubtotalInclTax()
    {
        return $this->container['baseSubtotalInclTax'];
    }

    /**
     * Sets baseSubtotalInclTax
     * @param float $baseSubtotalInclTax Subtotal including tax in base currency
     * @return $this
     */
    public function setBaseSubtotalInclTax($baseSubtotalInclTax)
    {
        $this->container['baseSubtotalInclTax'] = $baseSubtotalInclTax;

        return $this;
    }

    /**
     * Gets shippingInclTax
     * @return float
     */
    public function getShippingInclTax()
    {
        return $this->container['shippingInclTax'];
    }

    /**
     * Sets shippingInclTax
     * @param float $shippingInclTax Shipping including tax in quote currency
     * @return $this
     */
    public function setShippingInclTax($shippingInclTax)
    {
        $this->container['shippingInclTax'] = $shippingInclTax;

        return $this;
    }

    /**
     * Gets baseShippingInclTax
     * @return float
     */
    public function getBaseShippingInclTax()
    {
        return $this->container['baseShippingInclTax'];
    }

    /**
     * Sets baseShippingInclTax
     * @param float $baseShippingInclTax Shipping including tax in base currency
     * @return $this
     */
    public function setBaseShippingInclTax($baseShippingInclTax)
    {
        $this->container['baseShippingInclTax'] = $baseShippingInclTax;

        return $this;
    }

    /**
     * Gets baseCurrencyCode
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['baseCurrencyCode'];
    }

    /**
     * Sets baseCurrencyCode
     * @param string $baseCurrencyCode Base currency code
     * @return $this
     */
    public function setBaseCurrencyCode($baseCurrencyCode)
    {
        $this->container['baseCurrencyCode'] = $baseCurrencyCode;

        return $this;
    }

    /**
     * Gets quoteCurrencyCode
     * @return string
     */
    public function getQuoteCurrencyCode()
    {
        return $this->container['quoteCurrencyCode'];
    }

    /**
     * Sets quoteCurrencyCode
     * @param string $quoteCurrencyCode Quote currency code
     * @return $this
     */
    public function setQuoteCurrencyCode($quoteCurrencyCode)
    {
        $this->container['quoteCurrencyCode'] = $quoteCurrencyCode;

        return $this;
    }

    /**
     * Gets couponCode
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['couponCode'];
    }

    /**
     * Sets couponCode
     * @param string $couponCode Applied coupon code
     * @return $this
     */
    public function setCouponCode($couponCode)
    {
        $this->container['couponCode'] = $couponCode;

        return $this;
    }

    /**
     * Gets itemsQty
     * @return int
     */
    public function getItemsQty()
    {
        return $this->container['itemsQty'];
    }

    /**
     * Sets itemsQty
     * @param int $itemsQty Items qty
     * @return $this
     */
    public function setItemsQty($itemsQty)
    {
        $this->container['itemsQty'] = $itemsQty;

        return $this;
    }

    /**
     * Gets items
     * @return \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemInterface[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemInterface[] $items Totals by items
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets totalSegments
     * @return \TheCodeBunny\Magento2Api\Model\QuoteDataTotalSegmentInterface[]
     */
    public function getTotalSegments()
    {
        return $this->container['totalSegments'];
    }

    /**
     * Sets totalSegments
     * @param \TheCodeBunny\Magento2Api\Model\QuoteDataTotalSegmentInterface[] $totalSegments Dynamically calculated totals
     * @return $this
     */
    public function setTotalSegments($totalSegments)
    {
        $this->container['totalSegments'] = $totalSegments;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


