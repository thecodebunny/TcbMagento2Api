<?php
/**
 * SalesDataTransactionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesDataTransactionInterface Class Doc Comment
 *
 * @category    Class
 * @description Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesDataTransactionInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-data-transaction-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transactionId' => 'int',
        'parentId' => 'int',
        'orderId' => 'int',
        'paymentId' => 'int',
        'txnId' => 'string',
        'parentTxnId' => 'string',
        'txnType' => 'string',
        'isClosed' => 'int',
        'additionalInformation' => 'string[]',
        'createdAt' => 'string',
        'childTransactions' => '\TheCodeBunny\Magento2Api\Model\SalesDataTransactionInterface[]',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesDataTransactionExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionId' => 'transaction_id',
        'parentId' => 'parent_id',
        'orderId' => 'order_id',
        'paymentId' => 'payment_id',
        'txnId' => 'txn_id',
        'parentTxnId' => 'parent_txn_id',
        'txnType' => 'txn_type',
        'isClosed' => 'is_closed',
        'additionalInformation' => 'additional_information',
        'createdAt' => 'created_at',
        'childTransactions' => 'child_transactions',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'transactionId' => 'setTransactionId',
        'parentId' => 'setParentId',
        'orderId' => 'setOrderId',
        'paymentId' => 'setPaymentId',
        'txnId' => 'setTxnId',
        'parentTxnId' => 'setParentTxnId',
        'txnType' => 'setTxnType',
        'isClosed' => 'setIsClosed',
        'additionalInformation' => 'setAdditionalInformation',
        'createdAt' => 'setCreatedAt',
        'childTransactions' => 'setChildTransactions',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'transactionId' => 'getTransactionId',
        'parentId' => 'getParentId',
        'orderId' => 'getOrderId',
        'paymentId' => 'getPaymentId',
        'txnId' => 'getTxnId',
        'parentTxnId' => 'getParentTxnId',
        'txnType' => 'getTxnType',
        'isClosed' => 'getIsClosed',
        'additionalInformation' => 'getAdditionalInformation',
        'createdAt' => 'getCreatedAt',
        'childTransactions' => 'getChildTransactions',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['paymentId'] = isset($data['paymentId']) ? $data['paymentId'] : null;
        $this->container['txnId'] = isset($data['txnId']) ? $data['txnId'] : null;
        $this->container['parentTxnId'] = isset($data['parentTxnId']) ? $data['parentTxnId'] : null;
        $this->container['txnType'] = isset($data['txnType']) ? $data['txnType'] : null;
        $this->container['isClosed'] = isset($data['isClosed']) ? $data['isClosed'] : null;
        $this->container['additionalInformation'] = isset($data['additionalInformation']) ? $data['additionalInformation'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['childTransactions'] = isset($data['childTransactions']) ? $data['childTransactions'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['transactionId'] === null) {
            $invalid_properties[] = "'transactionId' can't be null";
        }
        if ($this->container['orderId'] === null) {
            $invalid_properties[] = "'orderId' can't be null";
        }
        if ($this->container['paymentId'] === null) {
            $invalid_properties[] = "'paymentId' can't be null";
        }
        if ($this->container['txnId'] === null) {
            $invalid_properties[] = "'txnId' can't be null";
        }
        if ($this->container['parentTxnId'] === null) {
            $invalid_properties[] = "'parentTxnId' can't be null";
        }
        if ($this->container['txnType'] === null) {
            $invalid_properties[] = "'txnType' can't be null";
        }
        if ($this->container['isClosed'] === null) {
            $invalid_properties[] = "'isClosed' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalid_properties[] = "'createdAt' can't be null";
        }
        if ($this->container['childTransactions'] === null) {
            $invalid_properties[] = "'childTransactions' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['transactionId'] === null) {
            return false;
        }
        if ($this->container['orderId'] === null) {
            return false;
        }
        if ($this->container['paymentId'] === null) {
            return false;
        }
        if ($this->container['txnId'] === null) {
            return false;
        }
        if ($this->container['parentTxnId'] === null) {
            return false;
        }
        if ($this->container['txnType'] === null) {
            return false;
        }
        if ($this->container['isClosed'] === null) {
            return false;
        }
        if ($this->container['createdAt'] === null) {
            return false;
        }
        if ($this->container['childTransactions'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets transactionId
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     * @param int $transactionId Transaction ID.
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets parentId
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     * @param int $parentId The parent ID for the transaction. Otherwise, null.
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets orderId
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     * @param int $orderId Order ID.
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets paymentId
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['paymentId'];
    }

    /**
     * Sets paymentId
     * @param int $paymentId Payment ID.
     * @return $this
     */
    public function setPaymentId($paymentId)
    {
        $this->container['paymentId'] = $paymentId;

        return $this;
    }

    /**
     * Gets txnId
     * @return string
     */
    public function getTxnId()
    {
        return $this->container['txnId'];
    }

    /**
     * Sets txnId
     * @param string $txnId Transaction business ID.
     * @return $this
     */
    public function setTxnId($txnId)
    {
        $this->container['txnId'] = $txnId;

        return $this;
    }

    /**
     * Gets parentTxnId
     * @return string
     */
    public function getParentTxnId()
    {
        return $this->container['parentTxnId'];
    }

    /**
     * Sets parentTxnId
     * @param string $parentTxnId Parent transaction business ID.
     * @return $this
     */
    public function setParentTxnId($parentTxnId)
    {
        $this->container['parentTxnId'] = $parentTxnId;

        return $this;
    }

    /**
     * Gets txnType
     * @return string
     */
    public function getTxnType()
    {
        return $this->container['txnType'];
    }

    /**
     * Sets txnType
     * @param string $txnType Transaction type.
     * @return $this
     */
    public function setTxnType($txnType)
    {
        $this->container['txnType'] = $txnType;

        return $this;
    }

    /**
     * Gets isClosed
     * @return int
     */
    public function getIsClosed()
    {
        return $this->container['isClosed'];
    }

    /**
     * Sets isClosed
     * @param int $isClosed Is-closed flag value.
     * @return $this
     */
    public function setIsClosed($isClosed)
    {
        $this->container['isClosed'] = $isClosed;

        return $this;
    }

    /**
     * Gets additionalInformation
     * @return string[]
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     * @param string[] $additionalInformation Array of additional information. Otherwise, null.
     * @return $this
     */
    public function setAdditionalInformation($additionalInformation)
    {
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets createdAt
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     * @param string $createdAt Created-at timestamp.
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets childTransactions
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataTransactionInterface[]
     */
    public function getChildTransactions()
    {
        return $this->container['childTransactions'];
    }

    /**
     * Sets childTransactions
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataTransactionInterface[] $childTransactions Array of child transactions.
     * @return $this
     */
    public function setChildTransactions($childTransactions)
    {
        $this->container['childTransactions'] = $childTransactions;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataTransactionExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataTransactionExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


