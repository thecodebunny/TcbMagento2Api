<?php
/**
 * SalesDataInvoiceInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesDataInvoiceInterface Class Doc Comment
 *
 * @category    Class
 * @description Invoice interface. An invoice is a record of the receipt of payment for an order.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesDataInvoiceInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-data-invoice-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseCurrencyCode' => 'string',
        'baseDiscountAmount' => 'float',
        'baseGrandTotal' => 'float',
        'baseDiscountTaxCompensationAmount' => 'float',
        'baseShippingAmount' => 'float',
        'baseShippingDiscountTaxCompensationAmnt' => 'float',
        'baseShippingInclTax' => 'float',
        'baseShippingTaxAmount' => 'float',
        'baseSubtotal' => 'float',
        'baseSubtotalInclTax' => 'float',
        'baseTaxAmount' => 'float',
        'baseTotalRefunded' => 'float',
        'baseToGlobalRate' => 'float',
        'baseToOrderRate' => 'float',
        'billingAddressId' => 'int',
        'canVoidFlag' => 'int',
        'createdAt' => 'string',
        'discountAmount' => 'float',
        'discountDescription' => 'string',
        'emailSent' => 'int',
        'entityId' => 'int',
        'globalCurrencyCode' => 'string',
        'grandTotal' => 'float',
        'discountTaxCompensationAmount' => 'float',
        'incrementId' => 'string',
        'isUsedForRefund' => 'int',
        'orderCurrencyCode' => 'string',
        'orderId' => 'int',
        'shippingAddressId' => 'int',
        'shippingAmount' => 'float',
        'shippingDiscountTaxCompensationAmount' => 'float',
        'shippingInclTax' => 'float',
        'shippingTaxAmount' => 'float',
        'state' => 'int',
        'storeCurrencyCode' => 'string',
        'storeId' => 'int',
        'storeToBaseRate' => 'float',
        'storeToOrderRate' => 'float',
        'subtotal' => 'float',
        'subtotalInclTax' => 'float',
        'taxAmount' => 'float',
        'totalQty' => 'float',
        'transactionId' => 'string',
        'updatedAt' => 'string',
        'items' => '\TheCodeBunny\Magento2Api\Model\SalesDataInvoiceItemInterface[]',
        'comments' => '\TheCodeBunny\Magento2Api\Model\SalesDataInvoiceCommentInterface[]',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesDataInvoiceExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'baseCurrencyCode' => 'base_currency_code',
        'baseDiscountAmount' => 'base_discount_amount',
        'baseGrandTotal' => 'base_grand_total',
        'baseDiscountTaxCompensationAmount' => 'base_discount_tax_compensation_amount',
        'baseShippingAmount' => 'base_shipping_amount',
        'baseShippingDiscountTaxCompensationAmnt' => 'base_shipping_discount_tax_compensation_amnt',
        'baseShippingInclTax' => 'base_shipping_incl_tax',
        'baseShippingTaxAmount' => 'base_shipping_tax_amount',
        'baseSubtotal' => 'base_subtotal',
        'baseSubtotalInclTax' => 'base_subtotal_incl_tax',
        'baseTaxAmount' => 'base_tax_amount',
        'baseTotalRefunded' => 'base_total_refunded',
        'baseToGlobalRate' => 'base_to_global_rate',
        'baseToOrderRate' => 'base_to_order_rate',
        'billingAddressId' => 'billing_address_id',
        'canVoidFlag' => 'can_void_flag',
        'createdAt' => 'created_at',
        'discountAmount' => 'discount_amount',
        'discountDescription' => 'discount_description',
        'emailSent' => 'email_sent',
        'entityId' => 'entity_id',
        'globalCurrencyCode' => 'global_currency_code',
        'grandTotal' => 'grand_total',
        'discountTaxCompensationAmount' => 'discount_tax_compensation_amount',
        'incrementId' => 'increment_id',
        'isUsedForRefund' => 'is_used_for_refund',
        'orderCurrencyCode' => 'order_currency_code',
        'orderId' => 'order_id',
        'shippingAddressId' => 'shipping_address_id',
        'shippingAmount' => 'shipping_amount',
        'shippingDiscountTaxCompensationAmount' => 'shipping_discount_tax_compensation_amount',
        'shippingInclTax' => 'shipping_incl_tax',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'state' => 'state',
        'storeCurrencyCode' => 'store_currency_code',
        'storeId' => 'store_id',
        'storeToBaseRate' => 'store_to_base_rate',
        'storeToOrderRate' => 'store_to_order_rate',
        'subtotal' => 'subtotal',
        'subtotalInclTax' => 'subtotal_incl_tax',
        'taxAmount' => 'tax_amount',
        'totalQty' => 'total_qty',
        'transactionId' => 'transaction_id',
        'updatedAt' => 'updated_at',
        'items' => 'items',
        'comments' => 'comments',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'baseCurrencyCode' => 'setBaseCurrencyCode',
        'baseDiscountAmount' => 'setBaseDiscountAmount',
        'baseGrandTotal' => 'setBaseGrandTotal',
        'baseDiscountTaxCompensationAmount' => 'setBaseDiscountTaxCompensationAmount',
        'baseShippingAmount' => 'setBaseShippingAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'setBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'setBaseShippingInclTax',
        'baseShippingTaxAmount' => 'setBaseShippingTaxAmount',
        'baseSubtotal' => 'setBaseSubtotal',
        'baseSubtotalInclTax' => 'setBaseSubtotalInclTax',
        'baseTaxAmount' => 'setBaseTaxAmount',
        'baseTotalRefunded' => 'setBaseTotalRefunded',
        'baseToGlobalRate' => 'setBaseToGlobalRate',
        'baseToOrderRate' => 'setBaseToOrderRate',
        'billingAddressId' => 'setBillingAddressId',
        'canVoidFlag' => 'setCanVoidFlag',
        'createdAt' => 'setCreatedAt',
        'discountAmount' => 'setDiscountAmount',
        'discountDescription' => 'setDiscountDescription',
        'emailSent' => 'setEmailSent',
        'entityId' => 'setEntityId',
        'globalCurrencyCode' => 'setGlobalCurrencyCode',
        'grandTotal' => 'setGrandTotal',
        'discountTaxCompensationAmount' => 'setDiscountTaxCompensationAmount',
        'incrementId' => 'setIncrementId',
        'isUsedForRefund' => 'setIsUsedForRefund',
        'orderCurrencyCode' => 'setOrderCurrencyCode',
        'orderId' => 'setOrderId',
        'shippingAddressId' => 'setShippingAddressId',
        'shippingAmount' => 'setShippingAmount',
        'shippingDiscountTaxCompensationAmount' => 'setShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'setShippingInclTax',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'state' => 'setState',
        'storeCurrencyCode' => 'setStoreCurrencyCode',
        'storeId' => 'setStoreId',
        'storeToBaseRate' => 'setStoreToBaseRate',
        'storeToOrderRate' => 'setStoreToOrderRate',
        'subtotal' => 'setSubtotal',
        'subtotalInclTax' => 'setSubtotalInclTax',
        'taxAmount' => 'setTaxAmount',
        'totalQty' => 'setTotalQty',
        'transactionId' => 'setTransactionId',
        'updatedAt' => 'setUpdatedAt',
        'items' => 'setItems',
        'comments' => 'setComments',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'baseCurrencyCode' => 'getBaseCurrencyCode',
        'baseDiscountAmount' => 'getBaseDiscountAmount',
        'baseGrandTotal' => 'getBaseGrandTotal',
        'baseDiscountTaxCompensationAmount' => 'getBaseDiscountTaxCompensationAmount',
        'baseShippingAmount' => 'getBaseShippingAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'getBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'getBaseShippingInclTax',
        'baseShippingTaxAmount' => 'getBaseShippingTaxAmount',
        'baseSubtotal' => 'getBaseSubtotal',
        'baseSubtotalInclTax' => 'getBaseSubtotalInclTax',
        'baseTaxAmount' => 'getBaseTaxAmount',
        'baseTotalRefunded' => 'getBaseTotalRefunded',
        'baseToGlobalRate' => 'getBaseToGlobalRate',
        'baseToOrderRate' => 'getBaseToOrderRate',
        'billingAddressId' => 'getBillingAddressId',
        'canVoidFlag' => 'getCanVoidFlag',
        'createdAt' => 'getCreatedAt',
        'discountAmount' => 'getDiscountAmount',
        'discountDescription' => 'getDiscountDescription',
        'emailSent' => 'getEmailSent',
        'entityId' => 'getEntityId',
        'globalCurrencyCode' => 'getGlobalCurrencyCode',
        'grandTotal' => 'getGrandTotal',
        'discountTaxCompensationAmount' => 'getDiscountTaxCompensationAmount',
        'incrementId' => 'getIncrementId',
        'isUsedForRefund' => 'getIsUsedForRefund',
        'orderCurrencyCode' => 'getOrderCurrencyCode',
        'orderId' => 'getOrderId',
        'shippingAddressId' => 'getShippingAddressId',
        'shippingAmount' => 'getShippingAmount',
        'shippingDiscountTaxCompensationAmount' => 'getShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'getShippingInclTax',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'state' => 'getState',
        'storeCurrencyCode' => 'getStoreCurrencyCode',
        'storeId' => 'getStoreId',
        'storeToBaseRate' => 'getStoreToBaseRate',
        'storeToOrderRate' => 'getStoreToOrderRate',
        'subtotal' => 'getSubtotal',
        'subtotalInclTax' => 'getSubtotalInclTax',
        'taxAmount' => 'getTaxAmount',
        'totalQty' => 'getTotalQty',
        'transactionId' => 'getTransactionId',
        'updatedAt' => 'getUpdatedAt',
        'items' => 'getItems',
        'comments' => 'getComments',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseCurrencyCode'] = isset($data['baseCurrencyCode']) ? $data['baseCurrencyCode'] : null;
        $this->container['baseDiscountAmount'] = isset($data['baseDiscountAmount']) ? $data['baseDiscountAmount'] : null;
        $this->container['baseGrandTotal'] = isset($data['baseGrandTotal']) ? $data['baseGrandTotal'] : null;
        $this->container['baseDiscountTaxCompensationAmount'] = isset($data['baseDiscountTaxCompensationAmount']) ? $data['baseDiscountTaxCompensationAmount'] : null;
        $this->container['baseShippingAmount'] = isset($data['baseShippingAmount']) ? $data['baseShippingAmount'] : null;
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = isset($data['baseShippingDiscountTaxCompensationAmnt']) ? $data['baseShippingDiscountTaxCompensationAmnt'] : null;
        $this->container['baseShippingInclTax'] = isset($data['baseShippingInclTax']) ? $data['baseShippingInclTax'] : null;
        $this->container['baseShippingTaxAmount'] = isset($data['baseShippingTaxAmount']) ? $data['baseShippingTaxAmount'] : null;
        $this->container['baseSubtotal'] = isset($data['baseSubtotal']) ? $data['baseSubtotal'] : null;
        $this->container['baseSubtotalInclTax'] = isset($data['baseSubtotalInclTax']) ? $data['baseSubtotalInclTax'] : null;
        $this->container['baseTaxAmount'] = isset($data['baseTaxAmount']) ? $data['baseTaxAmount'] : null;
        $this->container['baseTotalRefunded'] = isset($data['baseTotalRefunded']) ? $data['baseTotalRefunded'] : null;
        $this->container['baseToGlobalRate'] = isset($data['baseToGlobalRate']) ? $data['baseToGlobalRate'] : null;
        $this->container['baseToOrderRate'] = isset($data['baseToOrderRate']) ? $data['baseToOrderRate'] : null;
        $this->container['billingAddressId'] = isset($data['billingAddressId']) ? $data['billingAddressId'] : null;
        $this->container['canVoidFlag'] = isset($data['canVoidFlag']) ? $data['canVoidFlag'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['discountDescription'] = isset($data['discountDescription']) ? $data['discountDescription'] : null;
        $this->container['emailSent'] = isset($data['emailSent']) ? $data['emailSent'] : null;
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['globalCurrencyCode'] = isset($data['globalCurrencyCode']) ? $data['globalCurrencyCode'] : null;
        $this->container['grandTotal'] = isset($data['grandTotal']) ? $data['grandTotal'] : null;
        $this->container['discountTaxCompensationAmount'] = isset($data['discountTaxCompensationAmount']) ? $data['discountTaxCompensationAmount'] : null;
        $this->container['incrementId'] = isset($data['incrementId']) ? $data['incrementId'] : null;
        $this->container['isUsedForRefund'] = isset($data['isUsedForRefund']) ? $data['isUsedForRefund'] : null;
        $this->container['orderCurrencyCode'] = isset($data['orderCurrencyCode']) ? $data['orderCurrencyCode'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['shippingAddressId'] = isset($data['shippingAddressId']) ? $data['shippingAddressId'] : null;
        $this->container['shippingAmount'] = isset($data['shippingAmount']) ? $data['shippingAmount'] : null;
        $this->container['shippingDiscountTaxCompensationAmount'] = isset($data['shippingDiscountTaxCompensationAmount']) ? $data['shippingDiscountTaxCompensationAmount'] : null;
        $this->container['shippingInclTax'] = isset($data['shippingInclTax']) ? $data['shippingInclTax'] : null;
        $this->container['shippingTaxAmount'] = isset($data['shippingTaxAmount']) ? $data['shippingTaxAmount'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['storeCurrencyCode'] = isset($data['storeCurrencyCode']) ? $data['storeCurrencyCode'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['storeToBaseRate'] = isset($data['storeToBaseRate']) ? $data['storeToBaseRate'] : null;
        $this->container['storeToOrderRate'] = isset($data['storeToOrderRate']) ? $data['storeToOrderRate'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['subtotalInclTax'] = isset($data['subtotalInclTax']) ? $data['subtotalInclTax'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['totalQty'] = isset($data['totalQty']) ? $data['totalQty'] : null;
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['orderId'] === null) {
            $invalid_properties[] = "'orderId' can't be null";
        }
        if ($this->container['totalQty'] === null) {
            $invalid_properties[] = "'totalQty' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalid_properties[] = "'items' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['orderId'] === null) {
            return false;
        }
        if ($this->container['totalQty'] === null) {
            return false;
        }
        if ($this->container['items'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets baseCurrencyCode
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['baseCurrencyCode'];
    }

    /**
     * Sets baseCurrencyCode
     * @param string $baseCurrencyCode Base currency code.
     * @return $this
     */
    public function setBaseCurrencyCode($baseCurrencyCode)
    {
        $this->container['baseCurrencyCode'] = $baseCurrencyCode;

        return $this;
    }

    /**
     * Gets baseDiscountAmount
     * @return float
     */
    public function getBaseDiscountAmount()
    {
        return $this->container['baseDiscountAmount'];
    }

    /**
     * Sets baseDiscountAmount
     * @param float $baseDiscountAmount Base discount amount.
     * @return $this
     */
    public function setBaseDiscountAmount($baseDiscountAmount)
    {
        $this->container['baseDiscountAmount'] = $baseDiscountAmount;

        return $this;
    }

    /**
     * Gets baseGrandTotal
     * @return float
     */
    public function getBaseGrandTotal()
    {
        return $this->container['baseGrandTotal'];
    }

    /**
     * Sets baseGrandTotal
     * @param float $baseGrandTotal Base grand total.
     * @return $this
     */
    public function setBaseGrandTotal($baseGrandTotal)
    {
        $this->container['baseGrandTotal'] = $baseGrandTotal;

        return $this;
    }

    /**
     * Gets baseDiscountTaxCompensationAmount
     * @return float
     */
    public function getBaseDiscountTaxCompensationAmount()
    {
        return $this->container['baseDiscountTaxCompensationAmount'];
    }

    /**
     * Sets baseDiscountTaxCompensationAmount
     * @param float $baseDiscountTaxCompensationAmount Base discount tax compensation amount.
     * @return $this
     */
    public function setBaseDiscountTaxCompensationAmount($baseDiscountTaxCompensationAmount)
    {
        $this->container['baseDiscountTaxCompensationAmount'] = $baseDiscountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets baseShippingAmount
     * @return float
     */
    public function getBaseShippingAmount()
    {
        return $this->container['baseShippingAmount'];
    }

    /**
     * Sets baseShippingAmount
     * @param float $baseShippingAmount Base shipping amount.
     * @return $this
     */
    public function setBaseShippingAmount($baseShippingAmount)
    {
        $this->container['baseShippingAmount'] = $baseShippingAmount;

        return $this;
    }

    /**
     * Gets baseShippingDiscountTaxCompensationAmnt
     * @return float
     */
    public function getBaseShippingDiscountTaxCompensationAmnt()
    {
        return $this->container['baseShippingDiscountTaxCompensationAmnt'];
    }

    /**
     * Sets baseShippingDiscountTaxCompensationAmnt
     * @param float $baseShippingDiscountTaxCompensationAmnt Base shipping discount tax compensation amount.
     * @return $this
     */
    public function setBaseShippingDiscountTaxCompensationAmnt($baseShippingDiscountTaxCompensationAmnt)
    {
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = $baseShippingDiscountTaxCompensationAmnt;

        return $this;
    }

    /**
     * Gets baseShippingInclTax
     * @return float
     */
    public function getBaseShippingInclTax()
    {
        return $this->container['baseShippingInclTax'];
    }

    /**
     * Sets baseShippingInclTax
     * @param float $baseShippingInclTax Base shipping including tax.
     * @return $this
     */
    public function setBaseShippingInclTax($baseShippingInclTax)
    {
        $this->container['baseShippingInclTax'] = $baseShippingInclTax;

        return $this;
    }

    /**
     * Gets baseShippingTaxAmount
     * @return float
     */
    public function getBaseShippingTaxAmount()
    {
        return $this->container['baseShippingTaxAmount'];
    }

    /**
     * Sets baseShippingTaxAmount
     * @param float $baseShippingTaxAmount Base shipping tax amount.
     * @return $this
     */
    public function setBaseShippingTaxAmount($baseShippingTaxAmount)
    {
        $this->container['baseShippingTaxAmount'] = $baseShippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseSubtotal
     * @return float
     */
    public function getBaseSubtotal()
    {
        return $this->container['baseSubtotal'];
    }

    /**
     * Sets baseSubtotal
     * @param float $baseSubtotal Base subtotal.
     * @return $this
     */
    public function setBaseSubtotal($baseSubtotal)
    {
        $this->container['baseSubtotal'] = $baseSubtotal;

        return $this;
    }

    /**
     * Gets baseSubtotalInclTax
     * @return float
     */
    public function getBaseSubtotalInclTax()
    {
        return $this->container['baseSubtotalInclTax'];
    }

    /**
     * Sets baseSubtotalInclTax
     * @param float $baseSubtotalInclTax Base subtotal including tax.
     * @return $this
     */
    public function setBaseSubtotalInclTax($baseSubtotalInclTax)
    {
        $this->container['baseSubtotalInclTax'] = $baseSubtotalInclTax;

        return $this;
    }

    /**
     * Gets baseTaxAmount
     * @return float
     */
    public function getBaseTaxAmount()
    {
        return $this->container['baseTaxAmount'];
    }

    /**
     * Sets baseTaxAmount
     * @param float $baseTaxAmount Base tax amount.
     * @return $this
     */
    public function setBaseTaxAmount($baseTaxAmount)
    {
        $this->container['baseTaxAmount'] = $baseTaxAmount;

        return $this;
    }

    /**
     * Gets baseTotalRefunded
     * @return float
     */
    public function getBaseTotalRefunded()
    {
        return $this->container['baseTotalRefunded'];
    }

    /**
     * Sets baseTotalRefunded
     * @param float $baseTotalRefunded Base total refunded.
     * @return $this
     */
    public function setBaseTotalRefunded($baseTotalRefunded)
    {
        $this->container['baseTotalRefunded'] = $baseTotalRefunded;

        return $this;
    }

    /**
     * Gets baseToGlobalRate
     * @return float
     */
    public function getBaseToGlobalRate()
    {
        return $this->container['baseToGlobalRate'];
    }

    /**
     * Sets baseToGlobalRate
     * @param float $baseToGlobalRate Base-to-global rate.
     * @return $this
     */
    public function setBaseToGlobalRate($baseToGlobalRate)
    {
        $this->container['baseToGlobalRate'] = $baseToGlobalRate;

        return $this;
    }

    /**
     * Gets baseToOrderRate
     * @return float
     */
    public function getBaseToOrderRate()
    {
        return $this->container['baseToOrderRate'];
    }

    /**
     * Sets baseToOrderRate
     * @param float $baseToOrderRate Base-to-order rate.
     * @return $this
     */
    public function setBaseToOrderRate($baseToOrderRate)
    {
        $this->container['baseToOrderRate'] = $baseToOrderRate;

        return $this;
    }

    /**
     * Gets billingAddressId
     * @return int
     */
    public function getBillingAddressId()
    {
        return $this->container['billingAddressId'];
    }

    /**
     * Sets billingAddressId
     * @param int $billingAddressId Billing address ID.
     * @return $this
     */
    public function setBillingAddressId($billingAddressId)
    {
        $this->container['billingAddressId'] = $billingAddressId;

        return $this;
    }

    /**
     * Gets canVoidFlag
     * @return int
     */
    public function getCanVoidFlag()
    {
        return $this->container['canVoidFlag'];
    }

    /**
     * Sets canVoidFlag
     * @param int $canVoidFlag Can void flag value.
     * @return $this
     */
    public function setCanVoidFlag($canVoidFlag)
    {
        $this->container['canVoidFlag'] = $canVoidFlag;

        return $this;
    }

    /**
     * Gets createdAt
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     * @param string $createdAt Created-at timestamp.
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param float $discountAmount Discount amount.
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets discountDescription
     * @return string
     */
    public function getDiscountDescription()
    {
        return $this->container['discountDescription'];
    }

    /**
     * Sets discountDescription
     * @param string $discountDescription Discount description.
     * @return $this
     */
    public function setDiscountDescription($discountDescription)
    {
        $this->container['discountDescription'] = $discountDescription;

        return $this;
    }

    /**
     * Gets emailSent
     * @return int
     */
    public function getEmailSent()
    {
        return $this->container['emailSent'];
    }

    /**
     * Sets emailSent
     * @param int $emailSent Email-sent flag value.
     * @return $this
     */
    public function setEmailSent($emailSent)
    {
        $this->container['emailSent'] = $emailSent;

        return $this;
    }

    /**
     * Gets entityId
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     * @param int $entityId Invoice ID.
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets globalCurrencyCode
     * @return string
     */
    public function getGlobalCurrencyCode()
    {
        return $this->container['globalCurrencyCode'];
    }

    /**
     * Sets globalCurrencyCode
     * @param string $globalCurrencyCode Global currency code.
     * @return $this
     */
    public function setGlobalCurrencyCode($globalCurrencyCode)
    {
        $this->container['globalCurrencyCode'] = $globalCurrencyCode;

        return $this;
    }

    /**
     * Gets grandTotal
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grandTotal'];
    }

    /**
     * Sets grandTotal
     * @param float $grandTotal Grand total.
     * @return $this
     */
    public function setGrandTotal($grandTotal)
    {
        $this->container['grandTotal'] = $grandTotal;

        return $this;
    }

    /**
     * Gets discountTaxCompensationAmount
     * @return float
     */
    public function getDiscountTaxCompensationAmount()
    {
        return $this->container['discountTaxCompensationAmount'];
    }

    /**
     * Sets discountTaxCompensationAmount
     * @param float $discountTaxCompensationAmount Discount tax compensation amount.
     * @return $this
     */
    public function setDiscountTaxCompensationAmount($discountTaxCompensationAmount)
    {
        $this->container['discountTaxCompensationAmount'] = $discountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets incrementId
     * @return string
     */
    public function getIncrementId()
    {
        return $this->container['incrementId'];
    }

    /**
     * Sets incrementId
     * @param string $incrementId Increment ID.
     * @return $this
     */
    public function setIncrementId($incrementId)
    {
        $this->container['incrementId'] = $incrementId;

        return $this;
    }

    /**
     * Gets isUsedForRefund
     * @return int
     */
    public function getIsUsedForRefund()
    {
        return $this->container['isUsedForRefund'];
    }

    /**
     * Sets isUsedForRefund
     * @param int $isUsedForRefund Is-used-for-refund flag value.
     * @return $this
     */
    public function setIsUsedForRefund($isUsedForRefund)
    {
        $this->container['isUsedForRefund'] = $isUsedForRefund;

        return $this;
    }

    /**
     * Gets orderCurrencyCode
     * @return string
     */
    public function getOrderCurrencyCode()
    {
        return $this->container['orderCurrencyCode'];
    }

    /**
     * Sets orderCurrencyCode
     * @param string $orderCurrencyCode Order currency code.
     * @return $this
     */
    public function setOrderCurrencyCode($orderCurrencyCode)
    {
        $this->container['orderCurrencyCode'] = $orderCurrencyCode;

        return $this;
    }

    /**
     * Gets orderId
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     * @param int $orderId Order ID.
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets shippingAddressId
     * @return int
     */
    public function getShippingAddressId()
    {
        return $this->container['shippingAddressId'];
    }

    /**
     * Sets shippingAddressId
     * @param int $shippingAddressId Shipping address ID.
     * @return $this
     */
    public function setShippingAddressId($shippingAddressId)
    {
        $this->container['shippingAddressId'] = $shippingAddressId;

        return $this;
    }

    /**
     * Gets shippingAmount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     * @param float $shippingAmount Shipping amount.
     * @return $this
     */
    public function setShippingAmount($shippingAmount)
    {
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets shippingDiscountTaxCompensationAmount
     * @return float
     */
    public function getShippingDiscountTaxCompensationAmount()
    {
        return $this->container['shippingDiscountTaxCompensationAmount'];
    }

    /**
     * Sets shippingDiscountTaxCompensationAmount
     * @param float $shippingDiscountTaxCompensationAmount Shipping discount tax compensation amount.
     * @return $this
     */
    public function setShippingDiscountTaxCompensationAmount($shippingDiscountTaxCompensationAmount)
    {
        $this->container['shippingDiscountTaxCompensationAmount'] = $shippingDiscountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets shippingInclTax
     * @return float
     */
    public function getShippingInclTax()
    {
        return $this->container['shippingInclTax'];
    }

    /**
     * Sets shippingInclTax
     * @param float $shippingInclTax Shipping including tax.
     * @return $this
     */
    public function setShippingInclTax($shippingInclTax)
    {
        $this->container['shippingInclTax'] = $shippingInclTax;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     * @return float
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     * @param float $shippingTaxAmount Shipping tax amount.
     * @return $this
     */
    public function setShippingTaxAmount($shippingTaxAmount)
    {
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets state
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param int $state State.
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets storeCurrencyCode
     * @return string
     */
    public function getStoreCurrencyCode()
    {
        return $this->container['storeCurrencyCode'];
    }

    /**
     * Sets storeCurrencyCode
     * @param string $storeCurrencyCode Store currency code.
     * @return $this
     */
    public function setStoreCurrencyCode($storeCurrencyCode)
    {
        $this->container['storeCurrencyCode'] = $storeCurrencyCode;

        return $this;
    }

    /**
     * Gets storeId
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     * @param int $storeId Store ID.
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets storeToBaseRate
     * @return float
     */
    public function getStoreToBaseRate()
    {
        return $this->container['storeToBaseRate'];
    }

    /**
     * Sets storeToBaseRate
     * @param float $storeToBaseRate Store-to-base rate.
     * @return $this
     */
    public function setStoreToBaseRate($storeToBaseRate)
    {
        $this->container['storeToBaseRate'] = $storeToBaseRate;

        return $this;
    }

    /**
     * Gets storeToOrderRate
     * @return float
     */
    public function getStoreToOrderRate()
    {
        return $this->container['storeToOrderRate'];
    }

    /**
     * Sets storeToOrderRate
     * @param float $storeToOrderRate Store-to-order rate.
     * @return $this
     */
    public function setStoreToOrderRate($storeToOrderRate)
    {
        $this->container['storeToOrderRate'] = $storeToOrderRate;

        return $this;
    }

    /**
     * Gets subtotal
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param float $subtotal Subtotal.
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotalInclTax
     * @return float
     */
    public function getSubtotalInclTax()
    {
        return $this->container['subtotalInclTax'];
    }

    /**
     * Sets subtotalInclTax
     * @param float $subtotalInclTax Subtotal including tax.
     * @return $this
     */
    public function setSubtotalInclTax($subtotalInclTax)
    {
        $this->container['subtotalInclTax'] = $subtotalInclTax;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param float $taxAmount Tax amount.
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets totalQty
     * @return float
     */
    public function getTotalQty()
    {
        return $this->container['totalQty'];
    }

    /**
     * Sets totalQty
     * @param float $totalQty Total quantity.
     * @return $this
     */
    public function setTotalQty($totalQty)
    {
        $this->container['totalQty'] = $totalQty;

        return $this;
    }

    /**
     * Gets transactionId
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     * @param string $transactionId Transaction ID.
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets updatedAt
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     * @param string $updatedAt Updated-at timestamp.
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets items
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceItemInterface[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceItemInterface[] $items Array of invoice items.
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets comments
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceCommentInterface[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceCommentInterface[] $comments Array of any invoice comments. Otherwise, null.
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataInvoiceExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


