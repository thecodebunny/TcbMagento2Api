<?php
/**
 * CatalogInventoryDataStockItemInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * CatalogInventoryDataStockItemInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface StockItem
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class CatalogInventoryDataStockItemInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'catalog-inventory-data-stock-item-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemId' => 'int',
        'productId' => 'int',
        'stockId' => 'int',
        'qty' => 'float',
        'isInStock' => 'bool',
        'isQtyDecimal' => 'bool',
        'showDefaultNotificationMessage' => 'bool',
        'useConfigMinQty' => 'bool',
        'minQty' => 'float',
        'useConfigMinSaleQty' => 'int',
        'minSaleQty' => 'float',
        'useConfigMaxSaleQty' => 'bool',
        'maxSaleQty' => 'float',
        'useConfigBackorders' => 'bool',
        'backorders' => 'int',
        'useConfigNotifyStockQty' => 'bool',
        'notifyStockQty' => 'float',
        'useConfigQtyIncrements' => 'bool',
        'qtyIncrements' => 'float',
        'useConfigEnableQtyInc' => 'bool',
        'enableQtyIncrements' => 'bool',
        'useConfigManageStock' => 'bool',
        'manageStock' => 'bool',
        'lowStockDate' => 'string',
        'isDecimalDivided' => 'bool',
        'stockStatusChangedAuto' => 'int',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\CatalogInventoryDataStockItemExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'itemId' => 'item_id',
        'productId' => 'product_id',
        'stockId' => 'stock_id',
        'qty' => 'qty',
        'isInStock' => 'is_in_stock',
        'isQtyDecimal' => 'is_qty_decimal',
        'showDefaultNotificationMessage' => 'show_default_notification_message',
        'useConfigMinQty' => 'use_config_min_qty',
        'minQty' => 'min_qty',
        'useConfigMinSaleQty' => 'use_config_min_sale_qty',
        'minSaleQty' => 'min_sale_qty',
        'useConfigMaxSaleQty' => 'use_config_max_sale_qty',
        'maxSaleQty' => 'max_sale_qty',
        'useConfigBackorders' => 'use_config_backorders',
        'backorders' => 'backorders',
        'useConfigNotifyStockQty' => 'use_config_notify_stock_qty',
        'notifyStockQty' => 'notify_stock_qty',
        'useConfigQtyIncrements' => 'use_config_qty_increments',
        'qtyIncrements' => 'qty_increments',
        'useConfigEnableQtyInc' => 'use_config_enable_qty_inc',
        'enableQtyIncrements' => 'enable_qty_increments',
        'useConfigManageStock' => 'use_config_manage_stock',
        'manageStock' => 'manage_stock',
        'lowStockDate' => 'low_stock_date',
        'isDecimalDivided' => 'is_decimal_divided',
        'stockStatusChangedAuto' => 'stock_status_changed_auto',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'itemId' => 'setItemId',
        'productId' => 'setProductId',
        'stockId' => 'setStockId',
        'qty' => 'setQty',
        'isInStock' => 'setIsInStock',
        'isQtyDecimal' => 'setIsQtyDecimal',
        'showDefaultNotificationMessage' => 'setShowDefaultNotificationMessage',
        'useConfigMinQty' => 'setUseConfigMinQty',
        'minQty' => 'setMinQty',
        'useConfigMinSaleQty' => 'setUseConfigMinSaleQty',
        'minSaleQty' => 'setMinSaleQty',
        'useConfigMaxSaleQty' => 'setUseConfigMaxSaleQty',
        'maxSaleQty' => 'setMaxSaleQty',
        'useConfigBackorders' => 'setUseConfigBackorders',
        'backorders' => 'setBackorders',
        'useConfigNotifyStockQty' => 'setUseConfigNotifyStockQty',
        'notifyStockQty' => 'setNotifyStockQty',
        'useConfigQtyIncrements' => 'setUseConfigQtyIncrements',
        'qtyIncrements' => 'setQtyIncrements',
        'useConfigEnableQtyInc' => 'setUseConfigEnableQtyInc',
        'enableQtyIncrements' => 'setEnableQtyIncrements',
        'useConfigManageStock' => 'setUseConfigManageStock',
        'manageStock' => 'setManageStock',
        'lowStockDate' => 'setLowStockDate',
        'isDecimalDivided' => 'setIsDecimalDivided',
        'stockStatusChangedAuto' => 'setStockStatusChangedAuto',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'itemId' => 'getItemId',
        'productId' => 'getProductId',
        'stockId' => 'getStockId',
        'qty' => 'getQty',
        'isInStock' => 'getIsInStock',
        'isQtyDecimal' => 'getIsQtyDecimal',
        'showDefaultNotificationMessage' => 'getShowDefaultNotificationMessage',
        'useConfigMinQty' => 'getUseConfigMinQty',
        'minQty' => 'getMinQty',
        'useConfigMinSaleQty' => 'getUseConfigMinSaleQty',
        'minSaleQty' => 'getMinSaleQty',
        'useConfigMaxSaleQty' => 'getUseConfigMaxSaleQty',
        'maxSaleQty' => 'getMaxSaleQty',
        'useConfigBackorders' => 'getUseConfigBackorders',
        'backorders' => 'getBackorders',
        'useConfigNotifyStockQty' => 'getUseConfigNotifyStockQty',
        'notifyStockQty' => 'getNotifyStockQty',
        'useConfigQtyIncrements' => 'getUseConfigQtyIncrements',
        'qtyIncrements' => 'getQtyIncrements',
        'useConfigEnableQtyInc' => 'getUseConfigEnableQtyInc',
        'enableQtyIncrements' => 'getEnableQtyIncrements',
        'useConfigManageStock' => 'getUseConfigManageStock',
        'manageStock' => 'getManageStock',
        'lowStockDate' => 'getLowStockDate',
        'isDecimalDivided' => 'getIsDecimalDivided',
        'stockStatusChangedAuto' => 'getStockStatusChangedAuto',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemId'] = isset($data['itemId']) ? $data['itemId'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['stockId'] = isset($data['stockId']) ? $data['stockId'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['isInStock'] = isset($data['isInStock']) ? $data['isInStock'] : null;
        $this->container['isQtyDecimal'] = isset($data['isQtyDecimal']) ? $data['isQtyDecimal'] : null;
        $this->container['showDefaultNotificationMessage'] = isset($data['showDefaultNotificationMessage']) ? $data['showDefaultNotificationMessage'] : null;
        $this->container['useConfigMinQty'] = isset($data['useConfigMinQty']) ? $data['useConfigMinQty'] : null;
        $this->container['minQty'] = isset($data['minQty']) ? $data['minQty'] : null;
        $this->container['useConfigMinSaleQty'] = isset($data['useConfigMinSaleQty']) ? $data['useConfigMinSaleQty'] : null;
        $this->container['minSaleQty'] = isset($data['minSaleQty']) ? $data['minSaleQty'] : null;
        $this->container['useConfigMaxSaleQty'] = isset($data['useConfigMaxSaleQty']) ? $data['useConfigMaxSaleQty'] : null;
        $this->container['maxSaleQty'] = isset($data['maxSaleQty']) ? $data['maxSaleQty'] : null;
        $this->container['useConfigBackorders'] = isset($data['useConfigBackorders']) ? $data['useConfigBackorders'] : null;
        $this->container['backorders'] = isset($data['backorders']) ? $data['backorders'] : null;
        $this->container['useConfigNotifyStockQty'] = isset($data['useConfigNotifyStockQty']) ? $data['useConfigNotifyStockQty'] : null;
        $this->container['notifyStockQty'] = isset($data['notifyStockQty']) ? $data['notifyStockQty'] : null;
        $this->container['useConfigQtyIncrements'] = isset($data['useConfigQtyIncrements']) ? $data['useConfigQtyIncrements'] : null;
        $this->container['qtyIncrements'] = isset($data['qtyIncrements']) ? $data['qtyIncrements'] : null;
        $this->container['useConfigEnableQtyInc'] = isset($data['useConfigEnableQtyInc']) ? $data['useConfigEnableQtyInc'] : null;
        $this->container['enableQtyIncrements'] = isset($data['enableQtyIncrements']) ? $data['enableQtyIncrements'] : null;
        $this->container['useConfigManageStock'] = isset($data['useConfigManageStock']) ? $data['useConfigManageStock'] : null;
        $this->container['manageStock'] = isset($data['manageStock']) ? $data['manageStock'] : null;
        $this->container['lowStockDate'] = isset($data['lowStockDate']) ? $data['lowStockDate'] : null;
        $this->container['isDecimalDivided'] = isset($data['isDecimalDivided']) ? $data['isDecimalDivided'] : null;
        $this->container['stockStatusChangedAuto'] = isset($data['stockStatusChangedAuto']) ? $data['stockStatusChangedAuto'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['qty'] === null) {
            $invalid_properties[] = "'qty' can't be null";
        }
        if ($this->container['isInStock'] === null) {
            $invalid_properties[] = "'isInStock' can't be null";
        }
        if ($this->container['isQtyDecimal'] === null) {
            $invalid_properties[] = "'isQtyDecimal' can't be null";
        }
        if ($this->container['showDefaultNotificationMessage'] === null) {
            $invalid_properties[] = "'showDefaultNotificationMessage' can't be null";
        }
        if ($this->container['useConfigMinQty'] === null) {
            $invalid_properties[] = "'useConfigMinQty' can't be null";
        }
        if ($this->container['minQty'] === null) {
            $invalid_properties[] = "'minQty' can't be null";
        }
        if ($this->container['useConfigMinSaleQty'] === null) {
            $invalid_properties[] = "'useConfigMinSaleQty' can't be null";
        }
        if ($this->container['minSaleQty'] === null) {
            $invalid_properties[] = "'minSaleQty' can't be null";
        }
        if ($this->container['useConfigMaxSaleQty'] === null) {
            $invalid_properties[] = "'useConfigMaxSaleQty' can't be null";
        }
        if ($this->container['maxSaleQty'] === null) {
            $invalid_properties[] = "'maxSaleQty' can't be null";
        }
        if ($this->container['useConfigBackorders'] === null) {
            $invalid_properties[] = "'useConfigBackorders' can't be null";
        }
        if ($this->container['backorders'] === null) {
            $invalid_properties[] = "'backorders' can't be null";
        }
        if ($this->container['useConfigNotifyStockQty'] === null) {
            $invalid_properties[] = "'useConfigNotifyStockQty' can't be null";
        }
        if ($this->container['notifyStockQty'] === null) {
            $invalid_properties[] = "'notifyStockQty' can't be null";
        }
        if ($this->container['useConfigQtyIncrements'] === null) {
            $invalid_properties[] = "'useConfigQtyIncrements' can't be null";
        }
        if ($this->container['qtyIncrements'] === null) {
            $invalid_properties[] = "'qtyIncrements' can't be null";
        }
        if ($this->container['useConfigEnableQtyInc'] === null) {
            $invalid_properties[] = "'useConfigEnableQtyInc' can't be null";
        }
        if ($this->container['enableQtyIncrements'] === null) {
            $invalid_properties[] = "'enableQtyIncrements' can't be null";
        }
        if ($this->container['useConfigManageStock'] === null) {
            $invalid_properties[] = "'useConfigManageStock' can't be null";
        }
        if ($this->container['manageStock'] === null) {
            $invalid_properties[] = "'manageStock' can't be null";
        }
        if ($this->container['lowStockDate'] === null) {
            $invalid_properties[] = "'lowStockDate' can't be null";
        }
        if ($this->container['isDecimalDivided'] === null) {
            $invalid_properties[] = "'isDecimalDivided' can't be null";
        }
        if ($this->container['stockStatusChangedAuto'] === null) {
            $invalid_properties[] = "'stockStatusChangedAuto' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['qty'] === null) {
            return false;
        }
        if ($this->container['isInStock'] === null) {
            return false;
        }
        if ($this->container['isQtyDecimal'] === null) {
            return false;
        }
        if ($this->container['showDefaultNotificationMessage'] === null) {
            return false;
        }
        if ($this->container['useConfigMinQty'] === null) {
            return false;
        }
        if ($this->container['minQty'] === null) {
            return false;
        }
        if ($this->container['useConfigMinSaleQty'] === null) {
            return false;
        }
        if ($this->container['minSaleQty'] === null) {
            return false;
        }
        if ($this->container['useConfigMaxSaleQty'] === null) {
            return false;
        }
        if ($this->container['maxSaleQty'] === null) {
            return false;
        }
        if ($this->container['useConfigBackorders'] === null) {
            return false;
        }
        if ($this->container['backorders'] === null) {
            return false;
        }
        if ($this->container['useConfigNotifyStockQty'] === null) {
            return false;
        }
        if ($this->container['notifyStockQty'] === null) {
            return false;
        }
        if ($this->container['useConfigQtyIncrements'] === null) {
            return false;
        }
        if ($this->container['qtyIncrements'] === null) {
            return false;
        }
        if ($this->container['useConfigEnableQtyInc'] === null) {
            return false;
        }
        if ($this->container['enableQtyIncrements'] === null) {
            return false;
        }
        if ($this->container['useConfigManageStock'] === null) {
            return false;
        }
        if ($this->container['manageStock'] === null) {
            return false;
        }
        if ($this->container['lowStockDate'] === null) {
            return false;
        }
        if ($this->container['isDecimalDivided'] === null) {
            return false;
        }
        if ($this->container['stockStatusChangedAuto'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets itemId
     * @return int
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     * @param int $itemId
     * @return $this
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets productId
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     * @param int $productId
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets stockId
     * @return int
     */
    public function getStockId()
    {
        return $this->container['stockId'];
    }

    /**
     * Sets stockId
     * @param int $stockId Stock identifier
     * @return $this
     */
    public function setStockId($stockId)
    {
        $this->container['stockId'] = $stockId;

        return $this;
    }

    /**
     * Gets qty
     * @return float
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     * @param float $qty
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets isInStock
     * @return bool
     */
    public function getIsInStock()
    {
        return $this->container['isInStock'];
    }

    /**
     * Sets isInStock
     * @param bool $isInStock Stock Availability
     * @return $this
     */
    public function setIsInStock($isInStock)
    {
        $this->container['isInStock'] = $isInStock;

        return $this;
    }

    /**
     * Gets isQtyDecimal
     * @return bool
     */
    public function getIsQtyDecimal()
    {
        return $this->container['isQtyDecimal'];
    }

    /**
     * Sets isQtyDecimal
     * @param bool $isQtyDecimal
     * @return $this
     */
    public function setIsQtyDecimal($isQtyDecimal)
    {
        $this->container['isQtyDecimal'] = $isQtyDecimal;

        return $this;
    }

    /**
     * Gets showDefaultNotificationMessage
     * @return bool
     */
    public function getShowDefaultNotificationMessage()
    {
        return $this->container['showDefaultNotificationMessage'];
    }

    /**
     * Sets showDefaultNotificationMessage
     * @param bool $showDefaultNotificationMessage
     * @return $this
     */
    public function setShowDefaultNotificationMessage($showDefaultNotificationMessage)
    {
        $this->container['showDefaultNotificationMessage'] = $showDefaultNotificationMessage;

        return $this;
    }

    /**
     * Gets useConfigMinQty
     * @return bool
     */
    public function getUseConfigMinQty()
    {
        return $this->container['useConfigMinQty'];
    }

    /**
     * Sets useConfigMinQty
     * @param bool $useConfigMinQty
     * @return $this
     */
    public function setUseConfigMinQty($useConfigMinQty)
    {
        $this->container['useConfigMinQty'] = $useConfigMinQty;

        return $this;
    }

    /**
     * Gets minQty
     * @return float
     */
    public function getMinQty()
    {
        return $this->container['minQty'];
    }

    /**
     * Sets minQty
     * @param float $minQty Minimal quantity available for item status in stock
     * @return $this
     */
    public function setMinQty($minQty)
    {
        $this->container['minQty'] = $minQty;

        return $this;
    }

    /**
     * Gets useConfigMinSaleQty
     * @return int
     */
    public function getUseConfigMinSaleQty()
    {
        return $this->container['useConfigMinSaleQty'];
    }

    /**
     * Sets useConfigMinSaleQty
     * @param int $useConfigMinSaleQty
     * @return $this
     */
    public function setUseConfigMinSaleQty($useConfigMinSaleQty)
    {
        $this->container['useConfigMinSaleQty'] = $useConfigMinSaleQty;

        return $this;
    }

    /**
     * Gets minSaleQty
     * @return float
     */
    public function getMinSaleQty()
    {
        return $this->container['minSaleQty'];
    }

    /**
     * Sets minSaleQty
     * @param float $minSaleQty Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
     * @return $this
     */
    public function setMinSaleQty($minSaleQty)
    {
        $this->container['minSaleQty'] = $minSaleQty;

        return $this;
    }

    /**
     * Gets useConfigMaxSaleQty
     * @return bool
     */
    public function getUseConfigMaxSaleQty()
    {
        return $this->container['useConfigMaxSaleQty'];
    }

    /**
     * Sets useConfigMaxSaleQty
     * @param bool $useConfigMaxSaleQty
     * @return $this
     */
    public function setUseConfigMaxSaleQty($useConfigMaxSaleQty)
    {
        $this->container['useConfigMaxSaleQty'] = $useConfigMaxSaleQty;

        return $this;
    }

    /**
     * Gets maxSaleQty
     * @return float
     */
    public function getMaxSaleQty()
    {
        return $this->container['maxSaleQty'];
    }

    /**
     * Sets maxSaleQty
     * @param float $maxSaleQty Maximum Qty Allowed in Shopping Cart data wrapper
     * @return $this
     */
    public function setMaxSaleQty($maxSaleQty)
    {
        $this->container['maxSaleQty'] = $maxSaleQty;

        return $this;
    }

    /**
     * Gets useConfigBackorders
     * @return bool
     */
    public function getUseConfigBackorders()
    {
        return $this->container['useConfigBackorders'];
    }

    /**
     * Sets useConfigBackorders
     * @param bool $useConfigBackorders
     * @return $this
     */
    public function setUseConfigBackorders($useConfigBackorders)
    {
        $this->container['useConfigBackorders'] = $useConfigBackorders;

        return $this;
    }

    /**
     * Gets backorders
     * @return int
     */
    public function getBackorders()
    {
        return $this->container['backorders'];
    }

    /**
     * Sets backorders
     * @param int $backorders Backorders status
     * @return $this
     */
    public function setBackorders($backorders)
    {
        $this->container['backorders'] = $backorders;

        return $this;
    }

    /**
     * Gets useConfigNotifyStockQty
     * @return bool
     */
    public function getUseConfigNotifyStockQty()
    {
        return $this->container['useConfigNotifyStockQty'];
    }

    /**
     * Sets useConfigNotifyStockQty
     * @param bool $useConfigNotifyStockQty
     * @return $this
     */
    public function setUseConfigNotifyStockQty($useConfigNotifyStockQty)
    {
        $this->container['useConfigNotifyStockQty'] = $useConfigNotifyStockQty;

        return $this;
    }

    /**
     * Gets notifyStockQty
     * @return float
     */
    public function getNotifyStockQty()
    {
        return $this->container['notifyStockQty'];
    }

    /**
     * Sets notifyStockQty
     * @param float $notifyStockQty Notify for Quantity Below data wrapper
     * @return $this
     */
    public function setNotifyStockQty($notifyStockQty)
    {
        $this->container['notifyStockQty'] = $notifyStockQty;

        return $this;
    }

    /**
     * Gets useConfigQtyIncrements
     * @return bool
     */
    public function getUseConfigQtyIncrements()
    {
        return $this->container['useConfigQtyIncrements'];
    }

    /**
     * Sets useConfigQtyIncrements
     * @param bool $useConfigQtyIncrements
     * @return $this
     */
    public function setUseConfigQtyIncrements($useConfigQtyIncrements)
    {
        $this->container['useConfigQtyIncrements'] = $useConfigQtyIncrements;

        return $this;
    }

    /**
     * Gets qtyIncrements
     * @return float
     */
    public function getQtyIncrements()
    {
        return $this->container['qtyIncrements'];
    }

    /**
     * Sets qtyIncrements
     * @param float $qtyIncrements Quantity Increments data wrapper
     * @return $this
     */
    public function setQtyIncrements($qtyIncrements)
    {
        $this->container['qtyIncrements'] = $qtyIncrements;

        return $this;
    }

    /**
     * Gets useConfigEnableQtyInc
     * @return bool
     */
    public function getUseConfigEnableQtyInc()
    {
        return $this->container['useConfigEnableQtyInc'];
    }

    /**
     * Sets useConfigEnableQtyInc
     * @param bool $useConfigEnableQtyInc
     * @return $this
     */
    public function setUseConfigEnableQtyInc($useConfigEnableQtyInc)
    {
        $this->container['useConfigEnableQtyInc'] = $useConfigEnableQtyInc;

        return $this;
    }

    /**
     * Gets enableQtyIncrements
     * @return bool
     */
    public function getEnableQtyIncrements()
    {
        return $this->container['enableQtyIncrements'];
    }

    /**
     * Sets enableQtyIncrements
     * @param bool $enableQtyIncrements Whether Quantity Increments is enabled
     * @return $this
     */
    public function setEnableQtyIncrements($enableQtyIncrements)
    {
        $this->container['enableQtyIncrements'] = $enableQtyIncrements;

        return $this;
    }

    /**
     * Gets useConfigManageStock
     * @return bool
     */
    public function getUseConfigManageStock()
    {
        return $this->container['useConfigManageStock'];
    }

    /**
     * Sets useConfigManageStock
     * @param bool $useConfigManageStock
     * @return $this
     */
    public function setUseConfigManageStock($useConfigManageStock)
    {
        $this->container['useConfigManageStock'] = $useConfigManageStock;

        return $this;
    }

    /**
     * Gets manageStock
     * @return bool
     */
    public function getManageStock()
    {
        return $this->container['manageStock'];
    }

    /**
     * Sets manageStock
     * @param bool $manageStock Can Manage Stock
     * @return $this
     */
    public function setManageStock($manageStock)
    {
        $this->container['manageStock'] = $manageStock;

        return $this;
    }

    /**
     * Gets lowStockDate
     * @return string
     */
    public function getLowStockDate()
    {
        return $this->container['lowStockDate'];
    }

    /**
     * Sets lowStockDate
     * @param string $lowStockDate
     * @return $this
     */
    public function setLowStockDate($lowStockDate)
    {
        $this->container['lowStockDate'] = $lowStockDate;

        return $this;
    }

    /**
     * Gets isDecimalDivided
     * @return bool
     */
    public function getIsDecimalDivided()
    {
        return $this->container['isDecimalDivided'];
    }

    /**
     * Sets isDecimalDivided
     * @param bool $isDecimalDivided
     * @return $this
     */
    public function setIsDecimalDivided($isDecimalDivided)
    {
        $this->container['isDecimalDivided'] = $isDecimalDivided;

        return $this;
    }

    /**
     * Gets stockStatusChangedAuto
     * @return int
     */
    public function getStockStatusChangedAuto()
    {
        return $this->container['stockStatusChangedAuto'];
    }

    /**
     * Sets stockStatusChangedAuto
     * @param int $stockStatusChangedAuto
     * @return $this
     */
    public function setStockStatusChangedAuto($stockStatusChangedAuto)
    {
        $this->container['stockStatusChangedAuto'] = $stockStatusChangedAuto;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\CatalogInventoryDataStockItemExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\CatalogInventoryDataStockItemExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


