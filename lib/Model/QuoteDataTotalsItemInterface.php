<?php
/**
 * QuoteDataTotalsItemInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * QuoteDataTotalsItemInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface TotalsItemInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class QuoteDataTotalsItemInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'quote-data-totals-item-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'itemId' => 'int',
        'price' => 'float',
        'basePrice' => 'float',
        'qty' => 'float',
        'rowTotal' => 'float',
        'baseRowTotal' => 'float',
        'rowTotalWithDiscount' => 'float',
        'taxAmount' => 'float',
        'baseTaxAmount' => 'float',
        'taxPercent' => 'float',
        'discountAmount' => 'float',
        'baseDiscountAmount' => 'float',
        'discountPercent' => 'float',
        'priceInclTax' => 'float',
        'basePriceInclTax' => 'float',
        'rowTotalInclTax' => 'float',
        'baseRowTotalInclTax' => 'float',
        'options' => 'string',
        'weeeTaxAppliedAmount' => 'float',
        'weeeTaxApplied' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemExtensionInterface',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'itemId' => 'item_id',
        'price' => 'price',
        'basePrice' => 'base_price',
        'qty' => 'qty',
        'rowTotal' => 'row_total',
        'baseRowTotal' => 'base_row_total',
        'rowTotalWithDiscount' => 'row_total_with_discount',
        'taxAmount' => 'tax_amount',
        'baseTaxAmount' => 'base_tax_amount',
        'taxPercent' => 'tax_percent',
        'discountAmount' => 'discount_amount',
        'baseDiscountAmount' => 'base_discount_amount',
        'discountPercent' => 'discount_percent',
        'priceInclTax' => 'price_incl_tax',
        'basePriceInclTax' => 'base_price_incl_tax',
        'rowTotalInclTax' => 'row_total_incl_tax',
        'baseRowTotalInclTax' => 'base_row_total_incl_tax',
        'options' => 'options',
        'weeeTaxAppliedAmount' => 'weee_tax_applied_amount',
        'weeeTaxApplied' => 'weee_tax_applied',
        'extensionAttributes' => 'extension_attributes',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'itemId' => 'setItemId',
        'price' => 'setPrice',
        'basePrice' => 'setBasePrice',
        'qty' => 'setQty',
        'rowTotal' => 'setRowTotal',
        'baseRowTotal' => 'setBaseRowTotal',
        'rowTotalWithDiscount' => 'setRowTotalWithDiscount',
        'taxAmount' => 'setTaxAmount',
        'baseTaxAmount' => 'setBaseTaxAmount',
        'taxPercent' => 'setTaxPercent',
        'discountAmount' => 'setDiscountAmount',
        'baseDiscountAmount' => 'setBaseDiscountAmount',
        'discountPercent' => 'setDiscountPercent',
        'priceInclTax' => 'setPriceInclTax',
        'basePriceInclTax' => 'setBasePriceInclTax',
        'rowTotalInclTax' => 'setRowTotalInclTax',
        'baseRowTotalInclTax' => 'setBaseRowTotalInclTax',
        'options' => 'setOptions',
        'weeeTaxAppliedAmount' => 'setWeeeTaxAppliedAmount',
        'weeeTaxApplied' => 'setWeeeTaxApplied',
        'extensionAttributes' => 'setExtensionAttributes',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'itemId' => 'getItemId',
        'price' => 'getPrice',
        'basePrice' => 'getBasePrice',
        'qty' => 'getQty',
        'rowTotal' => 'getRowTotal',
        'baseRowTotal' => 'getBaseRowTotal',
        'rowTotalWithDiscount' => 'getRowTotalWithDiscount',
        'taxAmount' => 'getTaxAmount',
        'baseTaxAmount' => 'getBaseTaxAmount',
        'taxPercent' => 'getTaxPercent',
        'discountAmount' => 'getDiscountAmount',
        'baseDiscountAmount' => 'getBaseDiscountAmount',
        'discountPercent' => 'getDiscountPercent',
        'priceInclTax' => 'getPriceInclTax',
        'basePriceInclTax' => 'getBasePriceInclTax',
        'rowTotalInclTax' => 'getRowTotalInclTax',
        'baseRowTotalInclTax' => 'getBaseRowTotalInclTax',
        'options' => 'getOptions',
        'weeeTaxAppliedAmount' => 'getWeeeTaxAppliedAmount',
        'weeeTaxApplied' => 'getWeeeTaxApplied',
        'extensionAttributes' => 'getExtensionAttributes',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemId'] = isset($data['itemId']) ? $data['itemId'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['basePrice'] = isset($data['basePrice']) ? $data['basePrice'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['rowTotal'] = isset($data['rowTotal']) ? $data['rowTotal'] : null;
        $this->container['baseRowTotal'] = isset($data['baseRowTotal']) ? $data['baseRowTotal'] : null;
        $this->container['rowTotalWithDiscount'] = isset($data['rowTotalWithDiscount']) ? $data['rowTotalWithDiscount'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['baseTaxAmount'] = isset($data['baseTaxAmount']) ? $data['baseTaxAmount'] : null;
        $this->container['taxPercent'] = isset($data['taxPercent']) ? $data['taxPercent'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['baseDiscountAmount'] = isset($data['baseDiscountAmount']) ? $data['baseDiscountAmount'] : null;
        $this->container['discountPercent'] = isset($data['discountPercent']) ? $data['discountPercent'] : null;
        $this->container['priceInclTax'] = isset($data['priceInclTax']) ? $data['priceInclTax'] : null;
        $this->container['basePriceInclTax'] = isset($data['basePriceInclTax']) ? $data['basePriceInclTax'] : null;
        $this->container['rowTotalInclTax'] = isset($data['rowTotalInclTax']) ? $data['rowTotalInclTax'] : null;
        $this->container['baseRowTotalInclTax'] = isset($data['baseRowTotalInclTax']) ? $data['baseRowTotalInclTax'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['weeeTaxAppliedAmount'] = isset($data['weeeTaxAppliedAmount']) ? $data['weeeTaxAppliedAmount'] : null;
        $this->container['weeeTaxApplied'] = isset($data['weeeTaxApplied']) ? $data['weeeTaxApplied'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['itemId'] === null) {
            $invalid_properties[] = "'itemId' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['basePrice'] === null) {
            $invalid_properties[] = "'basePrice' can't be null";
        }
        if ($this->container['qty'] === null) {
            $invalid_properties[] = "'qty' can't be null";
        }
        if ($this->container['rowTotal'] === null) {
            $invalid_properties[] = "'rowTotal' can't be null";
        }
        if ($this->container['baseRowTotal'] === null) {
            $invalid_properties[] = "'baseRowTotal' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalid_properties[] = "'options' can't be null";
        }
        if ($this->container['weeeTaxAppliedAmount'] === null) {
            $invalid_properties[] = "'weeeTaxAppliedAmount' can't be null";
        }
        if ($this->container['weeeTaxApplied'] === null) {
            $invalid_properties[] = "'weeeTaxApplied' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['itemId'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['basePrice'] === null) {
            return false;
        }
        if ($this->container['qty'] === null) {
            return false;
        }
        if ($this->container['rowTotal'] === null) {
            return false;
        }
        if ($this->container['baseRowTotal'] === null) {
            return false;
        }
        if ($this->container['options'] === null) {
            return false;
        }
        if ($this->container['weeeTaxAppliedAmount'] === null) {
            return false;
        }
        if ($this->container['weeeTaxApplied'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets itemId
     * @return int
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     * @param int $itemId Item id
     * @return $this
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param float $price Item price in quote currency.
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets basePrice
     * @return float
     */
    public function getBasePrice()
    {
        return $this->container['basePrice'];
    }

    /**
     * Sets basePrice
     * @param float $basePrice Item price in base currency.
     * @return $this
     */
    public function setBasePrice($basePrice)
    {
        $this->container['basePrice'] = $basePrice;

        return $this;
    }

    /**
     * Gets qty
     * @return float
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     * @param float $qty Item quantity.
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets rowTotal
     * @return float
     */
    public function getRowTotal()
    {
        return $this->container['rowTotal'];
    }

    /**
     * Sets rowTotal
     * @param float $rowTotal Row total in quote currency.
     * @return $this
     */
    public function setRowTotal($rowTotal)
    {
        $this->container['rowTotal'] = $rowTotal;

        return $this;
    }

    /**
     * Gets baseRowTotal
     * @return float
     */
    public function getBaseRowTotal()
    {
        return $this->container['baseRowTotal'];
    }

    /**
     * Sets baseRowTotal
     * @param float $baseRowTotal Row total in base currency.
     * @return $this
     */
    public function setBaseRowTotal($baseRowTotal)
    {
        $this->container['baseRowTotal'] = $baseRowTotal;

        return $this;
    }

    /**
     * Gets rowTotalWithDiscount
     * @return float
     */
    public function getRowTotalWithDiscount()
    {
        return $this->container['rowTotalWithDiscount'];
    }

    /**
     * Sets rowTotalWithDiscount
     * @param float $rowTotalWithDiscount Row total with discount in quote currency. Otherwise, null.
     * @return $this
     */
    public function setRowTotalWithDiscount($rowTotalWithDiscount)
    {
        $this->container['rowTotalWithDiscount'] = $rowTotalWithDiscount;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param float $taxAmount Tax amount in quote currency. Otherwise, null.
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets baseTaxAmount
     * @return float
     */
    public function getBaseTaxAmount()
    {
        return $this->container['baseTaxAmount'];
    }

    /**
     * Sets baseTaxAmount
     * @param float $baseTaxAmount Tax amount in base currency. Otherwise, null.
     * @return $this
     */
    public function setBaseTaxAmount($baseTaxAmount)
    {
        $this->container['baseTaxAmount'] = $baseTaxAmount;

        return $this;
    }

    /**
     * Gets taxPercent
     * @return float
     */
    public function getTaxPercent()
    {
        return $this->container['taxPercent'];
    }

    /**
     * Sets taxPercent
     * @param float $taxPercent Tax percent. Otherwise, null.
     * @return $this
     */
    public function setTaxPercent($taxPercent)
    {
        $this->container['taxPercent'] = $taxPercent;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param float $discountAmount Discount amount in quote currency. Otherwise, null.
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets baseDiscountAmount
     * @return float
     */
    public function getBaseDiscountAmount()
    {
        return $this->container['baseDiscountAmount'];
    }

    /**
     * Sets baseDiscountAmount
     * @param float $baseDiscountAmount Discount amount in base currency. Otherwise, null.
     * @return $this
     */
    public function setBaseDiscountAmount($baseDiscountAmount)
    {
        $this->container['baseDiscountAmount'] = $baseDiscountAmount;

        return $this;
    }

    /**
     * Gets discountPercent
     * @return float
     */
    public function getDiscountPercent()
    {
        return $this->container['discountPercent'];
    }

    /**
     * Sets discountPercent
     * @param float $discountPercent Discount percent. Otherwise, null.
     * @return $this
     */
    public function setDiscountPercent($discountPercent)
    {
        $this->container['discountPercent'] = $discountPercent;

        return $this;
    }

    /**
     * Gets priceInclTax
     * @return float
     */
    public function getPriceInclTax()
    {
        return $this->container['priceInclTax'];
    }

    /**
     * Sets priceInclTax
     * @param float $priceInclTax Price including tax in quote currency. Otherwise, null.
     * @return $this
     */
    public function setPriceInclTax($priceInclTax)
    {
        $this->container['priceInclTax'] = $priceInclTax;

        return $this;
    }

    /**
     * Gets basePriceInclTax
     * @return float
     */
    public function getBasePriceInclTax()
    {
        return $this->container['basePriceInclTax'];
    }

    /**
     * Sets basePriceInclTax
     * @param float $basePriceInclTax Price including tax in base currency. Otherwise, null.
     * @return $this
     */
    public function setBasePriceInclTax($basePriceInclTax)
    {
        $this->container['basePriceInclTax'] = $basePriceInclTax;

        return $this;
    }

    /**
     * Gets rowTotalInclTax
     * @return float
     */
    public function getRowTotalInclTax()
    {
        return $this->container['rowTotalInclTax'];
    }

    /**
     * Sets rowTotalInclTax
     * @param float $rowTotalInclTax Row total including tax in quote currency. Otherwise, null.
     * @return $this
     */
    public function setRowTotalInclTax($rowTotalInclTax)
    {
        $this->container['rowTotalInclTax'] = $rowTotalInclTax;

        return $this;
    }

    /**
     * Gets baseRowTotalInclTax
     * @return float
     */
    public function getBaseRowTotalInclTax()
    {
        return $this->container['baseRowTotalInclTax'];
    }

    /**
     * Sets baseRowTotalInclTax
     * @param float $baseRowTotalInclTax Row total including tax in base currency. Otherwise, null.
     * @return $this
     */
    public function setBaseRowTotalInclTax($baseRowTotalInclTax)
    {
        $this->container['baseRowTotalInclTax'] = $baseRowTotalInclTax;

        return $this;
    }

    /**
     * Gets options
     * @return string
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param string $options Item price in quote currency.
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets weeeTaxAppliedAmount
     * @return float
     */
    public function getWeeeTaxAppliedAmount()
    {
        return $this->container['weeeTaxAppliedAmount'];
    }

    /**
     * Sets weeeTaxAppliedAmount
     * @param float $weeeTaxAppliedAmount Item weee tax applied amount in quote currency.
     * @return $this
     */
    public function setWeeeTaxAppliedAmount($weeeTaxAppliedAmount)
    {
        $this->container['weeeTaxAppliedAmount'] = $weeeTaxAppliedAmount;

        return $this;
    }

    /**
     * Gets weeeTaxApplied
     * @return string
     */
    public function getWeeeTaxApplied()
    {
        return $this->container['weeeTaxApplied'];
    }

    /**
     * Sets weeeTaxApplied
     * @param string $weeeTaxApplied Item weee tax applied in quote currency.
     * @return $this
     */
    public function setWeeeTaxApplied($weeeTaxApplied)
    {
        $this->container['weeeTaxApplied'] = $weeeTaxApplied;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\QuoteDataTotalsItemExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Product name. Otherwise, null.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


