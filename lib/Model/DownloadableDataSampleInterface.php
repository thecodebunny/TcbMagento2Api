<?php
/**
 * DownloadableDataSampleInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * DownloadableDataSampleInterface Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class DownloadableDataSampleInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'downloadable-data-sample-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'title' => 'string',
        'sortOrder' => 'int',
        'sampleType' => 'string',
        'sampleFile' => 'string',
        'sampleFileContent' => '\TheCodeBunny\Magento2Api\Model\DownloadableDataFileContentInterface',
        'sampleUrl' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\DownloadableDataSampleExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'sortOrder' => 'sort_order',
        'sampleType' => 'sample_type',
        'sampleFile' => 'sample_file',
        'sampleFileContent' => 'sample_file_content',
        'sampleUrl' => 'sample_url',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'sortOrder' => 'setSortOrder',
        'sampleType' => 'setSampleType',
        'sampleFile' => 'setSampleFile',
        'sampleFileContent' => 'setSampleFileContent',
        'sampleUrl' => 'setSampleUrl',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'sortOrder' => 'getSortOrder',
        'sampleType' => 'getSampleType',
        'sampleFile' => 'getSampleFile',
        'sampleFileContent' => 'getSampleFileContent',
        'sampleUrl' => 'getSampleUrl',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['sampleType'] = isset($data['sampleType']) ? $data['sampleType'] : null;
        $this->container['sampleFile'] = isset($data['sampleFile']) ? $data['sampleFile'] : null;
        $this->container['sampleFileContent'] = isset($data['sampleFileContent']) ? $data['sampleFileContent'] : null;
        $this->container['sampleUrl'] = isset($data['sampleUrl']) ? $data['sampleUrl'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        if ($this->container['sortOrder'] === null) {
            $invalid_properties[] = "'sortOrder' can't be null";
        }
        if ($this->container['sampleType'] === null) {
            $invalid_properties[] = "'sampleType' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['title'] === null) {
            return false;
        }
        if ($this->container['sortOrder'] === null) {
            return false;
        }
        if ($this->container['sampleType'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Sample(or link) id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sortOrder
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     * @param int $sortOrder Order index for sample
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets sampleType
     * @return string
     */
    public function getSampleType()
    {
        return $this->container['sampleType'];
    }

    /**
     * Sets sampleType
     * @param string $sampleType
     * @return $this
     */
    public function setSampleType($sampleType)
    {
        $this->container['sampleType'] = $sampleType;

        return $this;
    }

    /**
     * Gets sampleFile
     * @return string
     */
    public function getSampleFile()
    {
        return $this->container['sampleFile'];
    }

    /**
     * Sets sampleFile
     * @param string $sampleFile relative file path
     * @return $this
     */
    public function setSampleFile($sampleFile)
    {
        $this->container['sampleFile'] = $sampleFile;

        return $this;
    }

    /**
     * Gets sampleFileContent
     * @return \TheCodeBunny\Magento2Api\Model\DownloadableDataFileContentInterface
     */
    public function getSampleFileContent()
    {
        return $this->container['sampleFileContent'];
    }

    /**
     * Sets sampleFileContent
     * @param \TheCodeBunny\Magento2Api\Model\DownloadableDataFileContentInterface $sampleFileContent
     * @return $this
     */
    public function setSampleFileContent($sampleFileContent)
    {
        $this->container['sampleFileContent'] = $sampleFileContent;

        return $this;
    }

    /**
     * Gets sampleUrl
     * @return string
     */
    public function getSampleUrl()
    {
        return $this->container['sampleUrl'];
    }

    /**
     * Sets sampleUrl
     * @param string $sampleUrl file URL
     * @return $this
     */
    public function setSampleUrl($sampleUrl)
    {
        $this->container['sampleUrl'] = $sampleUrl;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\DownloadableDataSampleExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\DownloadableDataSampleExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


