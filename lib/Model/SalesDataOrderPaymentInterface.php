<?php
/**
 * SalesDataOrderPaymentInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesDataOrderPaymentInterface Class Doc Comment
 *
 * @category    Class
 * @description Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesDataOrderPaymentInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-data-order-payment-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountStatus' => 'string',
        'additionalData' => 'string',
        'additionalInformation' => 'string[]',
        'addressStatus' => 'string',
        'amountAuthorized' => 'float',
        'amountCanceled' => 'float',
        'amountOrdered' => 'float',
        'amountPaid' => 'float',
        'amountRefunded' => 'float',
        'anetTransMethod' => 'string',
        'baseAmountAuthorized' => 'float',
        'baseAmountCanceled' => 'float',
        'baseAmountOrdered' => 'float',
        'baseAmountPaid' => 'float',
        'baseAmountPaidOnline' => 'float',
        'baseAmountRefunded' => 'float',
        'baseAmountRefundedOnline' => 'float',
        'baseShippingAmount' => 'float',
        'baseShippingCaptured' => 'float',
        'baseShippingRefunded' => 'float',
        'ccApproval' => 'string',
        'ccAvsStatus' => 'string',
        'ccCidStatus' => 'string',
        'ccDebugRequestBody' => 'string',
        'ccDebugResponseBody' => 'string',
        'ccDebugResponseSerialized' => 'string',
        'ccExpMonth' => 'string',
        'ccExpYear' => 'string',
        'ccLast4' => 'string',
        'ccNumberEnc' => 'string',
        'ccOwner' => 'string',
        'ccSecureVerify' => 'string',
        'ccSsIssue' => 'string',
        'ccSsStartMonth' => 'string',
        'ccSsStartYear' => 'string',
        'ccStatus' => 'string',
        'ccStatusDescription' => 'string',
        'ccTransId' => 'string',
        'ccType' => 'string',
        'echeckAccountName' => 'string',
        'echeckAccountType' => 'string',
        'echeckBankName' => 'string',
        'echeckRoutingNumber' => 'string',
        'echeckType' => 'string',
        'entityId' => 'int',
        'lastTransId' => 'string',
        'method' => 'string',
        'parentId' => 'int',
        'poNumber' => 'string',
        'protectionEligibility' => 'string',
        'quotePaymentId' => 'int',
        'shippingAmount' => 'float',
        'shippingCaptured' => 'float',
        'shippingRefunded' => 'float',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'accountStatus' => 'account_status',
        'additionalData' => 'additional_data',
        'additionalInformation' => 'additional_information',
        'addressStatus' => 'address_status',
        'amountAuthorized' => 'amount_authorized',
        'amountCanceled' => 'amount_canceled',
        'amountOrdered' => 'amount_ordered',
        'amountPaid' => 'amount_paid',
        'amountRefunded' => 'amount_refunded',
        'anetTransMethod' => 'anet_trans_method',
        'baseAmountAuthorized' => 'base_amount_authorized',
        'baseAmountCanceled' => 'base_amount_canceled',
        'baseAmountOrdered' => 'base_amount_ordered',
        'baseAmountPaid' => 'base_amount_paid',
        'baseAmountPaidOnline' => 'base_amount_paid_online',
        'baseAmountRefunded' => 'base_amount_refunded',
        'baseAmountRefundedOnline' => 'base_amount_refunded_online',
        'baseShippingAmount' => 'base_shipping_amount',
        'baseShippingCaptured' => 'base_shipping_captured',
        'baseShippingRefunded' => 'base_shipping_refunded',
        'ccApproval' => 'cc_approval',
        'ccAvsStatus' => 'cc_avs_status',
        'ccCidStatus' => 'cc_cid_status',
        'ccDebugRequestBody' => 'cc_debug_request_body',
        'ccDebugResponseBody' => 'cc_debug_response_body',
        'ccDebugResponseSerialized' => 'cc_debug_response_serialized',
        'ccExpMonth' => 'cc_exp_month',
        'ccExpYear' => 'cc_exp_year',
        'ccLast4' => 'cc_last4',
        'ccNumberEnc' => 'cc_number_enc',
        'ccOwner' => 'cc_owner',
        'ccSecureVerify' => 'cc_secure_verify',
        'ccSsIssue' => 'cc_ss_issue',
        'ccSsStartMonth' => 'cc_ss_start_month',
        'ccSsStartYear' => 'cc_ss_start_year',
        'ccStatus' => 'cc_status',
        'ccStatusDescription' => 'cc_status_description',
        'ccTransId' => 'cc_trans_id',
        'ccType' => 'cc_type',
        'echeckAccountName' => 'echeck_account_name',
        'echeckAccountType' => 'echeck_account_type',
        'echeckBankName' => 'echeck_bank_name',
        'echeckRoutingNumber' => 'echeck_routing_number',
        'echeckType' => 'echeck_type',
        'entityId' => 'entity_id',
        'lastTransId' => 'last_trans_id',
        'method' => 'method',
        'parentId' => 'parent_id',
        'poNumber' => 'po_number',
        'protectionEligibility' => 'protection_eligibility',
        'quotePaymentId' => 'quote_payment_id',
        'shippingAmount' => 'shipping_amount',
        'shippingCaptured' => 'shipping_captured',
        'shippingRefunded' => 'shipping_refunded',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'accountStatus' => 'setAccountStatus',
        'additionalData' => 'setAdditionalData',
        'additionalInformation' => 'setAdditionalInformation',
        'addressStatus' => 'setAddressStatus',
        'amountAuthorized' => 'setAmountAuthorized',
        'amountCanceled' => 'setAmountCanceled',
        'amountOrdered' => 'setAmountOrdered',
        'amountPaid' => 'setAmountPaid',
        'amountRefunded' => 'setAmountRefunded',
        'anetTransMethod' => 'setAnetTransMethod',
        'baseAmountAuthorized' => 'setBaseAmountAuthorized',
        'baseAmountCanceled' => 'setBaseAmountCanceled',
        'baseAmountOrdered' => 'setBaseAmountOrdered',
        'baseAmountPaid' => 'setBaseAmountPaid',
        'baseAmountPaidOnline' => 'setBaseAmountPaidOnline',
        'baseAmountRefunded' => 'setBaseAmountRefunded',
        'baseAmountRefundedOnline' => 'setBaseAmountRefundedOnline',
        'baseShippingAmount' => 'setBaseShippingAmount',
        'baseShippingCaptured' => 'setBaseShippingCaptured',
        'baseShippingRefunded' => 'setBaseShippingRefunded',
        'ccApproval' => 'setCcApproval',
        'ccAvsStatus' => 'setCcAvsStatus',
        'ccCidStatus' => 'setCcCidStatus',
        'ccDebugRequestBody' => 'setCcDebugRequestBody',
        'ccDebugResponseBody' => 'setCcDebugResponseBody',
        'ccDebugResponseSerialized' => 'setCcDebugResponseSerialized',
        'ccExpMonth' => 'setCcExpMonth',
        'ccExpYear' => 'setCcExpYear',
        'ccLast4' => 'setCcLast4',
        'ccNumberEnc' => 'setCcNumberEnc',
        'ccOwner' => 'setCcOwner',
        'ccSecureVerify' => 'setCcSecureVerify',
        'ccSsIssue' => 'setCcSsIssue',
        'ccSsStartMonth' => 'setCcSsStartMonth',
        'ccSsStartYear' => 'setCcSsStartYear',
        'ccStatus' => 'setCcStatus',
        'ccStatusDescription' => 'setCcStatusDescription',
        'ccTransId' => 'setCcTransId',
        'ccType' => 'setCcType',
        'echeckAccountName' => 'setEcheckAccountName',
        'echeckAccountType' => 'setEcheckAccountType',
        'echeckBankName' => 'setEcheckBankName',
        'echeckRoutingNumber' => 'setEcheckRoutingNumber',
        'echeckType' => 'setEcheckType',
        'entityId' => 'setEntityId',
        'lastTransId' => 'setLastTransId',
        'method' => 'setMethod',
        'parentId' => 'setParentId',
        'poNumber' => 'setPoNumber',
        'protectionEligibility' => 'setProtectionEligibility',
        'quotePaymentId' => 'setQuotePaymentId',
        'shippingAmount' => 'setShippingAmount',
        'shippingCaptured' => 'setShippingCaptured',
        'shippingRefunded' => 'setShippingRefunded',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'accountStatus' => 'getAccountStatus',
        'additionalData' => 'getAdditionalData',
        'additionalInformation' => 'getAdditionalInformation',
        'addressStatus' => 'getAddressStatus',
        'amountAuthorized' => 'getAmountAuthorized',
        'amountCanceled' => 'getAmountCanceled',
        'amountOrdered' => 'getAmountOrdered',
        'amountPaid' => 'getAmountPaid',
        'amountRefunded' => 'getAmountRefunded',
        'anetTransMethod' => 'getAnetTransMethod',
        'baseAmountAuthorized' => 'getBaseAmountAuthorized',
        'baseAmountCanceled' => 'getBaseAmountCanceled',
        'baseAmountOrdered' => 'getBaseAmountOrdered',
        'baseAmountPaid' => 'getBaseAmountPaid',
        'baseAmountPaidOnline' => 'getBaseAmountPaidOnline',
        'baseAmountRefunded' => 'getBaseAmountRefunded',
        'baseAmountRefundedOnline' => 'getBaseAmountRefundedOnline',
        'baseShippingAmount' => 'getBaseShippingAmount',
        'baseShippingCaptured' => 'getBaseShippingCaptured',
        'baseShippingRefunded' => 'getBaseShippingRefunded',
        'ccApproval' => 'getCcApproval',
        'ccAvsStatus' => 'getCcAvsStatus',
        'ccCidStatus' => 'getCcCidStatus',
        'ccDebugRequestBody' => 'getCcDebugRequestBody',
        'ccDebugResponseBody' => 'getCcDebugResponseBody',
        'ccDebugResponseSerialized' => 'getCcDebugResponseSerialized',
        'ccExpMonth' => 'getCcExpMonth',
        'ccExpYear' => 'getCcExpYear',
        'ccLast4' => 'getCcLast4',
        'ccNumberEnc' => 'getCcNumberEnc',
        'ccOwner' => 'getCcOwner',
        'ccSecureVerify' => 'getCcSecureVerify',
        'ccSsIssue' => 'getCcSsIssue',
        'ccSsStartMonth' => 'getCcSsStartMonth',
        'ccSsStartYear' => 'getCcSsStartYear',
        'ccStatus' => 'getCcStatus',
        'ccStatusDescription' => 'getCcStatusDescription',
        'ccTransId' => 'getCcTransId',
        'ccType' => 'getCcType',
        'echeckAccountName' => 'getEcheckAccountName',
        'echeckAccountType' => 'getEcheckAccountType',
        'echeckBankName' => 'getEcheckBankName',
        'echeckRoutingNumber' => 'getEcheckRoutingNumber',
        'echeckType' => 'getEcheckType',
        'entityId' => 'getEntityId',
        'lastTransId' => 'getLastTransId',
        'method' => 'getMethod',
        'parentId' => 'getParentId',
        'poNumber' => 'getPoNumber',
        'protectionEligibility' => 'getProtectionEligibility',
        'quotePaymentId' => 'getQuotePaymentId',
        'shippingAmount' => 'getShippingAmount',
        'shippingCaptured' => 'getShippingCaptured',
        'shippingRefunded' => 'getShippingRefunded',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountStatus'] = isset($data['accountStatus']) ? $data['accountStatus'] : null;
        $this->container['additionalData'] = isset($data['additionalData']) ? $data['additionalData'] : null;
        $this->container['additionalInformation'] = isset($data['additionalInformation']) ? $data['additionalInformation'] : null;
        $this->container['addressStatus'] = isset($data['addressStatus']) ? $data['addressStatus'] : null;
        $this->container['amountAuthorized'] = isset($data['amountAuthorized']) ? $data['amountAuthorized'] : null;
        $this->container['amountCanceled'] = isset($data['amountCanceled']) ? $data['amountCanceled'] : null;
        $this->container['amountOrdered'] = isset($data['amountOrdered']) ? $data['amountOrdered'] : null;
        $this->container['amountPaid'] = isset($data['amountPaid']) ? $data['amountPaid'] : null;
        $this->container['amountRefunded'] = isset($data['amountRefunded']) ? $data['amountRefunded'] : null;
        $this->container['anetTransMethod'] = isset($data['anetTransMethod']) ? $data['anetTransMethod'] : null;
        $this->container['baseAmountAuthorized'] = isset($data['baseAmountAuthorized']) ? $data['baseAmountAuthorized'] : null;
        $this->container['baseAmountCanceled'] = isset($data['baseAmountCanceled']) ? $data['baseAmountCanceled'] : null;
        $this->container['baseAmountOrdered'] = isset($data['baseAmountOrdered']) ? $data['baseAmountOrdered'] : null;
        $this->container['baseAmountPaid'] = isset($data['baseAmountPaid']) ? $data['baseAmountPaid'] : null;
        $this->container['baseAmountPaidOnline'] = isset($data['baseAmountPaidOnline']) ? $data['baseAmountPaidOnline'] : null;
        $this->container['baseAmountRefunded'] = isset($data['baseAmountRefunded']) ? $data['baseAmountRefunded'] : null;
        $this->container['baseAmountRefundedOnline'] = isset($data['baseAmountRefundedOnline']) ? $data['baseAmountRefundedOnline'] : null;
        $this->container['baseShippingAmount'] = isset($data['baseShippingAmount']) ? $data['baseShippingAmount'] : null;
        $this->container['baseShippingCaptured'] = isset($data['baseShippingCaptured']) ? $data['baseShippingCaptured'] : null;
        $this->container['baseShippingRefunded'] = isset($data['baseShippingRefunded']) ? $data['baseShippingRefunded'] : null;
        $this->container['ccApproval'] = isset($data['ccApproval']) ? $data['ccApproval'] : null;
        $this->container['ccAvsStatus'] = isset($data['ccAvsStatus']) ? $data['ccAvsStatus'] : null;
        $this->container['ccCidStatus'] = isset($data['ccCidStatus']) ? $data['ccCidStatus'] : null;
        $this->container['ccDebugRequestBody'] = isset($data['ccDebugRequestBody']) ? $data['ccDebugRequestBody'] : null;
        $this->container['ccDebugResponseBody'] = isset($data['ccDebugResponseBody']) ? $data['ccDebugResponseBody'] : null;
        $this->container['ccDebugResponseSerialized'] = isset($data['ccDebugResponseSerialized']) ? $data['ccDebugResponseSerialized'] : null;
        $this->container['ccExpMonth'] = isset($data['ccExpMonth']) ? $data['ccExpMonth'] : null;
        $this->container['ccExpYear'] = isset($data['ccExpYear']) ? $data['ccExpYear'] : null;
        $this->container['ccLast4'] = isset($data['ccLast4']) ? $data['ccLast4'] : null;
        $this->container['ccNumberEnc'] = isset($data['ccNumberEnc']) ? $data['ccNumberEnc'] : null;
        $this->container['ccOwner'] = isset($data['ccOwner']) ? $data['ccOwner'] : null;
        $this->container['ccSecureVerify'] = isset($data['ccSecureVerify']) ? $data['ccSecureVerify'] : null;
        $this->container['ccSsIssue'] = isset($data['ccSsIssue']) ? $data['ccSsIssue'] : null;
        $this->container['ccSsStartMonth'] = isset($data['ccSsStartMonth']) ? $data['ccSsStartMonth'] : null;
        $this->container['ccSsStartYear'] = isset($data['ccSsStartYear']) ? $data['ccSsStartYear'] : null;
        $this->container['ccStatus'] = isset($data['ccStatus']) ? $data['ccStatus'] : null;
        $this->container['ccStatusDescription'] = isset($data['ccStatusDescription']) ? $data['ccStatusDescription'] : null;
        $this->container['ccTransId'] = isset($data['ccTransId']) ? $data['ccTransId'] : null;
        $this->container['ccType'] = isset($data['ccType']) ? $data['ccType'] : null;
        $this->container['echeckAccountName'] = isset($data['echeckAccountName']) ? $data['echeckAccountName'] : null;
        $this->container['echeckAccountType'] = isset($data['echeckAccountType']) ? $data['echeckAccountType'] : null;
        $this->container['echeckBankName'] = isset($data['echeckBankName']) ? $data['echeckBankName'] : null;
        $this->container['echeckRoutingNumber'] = isset($data['echeckRoutingNumber']) ? $data['echeckRoutingNumber'] : null;
        $this->container['echeckType'] = isset($data['echeckType']) ? $data['echeckType'] : null;
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['lastTransId'] = isset($data['lastTransId']) ? $data['lastTransId'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['poNumber'] = isset($data['poNumber']) ? $data['poNumber'] : null;
        $this->container['protectionEligibility'] = isset($data['protectionEligibility']) ? $data['protectionEligibility'] : null;
        $this->container['quotePaymentId'] = isset($data['quotePaymentId']) ? $data['quotePaymentId'] : null;
        $this->container['shippingAmount'] = isset($data['shippingAmount']) ? $data['shippingAmount'] : null;
        $this->container['shippingCaptured'] = isset($data['shippingCaptured']) ? $data['shippingCaptured'] : null;
        $this->container['shippingRefunded'] = isset($data['shippingRefunded']) ? $data['shippingRefunded'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['accountStatus'] === null) {
            $invalid_properties[] = "'accountStatus' can't be null";
        }
        if ($this->container['additionalInformation'] === null) {
            $invalid_properties[] = "'additionalInformation' can't be null";
        }
        if ($this->container['ccLast4'] === null) {
            $invalid_properties[] = "'ccLast4' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalid_properties[] = "'method' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['accountStatus'] === null) {
            return false;
        }
        if ($this->container['additionalInformation'] === null) {
            return false;
        }
        if ($this->container['ccLast4'] === null) {
            return false;
        }
        if ($this->container['method'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets accountStatus
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['accountStatus'];
    }

    /**
     * Sets accountStatus
     * @param string $accountStatus Account status.
     * @return $this
     */
    public function setAccountStatus($accountStatus)
    {
        $this->container['accountStatus'] = $accountStatus;

        return $this;
    }

    /**
     * Gets additionalData
     * @return string
     */
    public function getAdditionalData()
    {
        return $this->container['additionalData'];
    }

    /**
     * Sets additionalData
     * @param string $additionalData Additional data.
     * @return $this
     */
    public function setAdditionalData($additionalData)
    {
        $this->container['additionalData'] = $additionalData;

        return $this;
    }

    /**
     * Gets additionalInformation
     * @return string[]
     */
    public function getAdditionalInformation()
    {
        return $this->container['additionalInformation'];
    }

    /**
     * Sets additionalInformation
     * @param string[] $additionalInformation Array of additional information.
     * @return $this
     */
    public function setAdditionalInformation($additionalInformation)
    {
        $this->container['additionalInformation'] = $additionalInformation;

        return $this;
    }

    /**
     * Gets addressStatus
     * @return string
     */
    public function getAddressStatus()
    {
        return $this->container['addressStatus'];
    }

    /**
     * Sets addressStatus
     * @param string $addressStatus Address status.
     * @return $this
     */
    public function setAddressStatus($addressStatus)
    {
        $this->container['addressStatus'] = $addressStatus;

        return $this;
    }

    /**
     * Gets amountAuthorized
     * @return float
     */
    public function getAmountAuthorized()
    {
        return $this->container['amountAuthorized'];
    }

    /**
     * Sets amountAuthorized
     * @param float $amountAuthorized Amount authorized.
     * @return $this
     */
    public function setAmountAuthorized($amountAuthorized)
    {
        $this->container['amountAuthorized'] = $amountAuthorized;

        return $this;
    }

    /**
     * Gets amountCanceled
     * @return float
     */
    public function getAmountCanceled()
    {
        return $this->container['amountCanceled'];
    }

    /**
     * Sets amountCanceled
     * @param float $amountCanceled Amount canceled.
     * @return $this
     */
    public function setAmountCanceled($amountCanceled)
    {
        $this->container['amountCanceled'] = $amountCanceled;

        return $this;
    }

    /**
     * Gets amountOrdered
     * @return float
     */
    public function getAmountOrdered()
    {
        return $this->container['amountOrdered'];
    }

    /**
     * Sets amountOrdered
     * @param float $amountOrdered Amount ordered.
     * @return $this
     */
    public function setAmountOrdered($amountOrdered)
    {
        $this->container['amountOrdered'] = $amountOrdered;

        return $this;
    }

    /**
     * Gets amountPaid
     * @return float
     */
    public function getAmountPaid()
    {
        return $this->container['amountPaid'];
    }

    /**
     * Sets amountPaid
     * @param float $amountPaid Amount paid.
     * @return $this
     */
    public function setAmountPaid($amountPaid)
    {
        $this->container['amountPaid'] = $amountPaid;

        return $this;
    }

    /**
     * Gets amountRefunded
     * @return float
     */
    public function getAmountRefunded()
    {
        return $this->container['amountRefunded'];
    }

    /**
     * Sets amountRefunded
     * @param float $amountRefunded Amount refunded.
     * @return $this
     */
    public function setAmountRefunded($amountRefunded)
    {
        $this->container['amountRefunded'] = $amountRefunded;

        return $this;
    }

    /**
     * Gets anetTransMethod
     * @return string
     */
    public function getAnetTransMethod()
    {
        return $this->container['anetTransMethod'];
    }

    /**
     * Sets anetTransMethod
     * @param string $anetTransMethod Anet transaction method.
     * @return $this
     */
    public function setAnetTransMethod($anetTransMethod)
    {
        $this->container['anetTransMethod'] = $anetTransMethod;

        return $this;
    }

    /**
     * Gets baseAmountAuthorized
     * @return float
     */
    public function getBaseAmountAuthorized()
    {
        return $this->container['baseAmountAuthorized'];
    }

    /**
     * Sets baseAmountAuthorized
     * @param float $baseAmountAuthorized Base amount authorized.
     * @return $this
     */
    public function setBaseAmountAuthorized($baseAmountAuthorized)
    {
        $this->container['baseAmountAuthorized'] = $baseAmountAuthorized;

        return $this;
    }

    /**
     * Gets baseAmountCanceled
     * @return float
     */
    public function getBaseAmountCanceled()
    {
        return $this->container['baseAmountCanceled'];
    }

    /**
     * Sets baseAmountCanceled
     * @param float $baseAmountCanceled Base amount canceled.
     * @return $this
     */
    public function setBaseAmountCanceled($baseAmountCanceled)
    {
        $this->container['baseAmountCanceled'] = $baseAmountCanceled;

        return $this;
    }

    /**
     * Gets baseAmountOrdered
     * @return float
     */
    public function getBaseAmountOrdered()
    {
        return $this->container['baseAmountOrdered'];
    }

    /**
     * Sets baseAmountOrdered
     * @param float $baseAmountOrdered Base amount ordered.
     * @return $this
     */
    public function setBaseAmountOrdered($baseAmountOrdered)
    {
        $this->container['baseAmountOrdered'] = $baseAmountOrdered;

        return $this;
    }

    /**
     * Gets baseAmountPaid
     * @return float
     */
    public function getBaseAmountPaid()
    {
        return $this->container['baseAmountPaid'];
    }

    /**
     * Sets baseAmountPaid
     * @param float $baseAmountPaid Base amount paid.
     * @return $this
     */
    public function setBaseAmountPaid($baseAmountPaid)
    {
        $this->container['baseAmountPaid'] = $baseAmountPaid;

        return $this;
    }

    /**
     * Gets baseAmountPaidOnline
     * @return float
     */
    public function getBaseAmountPaidOnline()
    {
        return $this->container['baseAmountPaidOnline'];
    }

    /**
     * Sets baseAmountPaidOnline
     * @param float $baseAmountPaidOnline Base amount paid online.
     * @return $this
     */
    public function setBaseAmountPaidOnline($baseAmountPaidOnline)
    {
        $this->container['baseAmountPaidOnline'] = $baseAmountPaidOnline;

        return $this;
    }

    /**
     * Gets baseAmountRefunded
     * @return float
     */
    public function getBaseAmountRefunded()
    {
        return $this->container['baseAmountRefunded'];
    }

    /**
     * Sets baseAmountRefunded
     * @param float $baseAmountRefunded Base amount refunded.
     * @return $this
     */
    public function setBaseAmountRefunded($baseAmountRefunded)
    {
        $this->container['baseAmountRefunded'] = $baseAmountRefunded;

        return $this;
    }

    /**
     * Gets baseAmountRefundedOnline
     * @return float
     */
    public function getBaseAmountRefundedOnline()
    {
        return $this->container['baseAmountRefundedOnline'];
    }

    /**
     * Sets baseAmountRefundedOnline
     * @param float $baseAmountRefundedOnline Base amount refunded online.
     * @return $this
     */
    public function setBaseAmountRefundedOnline($baseAmountRefundedOnline)
    {
        $this->container['baseAmountRefundedOnline'] = $baseAmountRefundedOnline;

        return $this;
    }

    /**
     * Gets baseShippingAmount
     * @return float
     */
    public function getBaseShippingAmount()
    {
        return $this->container['baseShippingAmount'];
    }

    /**
     * Sets baseShippingAmount
     * @param float $baseShippingAmount Base shipping amount.
     * @return $this
     */
    public function setBaseShippingAmount($baseShippingAmount)
    {
        $this->container['baseShippingAmount'] = $baseShippingAmount;

        return $this;
    }

    /**
     * Gets baseShippingCaptured
     * @return float
     */
    public function getBaseShippingCaptured()
    {
        return $this->container['baseShippingCaptured'];
    }

    /**
     * Sets baseShippingCaptured
     * @param float $baseShippingCaptured Base shipping captured amount.
     * @return $this
     */
    public function setBaseShippingCaptured($baseShippingCaptured)
    {
        $this->container['baseShippingCaptured'] = $baseShippingCaptured;

        return $this;
    }

    /**
     * Gets baseShippingRefunded
     * @return float
     */
    public function getBaseShippingRefunded()
    {
        return $this->container['baseShippingRefunded'];
    }

    /**
     * Sets baseShippingRefunded
     * @param float $baseShippingRefunded Base shipping refunded amount.
     * @return $this
     */
    public function setBaseShippingRefunded($baseShippingRefunded)
    {
        $this->container['baseShippingRefunded'] = $baseShippingRefunded;

        return $this;
    }

    /**
     * Gets ccApproval
     * @return string
     */
    public function getCcApproval()
    {
        return $this->container['ccApproval'];
    }

    /**
     * Sets ccApproval
     * @param string $ccApproval Credit card approval.
     * @return $this
     */
    public function setCcApproval($ccApproval)
    {
        $this->container['ccApproval'] = $ccApproval;

        return $this;
    }

    /**
     * Gets ccAvsStatus
     * @return string
     */
    public function getCcAvsStatus()
    {
        return $this->container['ccAvsStatus'];
    }

    /**
     * Sets ccAvsStatus
     * @param string $ccAvsStatus Credit card avs status.
     * @return $this
     */
    public function setCcAvsStatus($ccAvsStatus)
    {
        $this->container['ccAvsStatus'] = $ccAvsStatus;

        return $this;
    }

    /**
     * Gets ccCidStatus
     * @return string
     */
    public function getCcCidStatus()
    {
        return $this->container['ccCidStatus'];
    }

    /**
     * Sets ccCidStatus
     * @param string $ccCidStatus Credit card CID status.
     * @return $this
     */
    public function setCcCidStatus($ccCidStatus)
    {
        $this->container['ccCidStatus'] = $ccCidStatus;

        return $this;
    }

    /**
     * Gets ccDebugRequestBody
     * @return string
     */
    public function getCcDebugRequestBody()
    {
        return $this->container['ccDebugRequestBody'];
    }

    /**
     * Sets ccDebugRequestBody
     * @param string $ccDebugRequestBody Credit card debug request body.
     * @return $this
     */
    public function setCcDebugRequestBody($ccDebugRequestBody)
    {
        $this->container['ccDebugRequestBody'] = $ccDebugRequestBody;

        return $this;
    }

    /**
     * Gets ccDebugResponseBody
     * @return string
     */
    public function getCcDebugResponseBody()
    {
        return $this->container['ccDebugResponseBody'];
    }

    /**
     * Sets ccDebugResponseBody
     * @param string $ccDebugResponseBody Credit card debug response body.
     * @return $this
     */
    public function setCcDebugResponseBody($ccDebugResponseBody)
    {
        $this->container['ccDebugResponseBody'] = $ccDebugResponseBody;

        return $this;
    }

    /**
     * Gets ccDebugResponseSerialized
     * @return string
     */
    public function getCcDebugResponseSerialized()
    {
        return $this->container['ccDebugResponseSerialized'];
    }

    /**
     * Sets ccDebugResponseSerialized
     * @param string $ccDebugResponseSerialized Credit card debug response serialized.
     * @return $this
     */
    public function setCcDebugResponseSerialized($ccDebugResponseSerialized)
    {
        $this->container['ccDebugResponseSerialized'] = $ccDebugResponseSerialized;

        return $this;
    }

    /**
     * Gets ccExpMonth
     * @return string
     */
    public function getCcExpMonth()
    {
        return $this->container['ccExpMonth'];
    }

    /**
     * Sets ccExpMonth
     * @param string $ccExpMonth Credit card expiration month.
     * @return $this
     */
    public function setCcExpMonth($ccExpMonth)
    {
        $this->container['ccExpMonth'] = $ccExpMonth;

        return $this;
    }

    /**
     * Gets ccExpYear
     * @return string
     */
    public function getCcExpYear()
    {
        return $this->container['ccExpYear'];
    }

    /**
     * Sets ccExpYear
     * @param string $ccExpYear Credit card expiration year.
     * @return $this
     */
    public function setCcExpYear($ccExpYear)
    {
        $this->container['ccExpYear'] = $ccExpYear;

        return $this;
    }

    /**
     * Gets ccLast4
     * @return string
     */
    public function getCcLast4()
    {
        return $this->container['ccLast4'];
    }

    /**
     * Sets ccLast4
     * @param string $ccLast4 Last four digits of the credit card.
     * @return $this
     */
    public function setCcLast4($ccLast4)
    {
        $this->container['ccLast4'] = $ccLast4;

        return $this;
    }

    /**
     * Gets ccNumberEnc
     * @return string
     */
    public function getCcNumberEnc()
    {
        return $this->container['ccNumberEnc'];
    }

    /**
     * Sets ccNumberEnc
     * @param string $ccNumberEnc Encrypted credit card number.
     * @return $this
     */
    public function setCcNumberEnc($ccNumberEnc)
    {
        $this->container['ccNumberEnc'] = $ccNumberEnc;

        return $this;
    }

    /**
     * Gets ccOwner
     * @return string
     */
    public function getCcOwner()
    {
        return $this->container['ccOwner'];
    }

    /**
     * Sets ccOwner
     * @param string $ccOwner Credit card number.
     * @return $this
     */
    public function setCcOwner($ccOwner)
    {
        $this->container['ccOwner'] = $ccOwner;

        return $this;
    }

    /**
     * Gets ccSecureVerify
     * @return string
     */
    public function getCcSecureVerify()
    {
        return $this->container['ccSecureVerify'];
    }

    /**
     * Sets ccSecureVerify
     * @param string $ccSecureVerify Credit card secure verify.
     * @return $this
     */
    public function setCcSecureVerify($ccSecureVerify)
    {
        $this->container['ccSecureVerify'] = $ccSecureVerify;

        return $this;
    }

    /**
     * Gets ccSsIssue
     * @return string
     */
    public function getCcSsIssue()
    {
        return $this->container['ccSsIssue'];
    }

    /**
     * Sets ccSsIssue
     * @param string $ccSsIssue Credit card SS issue.
     * @return $this
     */
    public function setCcSsIssue($ccSsIssue)
    {
        $this->container['ccSsIssue'] = $ccSsIssue;

        return $this;
    }

    /**
     * Gets ccSsStartMonth
     * @return string
     */
    public function getCcSsStartMonth()
    {
        return $this->container['ccSsStartMonth'];
    }

    /**
     * Sets ccSsStartMonth
     * @param string $ccSsStartMonth Credit card SS start month.
     * @return $this
     */
    public function setCcSsStartMonth($ccSsStartMonth)
    {
        $this->container['ccSsStartMonth'] = $ccSsStartMonth;

        return $this;
    }

    /**
     * Gets ccSsStartYear
     * @return string
     */
    public function getCcSsStartYear()
    {
        return $this->container['ccSsStartYear'];
    }

    /**
     * Sets ccSsStartYear
     * @param string $ccSsStartYear Credit card SS start year.
     * @return $this
     */
    public function setCcSsStartYear($ccSsStartYear)
    {
        $this->container['ccSsStartYear'] = $ccSsStartYear;

        return $this;
    }

    /**
     * Gets ccStatus
     * @return string
     */
    public function getCcStatus()
    {
        return $this->container['ccStatus'];
    }

    /**
     * Sets ccStatus
     * @param string $ccStatus Credit card status.
     * @return $this
     */
    public function setCcStatus($ccStatus)
    {
        $this->container['ccStatus'] = $ccStatus;

        return $this;
    }

    /**
     * Gets ccStatusDescription
     * @return string
     */
    public function getCcStatusDescription()
    {
        return $this->container['ccStatusDescription'];
    }

    /**
     * Sets ccStatusDescription
     * @param string $ccStatusDescription Credit card status description.
     * @return $this
     */
    public function setCcStatusDescription($ccStatusDescription)
    {
        $this->container['ccStatusDescription'] = $ccStatusDescription;

        return $this;
    }

    /**
     * Gets ccTransId
     * @return string
     */
    public function getCcTransId()
    {
        return $this->container['ccTransId'];
    }

    /**
     * Sets ccTransId
     * @param string $ccTransId Credit card transaction ID.
     * @return $this
     */
    public function setCcTransId($ccTransId)
    {
        $this->container['ccTransId'] = $ccTransId;

        return $this;
    }

    /**
     * Gets ccType
     * @return string
     */
    public function getCcType()
    {
        return $this->container['ccType'];
    }

    /**
     * Sets ccType
     * @param string $ccType Credit card type.
     * @return $this
     */
    public function setCcType($ccType)
    {
        $this->container['ccType'] = $ccType;

        return $this;
    }

    /**
     * Gets echeckAccountName
     * @return string
     */
    public function getEcheckAccountName()
    {
        return $this->container['echeckAccountName'];
    }

    /**
     * Sets echeckAccountName
     * @param string $echeckAccountName eCheck account name.
     * @return $this
     */
    public function setEcheckAccountName($echeckAccountName)
    {
        $this->container['echeckAccountName'] = $echeckAccountName;

        return $this;
    }

    /**
     * Gets echeckAccountType
     * @return string
     */
    public function getEcheckAccountType()
    {
        return $this->container['echeckAccountType'];
    }

    /**
     * Sets echeckAccountType
     * @param string $echeckAccountType eCheck account type.
     * @return $this
     */
    public function setEcheckAccountType($echeckAccountType)
    {
        $this->container['echeckAccountType'] = $echeckAccountType;

        return $this;
    }

    /**
     * Gets echeckBankName
     * @return string
     */
    public function getEcheckBankName()
    {
        return $this->container['echeckBankName'];
    }

    /**
     * Sets echeckBankName
     * @param string $echeckBankName eCheck bank name.
     * @return $this
     */
    public function setEcheckBankName($echeckBankName)
    {
        $this->container['echeckBankName'] = $echeckBankName;

        return $this;
    }

    /**
     * Gets echeckRoutingNumber
     * @return string
     */
    public function getEcheckRoutingNumber()
    {
        return $this->container['echeckRoutingNumber'];
    }

    /**
     * Sets echeckRoutingNumber
     * @param string $echeckRoutingNumber eCheck routing number.
     * @return $this
     */
    public function setEcheckRoutingNumber($echeckRoutingNumber)
    {
        $this->container['echeckRoutingNumber'] = $echeckRoutingNumber;

        return $this;
    }

    /**
     * Gets echeckType
     * @return string
     */
    public function getEcheckType()
    {
        return $this->container['echeckType'];
    }

    /**
     * Sets echeckType
     * @param string $echeckType eCheck type.
     * @return $this
     */
    public function setEcheckType($echeckType)
    {
        $this->container['echeckType'] = $echeckType;

        return $this;
    }

    /**
     * Gets entityId
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     * @param int $entityId Entity ID.
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets lastTransId
     * @return string
     */
    public function getLastTransId()
    {
        return $this->container['lastTransId'];
    }

    /**
     * Sets lastTransId
     * @param string $lastTransId Last transaction ID.
     * @return $this
     */
    public function setLastTransId($lastTransId)
    {
        $this->container['lastTransId'] = $lastTransId;

        return $this;
    }

    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method Method.
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets parentId
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     * @param int $parentId Parent ID.
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets poNumber
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['poNumber'];
    }

    /**
     * Sets poNumber
     * @param string $poNumber PO number.
     * @return $this
     */
    public function setPoNumber($poNumber)
    {
        $this->container['poNumber'] = $poNumber;

        return $this;
    }

    /**
     * Gets protectionEligibility
     * @return string
     */
    public function getProtectionEligibility()
    {
        return $this->container['protectionEligibility'];
    }

    /**
     * Sets protectionEligibility
     * @param string $protectionEligibility Protection eligibility.
     * @return $this
     */
    public function setProtectionEligibility($protectionEligibility)
    {
        $this->container['protectionEligibility'] = $protectionEligibility;

        return $this;
    }

    /**
     * Gets quotePaymentId
     * @return int
     */
    public function getQuotePaymentId()
    {
        return $this->container['quotePaymentId'];
    }

    /**
     * Sets quotePaymentId
     * @param int $quotePaymentId Quote payment ID.
     * @return $this
     */
    public function setQuotePaymentId($quotePaymentId)
    {
        $this->container['quotePaymentId'] = $quotePaymentId;

        return $this;
    }

    /**
     * Gets shippingAmount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     * @param float $shippingAmount Shipping amount.
     * @return $this
     */
    public function setShippingAmount($shippingAmount)
    {
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets shippingCaptured
     * @return float
     */
    public function getShippingCaptured()
    {
        return $this->container['shippingCaptured'];
    }

    /**
     * Sets shippingCaptured
     * @param float $shippingCaptured Shipping captured.
     * @return $this
     */
    public function setShippingCaptured($shippingCaptured)
    {
        $this->container['shippingCaptured'] = $shippingCaptured;

        return $this;
    }

    /**
     * Gets shippingRefunded
     * @return float
     */
    public function getShippingRefunded()
    {
        return $this->container['shippingRefunded'];
    }

    /**
     * Sets shippingRefunded
     * @param float $shippingRefunded Shipping refunded.
     * @return $this
     */
    public function setShippingRefunded($shippingRefunded)
    {
        $this->container['shippingRefunded'] = $shippingRefunded;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


