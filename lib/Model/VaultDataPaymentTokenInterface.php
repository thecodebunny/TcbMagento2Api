<?php
/**
 * VaultDataPaymentTokenInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * VaultDataPaymentTokenInterface Class Doc Comment
 *
 * @category    Class
 * @description Gateway vault payment token interface.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class VaultDataPaymentTokenInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'vault-data-payment-token-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entityId' => 'int',
        'customerId' => 'int',
        'publicHash' => 'string',
        'paymentMethodCode' => 'string',
        'type' => 'string',
        'createdAt' => 'string',
        'expiresAt' => 'string',
        'gatewayToken' => 'string',
        'tokenDetails' => 'string',
        'isActive' => 'bool',
        'isVisible' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entityId' => 'entity_id',
        'customerId' => 'customer_id',
        'publicHash' => 'public_hash',
        'paymentMethodCode' => 'payment_method_code',
        'type' => 'type',
        'createdAt' => 'created_at',
        'expiresAt' => 'expires_at',
        'gatewayToken' => 'gateway_token',
        'tokenDetails' => 'token_details',
        'isActive' => 'is_active',
        'isVisible' => 'is_visible'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entityId' => 'setEntityId',
        'customerId' => 'setCustomerId',
        'publicHash' => 'setPublicHash',
        'paymentMethodCode' => 'setPaymentMethodCode',
        'type' => 'setType',
        'createdAt' => 'setCreatedAt',
        'expiresAt' => 'setExpiresAt',
        'gatewayToken' => 'setGatewayToken',
        'tokenDetails' => 'setTokenDetails',
        'isActive' => 'setIsActive',
        'isVisible' => 'setIsVisible'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entityId' => 'getEntityId',
        'customerId' => 'getCustomerId',
        'publicHash' => 'getPublicHash',
        'paymentMethodCode' => 'getPaymentMethodCode',
        'type' => 'getType',
        'createdAt' => 'getCreatedAt',
        'expiresAt' => 'getExpiresAt',
        'gatewayToken' => 'getGatewayToken',
        'tokenDetails' => 'getTokenDetails',
        'isActive' => 'getIsActive',
        'isVisible' => 'getIsVisible'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['publicHash'] = isset($data['publicHash']) ? $data['publicHash'] : null;
        $this->container['paymentMethodCode'] = isset($data['paymentMethodCode']) ? $data['paymentMethodCode'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['expiresAt'] = isset($data['expiresAt']) ? $data['expiresAt'] : null;
        $this->container['gatewayToken'] = isset($data['gatewayToken']) ? $data['gatewayToken'] : null;
        $this->container['tokenDetails'] = isset($data['tokenDetails']) ? $data['tokenDetails'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['isVisible'] = isset($data['isVisible']) ? $data['isVisible'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['publicHash'] === null) {
            $invalid_properties[] = "'publicHash' can't be null";
        }
        if ($this->container['paymentMethodCode'] === null) {
            $invalid_properties[] = "'paymentMethodCode' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['gatewayToken'] === null) {
            $invalid_properties[] = "'gatewayToken' can't be null";
        }
        if ($this->container['tokenDetails'] === null) {
            $invalid_properties[] = "'tokenDetails' can't be null";
        }
        if ($this->container['isActive'] === null) {
            $invalid_properties[] = "'isActive' can't be null";
        }
        if ($this->container['isVisible'] === null) {
            $invalid_properties[] = "'isVisible' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['publicHash'] === null) {
            return false;
        }
        if ($this->container['paymentMethodCode'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['gatewayToken'] === null) {
            return false;
        }
        if ($this->container['tokenDetails'] === null) {
            return false;
        }
        if ($this->container['isActive'] === null) {
            return false;
        }
        if ($this->container['isVisible'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets entityId
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     * @param int $entityId Entity ID.
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets customerId
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     * @param int $customerId Customer ID.
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets publicHash
     * @return string
     */
    public function getPublicHash()
    {
        return $this->container['publicHash'];
    }

    /**
     * Sets publicHash
     * @param string $publicHash Public hash
     * @return $this
     */
    public function setPublicHash($publicHash)
    {
        $this->container['publicHash'] = $publicHash;

        return $this;
    }

    /**
     * Gets paymentMethodCode
     * @return string
     */
    public function getPaymentMethodCode()
    {
        return $this->container['paymentMethodCode'];
    }

    /**
     * Sets paymentMethodCode
     * @param string $paymentMethodCode Payment method code
     * @return $this
     */
    public function setPaymentMethodCode($paymentMethodCode)
    {
        $this->container['paymentMethodCode'] = $paymentMethodCode;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets createdAt
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     * @param string $createdAt Token creation timestamp
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets expiresAt
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     * @param string $expiresAt Token expiration timestamp
     * @return $this
     */
    public function setExpiresAt($expiresAt)
    {
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets gatewayToken
     * @return string
     */
    public function getGatewayToken()
    {
        return $this->container['gatewayToken'];
    }

    /**
     * Sets gatewayToken
     * @param string $gatewayToken Gateway token ID
     * @return $this
     */
    public function setGatewayToken($gatewayToken)
    {
        $this->container['gatewayToken'] = $gatewayToken;

        return $this;
    }

    /**
     * Gets tokenDetails
     * @return string
     */
    public function getTokenDetails()
    {
        return $this->container['tokenDetails'];
    }

    /**
     * Sets tokenDetails
     * @param string $tokenDetails Token details
     * @return $this
     */
    public function setTokenDetails($tokenDetails)
    {
        $this->container['tokenDetails'] = $tokenDetails;

        return $this;
    }

    /**
     * Gets isActive
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     * @param bool $isActive Is active.
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets isVisible
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['isVisible'];
    }

    /**
     * Sets isVisible
     * @param bool $isVisible Is visible.
     * @return $this
     */
    public function setIsVisible($isVisible)
    {
        $this->container['isVisible'] = $isVisible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


