<?php
/**
 * SalesRuleDataCouponInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesRuleDataCouponInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface CouponInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesRuleDataCouponInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-rule-data-coupon-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'couponId' => 'int',
        'ruleId' => 'int',
        'code' => 'string',
        'usageLimit' => 'int',
        'usagePerCustomer' => 'int',
        'timesUsed' => 'int',
        'expirationDate' => 'string',
        'isPrimary' => 'bool',
        'createdAt' => 'string',
        'type' => 'int',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesRuleDataCouponExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'couponId' => 'coupon_id',
        'ruleId' => 'rule_id',
        'code' => 'code',
        'usageLimit' => 'usage_limit',
        'usagePerCustomer' => 'usage_per_customer',
        'timesUsed' => 'times_used',
        'expirationDate' => 'expiration_date',
        'isPrimary' => 'is_primary',
        'createdAt' => 'created_at',
        'type' => 'type',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'couponId' => 'setCouponId',
        'ruleId' => 'setRuleId',
        'code' => 'setCode',
        'usageLimit' => 'setUsageLimit',
        'usagePerCustomer' => 'setUsagePerCustomer',
        'timesUsed' => 'setTimesUsed',
        'expirationDate' => 'setExpirationDate',
        'isPrimary' => 'setIsPrimary',
        'createdAt' => 'setCreatedAt',
        'type' => 'setType',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'couponId' => 'getCouponId',
        'ruleId' => 'getRuleId',
        'code' => 'getCode',
        'usageLimit' => 'getUsageLimit',
        'usagePerCustomer' => 'getUsagePerCustomer',
        'timesUsed' => 'getTimesUsed',
        'expirationDate' => 'getExpirationDate',
        'isPrimary' => 'getIsPrimary',
        'createdAt' => 'getCreatedAt',
        'type' => 'getType',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['couponId'] = isset($data['couponId']) ? $data['couponId'] : null;
        $this->container['ruleId'] = isset($data['ruleId']) ? $data['ruleId'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['usageLimit'] = isset($data['usageLimit']) ? $data['usageLimit'] : null;
        $this->container['usagePerCustomer'] = isset($data['usagePerCustomer']) ? $data['usagePerCustomer'] : null;
        $this->container['timesUsed'] = isset($data['timesUsed']) ? $data['timesUsed'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['isPrimary'] = isset($data['isPrimary']) ? $data['isPrimary'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['ruleId'] === null) {
            $invalid_properties[] = "'ruleId' can't be null";
        }
        if ($this->container['timesUsed'] === null) {
            $invalid_properties[] = "'timesUsed' can't be null";
        }
        if ($this->container['isPrimary'] === null) {
            $invalid_properties[] = "'isPrimary' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['ruleId'] === null) {
            return false;
        }
        if ($this->container['timesUsed'] === null) {
            return false;
        }
        if ($this->container['isPrimary'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets couponId
     * @return int
     */
    public function getCouponId()
    {
        return $this->container['couponId'];
    }

    /**
     * Sets couponId
     * @param int $couponId Coupon id
     * @return $this
     */
    public function setCouponId($couponId)
    {
        $this->container['couponId'] = $couponId;

        return $this;
    }

    /**
     * Gets ruleId
     * @return int
     */
    public function getRuleId()
    {
        return $this->container['ruleId'];
    }

    /**
     * Sets ruleId
     * @param int $ruleId The id of the rule associated with the coupon
     * @return $this
     */
    public function setRuleId($ruleId)
    {
        $this->container['ruleId'] = $ruleId;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Coupon code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets usageLimit
     * @return int
     */
    public function getUsageLimit()
    {
        return $this->container['usageLimit'];
    }

    /**
     * Sets usageLimit
     * @param int $usageLimit Usage limit
     * @return $this
     */
    public function setUsageLimit($usageLimit)
    {
        $this->container['usageLimit'] = $usageLimit;

        return $this;
    }

    /**
     * Gets usagePerCustomer
     * @return int
     */
    public function getUsagePerCustomer()
    {
        return $this->container['usagePerCustomer'];
    }

    /**
     * Sets usagePerCustomer
     * @param int $usagePerCustomer Usage limit per customer
     * @return $this
     */
    public function setUsagePerCustomer($usagePerCustomer)
    {
        $this->container['usagePerCustomer'] = $usagePerCustomer;

        return $this;
    }

    /**
     * Gets timesUsed
     * @return int
     */
    public function getTimesUsed()
    {
        return $this->container['timesUsed'];
    }

    /**
     * Sets timesUsed
     * @param int $timesUsed The number of times the coupon has been used
     * @return $this
     */
    public function setTimesUsed($timesUsed)
    {
        $this->container['timesUsed'] = $timesUsed;

        return $this;
    }

    /**
     * Gets expirationDate
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     * @param string $expirationDate Expiration date
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets isPrimary
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['isPrimary'];
    }

    /**
     * Sets isPrimary
     * @param bool $isPrimary The coupon is primary coupon for the rule that it's associated with
     * @return $this
     */
    public function setIsPrimary($isPrimary)
    {
        $this->container['isPrimary'] = $isPrimary;

        return $this;
    }

    /**
     * Gets createdAt
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     * @param string $createdAt When the coupon is created
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets type
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param int $type Of coupon
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesRuleDataCouponExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesRuleDataCouponExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


