<?php
/**
 * SalesDataOrderInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesDataOrderInterface Class Doc Comment
 *
 * @category    Class
 * @description Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesDataOrderInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-data-order-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adjustmentNegative' => 'float',
        'adjustmentPositive' => 'float',
        'appliedRuleIds' => 'string',
        'baseAdjustmentNegative' => 'float',
        'baseAdjustmentPositive' => 'float',
        'baseCurrencyCode' => 'string',
        'baseDiscountAmount' => 'float',
        'baseDiscountCanceled' => 'float',
        'baseDiscountInvoiced' => 'float',
        'baseDiscountRefunded' => 'float',
        'baseGrandTotal' => 'float',
        'baseDiscountTaxCompensationAmount' => 'float',
        'baseDiscountTaxCompensationInvoiced' => 'float',
        'baseDiscountTaxCompensationRefunded' => 'float',
        'baseShippingAmount' => 'float',
        'baseShippingCanceled' => 'float',
        'baseShippingDiscountAmount' => 'float',
        'baseShippingDiscountTaxCompensationAmnt' => 'float',
        'baseShippingInclTax' => 'float',
        'baseShippingInvoiced' => 'float',
        'baseShippingRefunded' => 'float',
        'baseShippingTaxAmount' => 'float',
        'baseShippingTaxRefunded' => 'float',
        'baseSubtotal' => 'float',
        'baseSubtotalCanceled' => 'float',
        'baseSubtotalInclTax' => 'float',
        'baseSubtotalInvoiced' => 'float',
        'baseSubtotalRefunded' => 'float',
        'baseTaxAmount' => 'float',
        'baseTaxCanceled' => 'float',
        'baseTaxInvoiced' => 'float',
        'baseTaxRefunded' => 'float',
        'baseTotalCanceled' => 'float',
        'baseTotalDue' => 'float',
        'baseTotalInvoiced' => 'float',
        'baseTotalInvoicedCost' => 'float',
        'baseTotalOfflineRefunded' => 'float',
        'baseTotalOnlineRefunded' => 'float',
        'baseTotalPaid' => 'float',
        'baseTotalQtyOrdered' => 'float',
        'baseTotalRefunded' => 'float',
        'baseToGlobalRate' => 'float',
        'baseToOrderRate' => 'float',
        'billingAddressId' => 'int',
        'canShipPartially' => 'int',
        'canShipPartiallyItem' => 'int',
        'couponCode' => 'string',
        'createdAt' => 'string',
        'customerDob' => 'string',
        'customerEmail' => 'string',
        'customerFirstname' => 'string',
        'customerGender' => 'int',
        'customerGroupId' => 'int',
        'customerId' => 'int',
        'customerIsGuest' => 'int',
        'customerLastname' => 'string',
        'customerMiddlename' => 'string',
        'customerNote' => 'string',
        'customerNoteNotify' => 'int',
        'customerPrefix' => 'string',
        'customerSuffix' => 'string',
        'customerTaxvat' => 'string',
        'discountAmount' => 'float',
        'discountCanceled' => 'float',
        'discountDescription' => 'string',
        'discountInvoiced' => 'float',
        'discountRefunded' => 'float',
        'editIncrement' => 'int',
        'emailSent' => 'int',
        'entityId' => 'int',
        'extCustomerId' => 'string',
        'extOrderId' => 'string',
        'forcedShipmentWithInvoice' => 'int',
        'globalCurrencyCode' => 'string',
        'grandTotal' => 'float',
        'discountTaxCompensationAmount' => 'float',
        'discountTaxCompensationInvoiced' => 'float',
        'discountTaxCompensationRefunded' => 'float',
        'holdBeforeState' => 'string',
        'holdBeforeStatus' => 'string',
        'incrementId' => 'string',
        'isVirtual' => 'int',
        'orderCurrencyCode' => 'string',
        'originalIncrementId' => 'string',
        'paymentAuthorizationAmount' => 'float',
        'paymentAuthExpiration' => 'int',
        'protectCode' => 'string',
        'quoteAddressId' => 'int',
        'quoteId' => 'int',
        'relationChildId' => 'string',
        'relationChildRealId' => 'string',
        'relationParentId' => 'string',
        'relationParentRealId' => 'string',
        'remoteIp' => 'string',
        'shippingAmount' => 'float',
        'shippingCanceled' => 'float',
        'shippingDescription' => 'string',
        'shippingDiscountAmount' => 'float',
        'shippingDiscountTaxCompensationAmount' => 'float',
        'shippingInclTax' => 'float',
        'shippingInvoiced' => 'float',
        'shippingRefunded' => 'float',
        'shippingTaxAmount' => 'float',
        'shippingTaxRefunded' => 'float',
        'state' => 'string',
        'status' => 'string',
        'storeCurrencyCode' => 'string',
        'storeId' => 'int',
        'storeName' => 'string',
        'storeToBaseRate' => 'float',
        'storeToOrderRate' => 'float',
        'subtotal' => 'float',
        'subtotalCanceled' => 'float',
        'subtotalInclTax' => 'float',
        'subtotalInvoiced' => 'float',
        'subtotalRefunded' => 'float',
        'taxAmount' => 'float',
        'taxCanceled' => 'float',
        'taxInvoiced' => 'float',
        'taxRefunded' => 'float',
        'totalCanceled' => 'float',
        'totalDue' => 'float',
        'totalInvoiced' => 'float',
        'totalItemCount' => 'int',
        'totalOfflineRefunded' => 'float',
        'totalOnlineRefunded' => 'float',
        'totalPaid' => 'float',
        'totalQtyOrdered' => 'float',
        'totalRefunded' => 'float',
        'updatedAt' => 'string',
        'weight' => 'float',
        'xForwardedFor' => 'string',
        'items' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderItemInterface[]',
        'billingAddress' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderAddressInterface',
        'payment' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentInterface',
        'statusHistories' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderStatusHistoryInterface[]',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesDataOrderExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustmentNegative' => 'adjustment_negative',
        'adjustmentPositive' => 'adjustment_positive',
        'appliedRuleIds' => 'applied_rule_ids',
        'baseAdjustmentNegative' => 'base_adjustment_negative',
        'baseAdjustmentPositive' => 'base_adjustment_positive',
        'baseCurrencyCode' => 'base_currency_code',
        'baseDiscountAmount' => 'base_discount_amount',
        'baseDiscountCanceled' => 'base_discount_canceled',
        'baseDiscountInvoiced' => 'base_discount_invoiced',
        'baseDiscountRefunded' => 'base_discount_refunded',
        'baseGrandTotal' => 'base_grand_total',
        'baseDiscountTaxCompensationAmount' => 'base_discount_tax_compensation_amount',
        'baseDiscountTaxCompensationInvoiced' => 'base_discount_tax_compensation_invoiced',
        'baseDiscountTaxCompensationRefunded' => 'base_discount_tax_compensation_refunded',
        'baseShippingAmount' => 'base_shipping_amount',
        'baseShippingCanceled' => 'base_shipping_canceled',
        'baseShippingDiscountAmount' => 'base_shipping_discount_amount',
        'baseShippingDiscountTaxCompensationAmnt' => 'base_shipping_discount_tax_compensation_amnt',
        'baseShippingInclTax' => 'base_shipping_incl_tax',
        'baseShippingInvoiced' => 'base_shipping_invoiced',
        'baseShippingRefunded' => 'base_shipping_refunded',
        'baseShippingTaxAmount' => 'base_shipping_tax_amount',
        'baseShippingTaxRefunded' => 'base_shipping_tax_refunded',
        'baseSubtotal' => 'base_subtotal',
        'baseSubtotalCanceled' => 'base_subtotal_canceled',
        'baseSubtotalInclTax' => 'base_subtotal_incl_tax',
        'baseSubtotalInvoiced' => 'base_subtotal_invoiced',
        'baseSubtotalRefunded' => 'base_subtotal_refunded',
        'baseTaxAmount' => 'base_tax_amount',
        'baseTaxCanceled' => 'base_tax_canceled',
        'baseTaxInvoiced' => 'base_tax_invoiced',
        'baseTaxRefunded' => 'base_tax_refunded',
        'baseTotalCanceled' => 'base_total_canceled',
        'baseTotalDue' => 'base_total_due',
        'baseTotalInvoiced' => 'base_total_invoiced',
        'baseTotalInvoicedCost' => 'base_total_invoiced_cost',
        'baseTotalOfflineRefunded' => 'base_total_offline_refunded',
        'baseTotalOnlineRefunded' => 'base_total_online_refunded',
        'baseTotalPaid' => 'base_total_paid',
        'baseTotalQtyOrdered' => 'base_total_qty_ordered',
        'baseTotalRefunded' => 'base_total_refunded',
        'baseToGlobalRate' => 'base_to_global_rate',
        'baseToOrderRate' => 'base_to_order_rate',
        'billingAddressId' => 'billing_address_id',
        'canShipPartially' => 'can_ship_partially',
        'canShipPartiallyItem' => 'can_ship_partially_item',
        'couponCode' => 'coupon_code',
        'createdAt' => 'created_at',
        'customerDob' => 'customer_dob',
        'customerEmail' => 'customer_email',
        'customerFirstname' => 'customer_firstname',
        'customerGender' => 'customer_gender',
        'customerGroupId' => 'customer_group_id',
        'customerId' => 'customer_id',
        'customerIsGuest' => 'customer_is_guest',
        'customerLastname' => 'customer_lastname',
        'customerMiddlename' => 'customer_middlename',
        'customerNote' => 'customer_note',
        'customerNoteNotify' => 'customer_note_notify',
        'customerPrefix' => 'customer_prefix',
        'customerSuffix' => 'customer_suffix',
        'customerTaxvat' => 'customer_taxvat',
        'discountAmount' => 'discount_amount',
        'discountCanceled' => 'discount_canceled',
        'discountDescription' => 'discount_description',
        'discountInvoiced' => 'discount_invoiced',
        'discountRefunded' => 'discount_refunded',
        'editIncrement' => 'edit_increment',
        'emailSent' => 'email_sent',
        'entityId' => 'entity_id',
        'extCustomerId' => 'ext_customer_id',
        'extOrderId' => 'ext_order_id',
        'forcedShipmentWithInvoice' => 'forced_shipment_with_invoice',
        'globalCurrencyCode' => 'global_currency_code',
        'grandTotal' => 'grand_total',
        'discountTaxCompensationAmount' => 'discount_tax_compensation_amount',
        'discountTaxCompensationInvoiced' => 'discount_tax_compensation_invoiced',
        'discountTaxCompensationRefunded' => 'discount_tax_compensation_refunded',
        'holdBeforeState' => 'hold_before_state',
        'holdBeforeStatus' => 'hold_before_status',
        'incrementId' => 'increment_id',
        'isVirtual' => 'is_virtual',
        'orderCurrencyCode' => 'order_currency_code',
        'originalIncrementId' => 'original_increment_id',
        'paymentAuthorizationAmount' => 'payment_authorization_amount',
        'paymentAuthExpiration' => 'payment_auth_expiration',
        'protectCode' => 'protect_code',
        'quoteAddressId' => 'quote_address_id',
        'quoteId' => 'quote_id',
        'relationChildId' => 'relation_child_id',
        'relationChildRealId' => 'relation_child_real_id',
        'relationParentId' => 'relation_parent_id',
        'relationParentRealId' => 'relation_parent_real_id',
        'remoteIp' => 'remote_ip',
        'shippingAmount' => 'shipping_amount',
        'shippingCanceled' => 'shipping_canceled',
        'shippingDescription' => 'shipping_description',
        'shippingDiscountAmount' => 'shipping_discount_amount',
        'shippingDiscountTaxCompensationAmount' => 'shipping_discount_tax_compensation_amount',
        'shippingInclTax' => 'shipping_incl_tax',
        'shippingInvoiced' => 'shipping_invoiced',
        'shippingRefunded' => 'shipping_refunded',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'shippingTaxRefunded' => 'shipping_tax_refunded',
        'state' => 'state',
        'status' => 'status',
        'storeCurrencyCode' => 'store_currency_code',
        'storeId' => 'store_id',
        'storeName' => 'store_name',
        'storeToBaseRate' => 'store_to_base_rate',
        'storeToOrderRate' => 'store_to_order_rate',
        'subtotal' => 'subtotal',
        'subtotalCanceled' => 'subtotal_canceled',
        'subtotalInclTax' => 'subtotal_incl_tax',
        'subtotalInvoiced' => 'subtotal_invoiced',
        'subtotalRefunded' => 'subtotal_refunded',
        'taxAmount' => 'tax_amount',
        'taxCanceled' => 'tax_canceled',
        'taxInvoiced' => 'tax_invoiced',
        'taxRefunded' => 'tax_refunded',
        'totalCanceled' => 'total_canceled',
        'totalDue' => 'total_due',
        'totalInvoiced' => 'total_invoiced',
        'totalItemCount' => 'total_item_count',
        'totalOfflineRefunded' => 'total_offline_refunded',
        'totalOnlineRefunded' => 'total_online_refunded',
        'totalPaid' => 'total_paid',
        'totalQtyOrdered' => 'total_qty_ordered',
        'totalRefunded' => 'total_refunded',
        'updatedAt' => 'updated_at',
        'weight' => 'weight',
        'xForwardedFor' => 'x_forwarded_for',
        'items' => 'items',
        'billingAddress' => 'billing_address',
        'payment' => 'payment',
        'statusHistories' => 'status_histories',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'adjustmentNegative' => 'setAdjustmentNegative',
        'adjustmentPositive' => 'setAdjustmentPositive',
        'appliedRuleIds' => 'setAppliedRuleIds',
        'baseAdjustmentNegative' => 'setBaseAdjustmentNegative',
        'baseAdjustmentPositive' => 'setBaseAdjustmentPositive',
        'baseCurrencyCode' => 'setBaseCurrencyCode',
        'baseDiscountAmount' => 'setBaseDiscountAmount',
        'baseDiscountCanceled' => 'setBaseDiscountCanceled',
        'baseDiscountInvoiced' => 'setBaseDiscountInvoiced',
        'baseDiscountRefunded' => 'setBaseDiscountRefunded',
        'baseGrandTotal' => 'setBaseGrandTotal',
        'baseDiscountTaxCompensationAmount' => 'setBaseDiscountTaxCompensationAmount',
        'baseDiscountTaxCompensationInvoiced' => 'setBaseDiscountTaxCompensationInvoiced',
        'baseDiscountTaxCompensationRefunded' => 'setBaseDiscountTaxCompensationRefunded',
        'baseShippingAmount' => 'setBaseShippingAmount',
        'baseShippingCanceled' => 'setBaseShippingCanceled',
        'baseShippingDiscountAmount' => 'setBaseShippingDiscountAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'setBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'setBaseShippingInclTax',
        'baseShippingInvoiced' => 'setBaseShippingInvoiced',
        'baseShippingRefunded' => 'setBaseShippingRefunded',
        'baseShippingTaxAmount' => 'setBaseShippingTaxAmount',
        'baseShippingTaxRefunded' => 'setBaseShippingTaxRefunded',
        'baseSubtotal' => 'setBaseSubtotal',
        'baseSubtotalCanceled' => 'setBaseSubtotalCanceled',
        'baseSubtotalInclTax' => 'setBaseSubtotalInclTax',
        'baseSubtotalInvoiced' => 'setBaseSubtotalInvoiced',
        'baseSubtotalRefunded' => 'setBaseSubtotalRefunded',
        'baseTaxAmount' => 'setBaseTaxAmount',
        'baseTaxCanceled' => 'setBaseTaxCanceled',
        'baseTaxInvoiced' => 'setBaseTaxInvoiced',
        'baseTaxRefunded' => 'setBaseTaxRefunded',
        'baseTotalCanceled' => 'setBaseTotalCanceled',
        'baseTotalDue' => 'setBaseTotalDue',
        'baseTotalInvoiced' => 'setBaseTotalInvoiced',
        'baseTotalInvoicedCost' => 'setBaseTotalInvoicedCost',
        'baseTotalOfflineRefunded' => 'setBaseTotalOfflineRefunded',
        'baseTotalOnlineRefunded' => 'setBaseTotalOnlineRefunded',
        'baseTotalPaid' => 'setBaseTotalPaid',
        'baseTotalQtyOrdered' => 'setBaseTotalQtyOrdered',
        'baseTotalRefunded' => 'setBaseTotalRefunded',
        'baseToGlobalRate' => 'setBaseToGlobalRate',
        'baseToOrderRate' => 'setBaseToOrderRate',
        'billingAddressId' => 'setBillingAddressId',
        'canShipPartially' => 'setCanShipPartially',
        'canShipPartiallyItem' => 'setCanShipPartiallyItem',
        'couponCode' => 'setCouponCode',
        'createdAt' => 'setCreatedAt',
        'customerDob' => 'setCustomerDob',
        'customerEmail' => 'setCustomerEmail',
        'customerFirstname' => 'setCustomerFirstname',
        'customerGender' => 'setCustomerGender',
        'customerGroupId' => 'setCustomerGroupId',
        'customerId' => 'setCustomerId',
        'customerIsGuest' => 'setCustomerIsGuest',
        'customerLastname' => 'setCustomerLastname',
        'customerMiddlename' => 'setCustomerMiddlename',
        'customerNote' => 'setCustomerNote',
        'customerNoteNotify' => 'setCustomerNoteNotify',
        'customerPrefix' => 'setCustomerPrefix',
        'customerSuffix' => 'setCustomerSuffix',
        'customerTaxvat' => 'setCustomerTaxvat',
        'discountAmount' => 'setDiscountAmount',
        'discountCanceled' => 'setDiscountCanceled',
        'discountDescription' => 'setDiscountDescription',
        'discountInvoiced' => 'setDiscountInvoiced',
        'discountRefunded' => 'setDiscountRefunded',
        'editIncrement' => 'setEditIncrement',
        'emailSent' => 'setEmailSent',
        'entityId' => 'setEntityId',
        'extCustomerId' => 'setExtCustomerId',
        'extOrderId' => 'setExtOrderId',
        'forcedShipmentWithInvoice' => 'setForcedShipmentWithInvoice',
        'globalCurrencyCode' => 'setGlobalCurrencyCode',
        'grandTotal' => 'setGrandTotal',
        'discountTaxCompensationAmount' => 'setDiscountTaxCompensationAmount',
        'discountTaxCompensationInvoiced' => 'setDiscountTaxCompensationInvoiced',
        'discountTaxCompensationRefunded' => 'setDiscountTaxCompensationRefunded',
        'holdBeforeState' => 'setHoldBeforeState',
        'holdBeforeStatus' => 'setHoldBeforeStatus',
        'incrementId' => 'setIncrementId',
        'isVirtual' => 'setIsVirtual',
        'orderCurrencyCode' => 'setOrderCurrencyCode',
        'originalIncrementId' => 'setOriginalIncrementId',
        'paymentAuthorizationAmount' => 'setPaymentAuthorizationAmount',
        'paymentAuthExpiration' => 'setPaymentAuthExpiration',
        'protectCode' => 'setProtectCode',
        'quoteAddressId' => 'setQuoteAddressId',
        'quoteId' => 'setQuoteId',
        'relationChildId' => 'setRelationChildId',
        'relationChildRealId' => 'setRelationChildRealId',
        'relationParentId' => 'setRelationParentId',
        'relationParentRealId' => 'setRelationParentRealId',
        'remoteIp' => 'setRemoteIp',
        'shippingAmount' => 'setShippingAmount',
        'shippingCanceled' => 'setShippingCanceled',
        'shippingDescription' => 'setShippingDescription',
        'shippingDiscountAmount' => 'setShippingDiscountAmount',
        'shippingDiscountTaxCompensationAmount' => 'setShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'setShippingInclTax',
        'shippingInvoiced' => 'setShippingInvoiced',
        'shippingRefunded' => 'setShippingRefunded',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'shippingTaxRefunded' => 'setShippingTaxRefunded',
        'state' => 'setState',
        'status' => 'setStatus',
        'storeCurrencyCode' => 'setStoreCurrencyCode',
        'storeId' => 'setStoreId',
        'storeName' => 'setStoreName',
        'storeToBaseRate' => 'setStoreToBaseRate',
        'storeToOrderRate' => 'setStoreToOrderRate',
        'subtotal' => 'setSubtotal',
        'subtotalCanceled' => 'setSubtotalCanceled',
        'subtotalInclTax' => 'setSubtotalInclTax',
        'subtotalInvoiced' => 'setSubtotalInvoiced',
        'subtotalRefunded' => 'setSubtotalRefunded',
        'taxAmount' => 'setTaxAmount',
        'taxCanceled' => 'setTaxCanceled',
        'taxInvoiced' => 'setTaxInvoiced',
        'taxRefunded' => 'setTaxRefunded',
        'totalCanceled' => 'setTotalCanceled',
        'totalDue' => 'setTotalDue',
        'totalInvoiced' => 'setTotalInvoiced',
        'totalItemCount' => 'setTotalItemCount',
        'totalOfflineRefunded' => 'setTotalOfflineRefunded',
        'totalOnlineRefunded' => 'setTotalOnlineRefunded',
        'totalPaid' => 'setTotalPaid',
        'totalQtyOrdered' => 'setTotalQtyOrdered',
        'totalRefunded' => 'setTotalRefunded',
        'updatedAt' => 'setUpdatedAt',
        'weight' => 'setWeight',
        'xForwardedFor' => 'setXForwardedFor',
        'items' => 'setItems',
        'billingAddress' => 'setBillingAddress',
        'payment' => 'setPayment',
        'statusHistories' => 'setStatusHistories',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'adjustmentNegative' => 'getAdjustmentNegative',
        'adjustmentPositive' => 'getAdjustmentPositive',
        'appliedRuleIds' => 'getAppliedRuleIds',
        'baseAdjustmentNegative' => 'getBaseAdjustmentNegative',
        'baseAdjustmentPositive' => 'getBaseAdjustmentPositive',
        'baseCurrencyCode' => 'getBaseCurrencyCode',
        'baseDiscountAmount' => 'getBaseDiscountAmount',
        'baseDiscountCanceled' => 'getBaseDiscountCanceled',
        'baseDiscountInvoiced' => 'getBaseDiscountInvoiced',
        'baseDiscountRefunded' => 'getBaseDiscountRefunded',
        'baseGrandTotal' => 'getBaseGrandTotal',
        'baseDiscountTaxCompensationAmount' => 'getBaseDiscountTaxCompensationAmount',
        'baseDiscountTaxCompensationInvoiced' => 'getBaseDiscountTaxCompensationInvoiced',
        'baseDiscountTaxCompensationRefunded' => 'getBaseDiscountTaxCompensationRefunded',
        'baseShippingAmount' => 'getBaseShippingAmount',
        'baseShippingCanceled' => 'getBaseShippingCanceled',
        'baseShippingDiscountAmount' => 'getBaseShippingDiscountAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'getBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'getBaseShippingInclTax',
        'baseShippingInvoiced' => 'getBaseShippingInvoiced',
        'baseShippingRefunded' => 'getBaseShippingRefunded',
        'baseShippingTaxAmount' => 'getBaseShippingTaxAmount',
        'baseShippingTaxRefunded' => 'getBaseShippingTaxRefunded',
        'baseSubtotal' => 'getBaseSubtotal',
        'baseSubtotalCanceled' => 'getBaseSubtotalCanceled',
        'baseSubtotalInclTax' => 'getBaseSubtotalInclTax',
        'baseSubtotalInvoiced' => 'getBaseSubtotalInvoiced',
        'baseSubtotalRefunded' => 'getBaseSubtotalRefunded',
        'baseTaxAmount' => 'getBaseTaxAmount',
        'baseTaxCanceled' => 'getBaseTaxCanceled',
        'baseTaxInvoiced' => 'getBaseTaxInvoiced',
        'baseTaxRefunded' => 'getBaseTaxRefunded',
        'baseTotalCanceled' => 'getBaseTotalCanceled',
        'baseTotalDue' => 'getBaseTotalDue',
        'baseTotalInvoiced' => 'getBaseTotalInvoiced',
        'baseTotalInvoicedCost' => 'getBaseTotalInvoicedCost',
        'baseTotalOfflineRefunded' => 'getBaseTotalOfflineRefunded',
        'baseTotalOnlineRefunded' => 'getBaseTotalOnlineRefunded',
        'baseTotalPaid' => 'getBaseTotalPaid',
        'baseTotalQtyOrdered' => 'getBaseTotalQtyOrdered',
        'baseTotalRefunded' => 'getBaseTotalRefunded',
        'baseToGlobalRate' => 'getBaseToGlobalRate',
        'baseToOrderRate' => 'getBaseToOrderRate',
        'billingAddressId' => 'getBillingAddressId',
        'canShipPartially' => 'getCanShipPartially',
        'canShipPartiallyItem' => 'getCanShipPartiallyItem',
        'couponCode' => 'getCouponCode',
        'createdAt' => 'getCreatedAt',
        'customerDob' => 'getCustomerDob',
        'customerEmail' => 'getCustomerEmail',
        'customerFirstname' => 'getCustomerFirstname',
        'customerGender' => 'getCustomerGender',
        'customerGroupId' => 'getCustomerGroupId',
        'customerId' => 'getCustomerId',
        'customerIsGuest' => 'getCustomerIsGuest',
        'customerLastname' => 'getCustomerLastname',
        'customerMiddlename' => 'getCustomerMiddlename',
        'customerNote' => 'getCustomerNote',
        'customerNoteNotify' => 'getCustomerNoteNotify',
        'customerPrefix' => 'getCustomerPrefix',
        'customerSuffix' => 'getCustomerSuffix',
        'customerTaxvat' => 'getCustomerTaxvat',
        'discountAmount' => 'getDiscountAmount',
        'discountCanceled' => 'getDiscountCanceled',
        'discountDescription' => 'getDiscountDescription',
        'discountInvoiced' => 'getDiscountInvoiced',
        'discountRefunded' => 'getDiscountRefunded',
        'editIncrement' => 'getEditIncrement',
        'emailSent' => 'getEmailSent',
        'entityId' => 'getEntityId',
        'extCustomerId' => 'getExtCustomerId',
        'extOrderId' => 'getExtOrderId',
        'forcedShipmentWithInvoice' => 'getForcedShipmentWithInvoice',
        'globalCurrencyCode' => 'getGlobalCurrencyCode',
        'grandTotal' => 'getGrandTotal',
        'discountTaxCompensationAmount' => 'getDiscountTaxCompensationAmount',
        'discountTaxCompensationInvoiced' => 'getDiscountTaxCompensationInvoiced',
        'discountTaxCompensationRefunded' => 'getDiscountTaxCompensationRefunded',
        'holdBeforeState' => 'getHoldBeforeState',
        'holdBeforeStatus' => 'getHoldBeforeStatus',
        'incrementId' => 'getIncrementId',
        'isVirtual' => 'getIsVirtual',
        'orderCurrencyCode' => 'getOrderCurrencyCode',
        'originalIncrementId' => 'getOriginalIncrementId',
        'paymentAuthorizationAmount' => 'getPaymentAuthorizationAmount',
        'paymentAuthExpiration' => 'getPaymentAuthExpiration',
        'protectCode' => 'getProtectCode',
        'quoteAddressId' => 'getQuoteAddressId',
        'quoteId' => 'getQuoteId',
        'relationChildId' => 'getRelationChildId',
        'relationChildRealId' => 'getRelationChildRealId',
        'relationParentId' => 'getRelationParentId',
        'relationParentRealId' => 'getRelationParentRealId',
        'remoteIp' => 'getRemoteIp',
        'shippingAmount' => 'getShippingAmount',
        'shippingCanceled' => 'getShippingCanceled',
        'shippingDescription' => 'getShippingDescription',
        'shippingDiscountAmount' => 'getShippingDiscountAmount',
        'shippingDiscountTaxCompensationAmount' => 'getShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'getShippingInclTax',
        'shippingInvoiced' => 'getShippingInvoiced',
        'shippingRefunded' => 'getShippingRefunded',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'shippingTaxRefunded' => 'getShippingTaxRefunded',
        'state' => 'getState',
        'status' => 'getStatus',
        'storeCurrencyCode' => 'getStoreCurrencyCode',
        'storeId' => 'getStoreId',
        'storeName' => 'getStoreName',
        'storeToBaseRate' => 'getStoreToBaseRate',
        'storeToOrderRate' => 'getStoreToOrderRate',
        'subtotal' => 'getSubtotal',
        'subtotalCanceled' => 'getSubtotalCanceled',
        'subtotalInclTax' => 'getSubtotalInclTax',
        'subtotalInvoiced' => 'getSubtotalInvoiced',
        'subtotalRefunded' => 'getSubtotalRefunded',
        'taxAmount' => 'getTaxAmount',
        'taxCanceled' => 'getTaxCanceled',
        'taxInvoiced' => 'getTaxInvoiced',
        'taxRefunded' => 'getTaxRefunded',
        'totalCanceled' => 'getTotalCanceled',
        'totalDue' => 'getTotalDue',
        'totalInvoiced' => 'getTotalInvoiced',
        'totalItemCount' => 'getTotalItemCount',
        'totalOfflineRefunded' => 'getTotalOfflineRefunded',
        'totalOnlineRefunded' => 'getTotalOnlineRefunded',
        'totalPaid' => 'getTotalPaid',
        'totalQtyOrdered' => 'getTotalQtyOrdered',
        'totalRefunded' => 'getTotalRefunded',
        'updatedAt' => 'getUpdatedAt',
        'weight' => 'getWeight',
        'xForwardedFor' => 'getXForwardedFor',
        'items' => 'getItems',
        'billingAddress' => 'getBillingAddress',
        'payment' => 'getPayment',
        'statusHistories' => 'getStatusHistories',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustmentNegative'] = isset($data['adjustmentNegative']) ? $data['adjustmentNegative'] : null;
        $this->container['adjustmentPositive'] = isset($data['adjustmentPositive']) ? $data['adjustmentPositive'] : null;
        $this->container['appliedRuleIds'] = isset($data['appliedRuleIds']) ? $data['appliedRuleIds'] : null;
        $this->container['baseAdjustmentNegative'] = isset($data['baseAdjustmentNegative']) ? $data['baseAdjustmentNegative'] : null;
        $this->container['baseAdjustmentPositive'] = isset($data['baseAdjustmentPositive']) ? $data['baseAdjustmentPositive'] : null;
        $this->container['baseCurrencyCode'] = isset($data['baseCurrencyCode']) ? $data['baseCurrencyCode'] : null;
        $this->container['baseDiscountAmount'] = isset($data['baseDiscountAmount']) ? $data['baseDiscountAmount'] : null;
        $this->container['baseDiscountCanceled'] = isset($data['baseDiscountCanceled']) ? $data['baseDiscountCanceled'] : null;
        $this->container['baseDiscountInvoiced'] = isset($data['baseDiscountInvoiced']) ? $data['baseDiscountInvoiced'] : null;
        $this->container['baseDiscountRefunded'] = isset($data['baseDiscountRefunded']) ? $data['baseDiscountRefunded'] : null;
        $this->container['baseGrandTotal'] = isset($data['baseGrandTotal']) ? $data['baseGrandTotal'] : null;
        $this->container['baseDiscountTaxCompensationAmount'] = isset($data['baseDiscountTaxCompensationAmount']) ? $data['baseDiscountTaxCompensationAmount'] : null;
        $this->container['baseDiscountTaxCompensationInvoiced'] = isset($data['baseDiscountTaxCompensationInvoiced']) ? $data['baseDiscountTaxCompensationInvoiced'] : null;
        $this->container['baseDiscountTaxCompensationRefunded'] = isset($data['baseDiscountTaxCompensationRefunded']) ? $data['baseDiscountTaxCompensationRefunded'] : null;
        $this->container['baseShippingAmount'] = isset($data['baseShippingAmount']) ? $data['baseShippingAmount'] : null;
        $this->container['baseShippingCanceled'] = isset($data['baseShippingCanceled']) ? $data['baseShippingCanceled'] : null;
        $this->container['baseShippingDiscountAmount'] = isset($data['baseShippingDiscountAmount']) ? $data['baseShippingDiscountAmount'] : null;
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = isset($data['baseShippingDiscountTaxCompensationAmnt']) ? $data['baseShippingDiscountTaxCompensationAmnt'] : null;
        $this->container['baseShippingInclTax'] = isset($data['baseShippingInclTax']) ? $data['baseShippingInclTax'] : null;
        $this->container['baseShippingInvoiced'] = isset($data['baseShippingInvoiced']) ? $data['baseShippingInvoiced'] : null;
        $this->container['baseShippingRefunded'] = isset($data['baseShippingRefunded']) ? $data['baseShippingRefunded'] : null;
        $this->container['baseShippingTaxAmount'] = isset($data['baseShippingTaxAmount']) ? $data['baseShippingTaxAmount'] : null;
        $this->container['baseShippingTaxRefunded'] = isset($data['baseShippingTaxRefunded']) ? $data['baseShippingTaxRefunded'] : null;
        $this->container['baseSubtotal'] = isset($data['baseSubtotal']) ? $data['baseSubtotal'] : null;
        $this->container['baseSubtotalCanceled'] = isset($data['baseSubtotalCanceled']) ? $data['baseSubtotalCanceled'] : null;
        $this->container['baseSubtotalInclTax'] = isset($data['baseSubtotalInclTax']) ? $data['baseSubtotalInclTax'] : null;
        $this->container['baseSubtotalInvoiced'] = isset($data['baseSubtotalInvoiced']) ? $data['baseSubtotalInvoiced'] : null;
        $this->container['baseSubtotalRefunded'] = isset($data['baseSubtotalRefunded']) ? $data['baseSubtotalRefunded'] : null;
        $this->container['baseTaxAmount'] = isset($data['baseTaxAmount']) ? $data['baseTaxAmount'] : null;
        $this->container['baseTaxCanceled'] = isset($data['baseTaxCanceled']) ? $data['baseTaxCanceled'] : null;
        $this->container['baseTaxInvoiced'] = isset($data['baseTaxInvoiced']) ? $data['baseTaxInvoiced'] : null;
        $this->container['baseTaxRefunded'] = isset($data['baseTaxRefunded']) ? $data['baseTaxRefunded'] : null;
        $this->container['baseTotalCanceled'] = isset($data['baseTotalCanceled']) ? $data['baseTotalCanceled'] : null;
        $this->container['baseTotalDue'] = isset($data['baseTotalDue']) ? $data['baseTotalDue'] : null;
        $this->container['baseTotalInvoiced'] = isset($data['baseTotalInvoiced']) ? $data['baseTotalInvoiced'] : null;
        $this->container['baseTotalInvoicedCost'] = isset($data['baseTotalInvoicedCost']) ? $data['baseTotalInvoicedCost'] : null;
        $this->container['baseTotalOfflineRefunded'] = isset($data['baseTotalOfflineRefunded']) ? $data['baseTotalOfflineRefunded'] : null;
        $this->container['baseTotalOnlineRefunded'] = isset($data['baseTotalOnlineRefunded']) ? $data['baseTotalOnlineRefunded'] : null;
        $this->container['baseTotalPaid'] = isset($data['baseTotalPaid']) ? $data['baseTotalPaid'] : null;
        $this->container['baseTotalQtyOrdered'] = isset($data['baseTotalQtyOrdered']) ? $data['baseTotalQtyOrdered'] : null;
        $this->container['baseTotalRefunded'] = isset($data['baseTotalRefunded']) ? $data['baseTotalRefunded'] : null;
        $this->container['baseToGlobalRate'] = isset($data['baseToGlobalRate']) ? $data['baseToGlobalRate'] : null;
        $this->container['baseToOrderRate'] = isset($data['baseToOrderRate']) ? $data['baseToOrderRate'] : null;
        $this->container['billingAddressId'] = isset($data['billingAddressId']) ? $data['billingAddressId'] : null;
        $this->container['canShipPartially'] = isset($data['canShipPartially']) ? $data['canShipPartially'] : null;
        $this->container['canShipPartiallyItem'] = isset($data['canShipPartiallyItem']) ? $data['canShipPartiallyItem'] : null;
        $this->container['couponCode'] = isset($data['couponCode']) ? $data['couponCode'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['customerDob'] = isset($data['customerDob']) ? $data['customerDob'] : null;
        $this->container['customerEmail'] = isset($data['customerEmail']) ? $data['customerEmail'] : null;
        $this->container['customerFirstname'] = isset($data['customerFirstname']) ? $data['customerFirstname'] : null;
        $this->container['customerGender'] = isset($data['customerGender']) ? $data['customerGender'] : null;
        $this->container['customerGroupId'] = isset($data['customerGroupId']) ? $data['customerGroupId'] : null;
        $this->container['customerId'] = isset($data['customerId']) ? $data['customerId'] : null;
        $this->container['customerIsGuest'] = isset($data['customerIsGuest']) ? $data['customerIsGuest'] : null;
        $this->container['customerLastname'] = isset($data['customerLastname']) ? $data['customerLastname'] : null;
        $this->container['customerMiddlename'] = isset($data['customerMiddlename']) ? $data['customerMiddlename'] : null;
        $this->container['customerNote'] = isset($data['customerNote']) ? $data['customerNote'] : null;
        $this->container['customerNoteNotify'] = isset($data['customerNoteNotify']) ? $data['customerNoteNotify'] : null;
        $this->container['customerPrefix'] = isset($data['customerPrefix']) ? $data['customerPrefix'] : null;
        $this->container['customerSuffix'] = isset($data['customerSuffix']) ? $data['customerSuffix'] : null;
        $this->container['customerTaxvat'] = isset($data['customerTaxvat']) ? $data['customerTaxvat'] : null;
        $this->container['discountAmount'] = isset($data['discountAmount']) ? $data['discountAmount'] : null;
        $this->container['discountCanceled'] = isset($data['discountCanceled']) ? $data['discountCanceled'] : null;
        $this->container['discountDescription'] = isset($data['discountDescription']) ? $data['discountDescription'] : null;
        $this->container['discountInvoiced'] = isset($data['discountInvoiced']) ? $data['discountInvoiced'] : null;
        $this->container['discountRefunded'] = isset($data['discountRefunded']) ? $data['discountRefunded'] : null;
        $this->container['editIncrement'] = isset($data['editIncrement']) ? $data['editIncrement'] : null;
        $this->container['emailSent'] = isset($data['emailSent']) ? $data['emailSent'] : null;
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['extCustomerId'] = isset($data['extCustomerId']) ? $data['extCustomerId'] : null;
        $this->container['extOrderId'] = isset($data['extOrderId']) ? $data['extOrderId'] : null;
        $this->container['forcedShipmentWithInvoice'] = isset($data['forcedShipmentWithInvoice']) ? $data['forcedShipmentWithInvoice'] : null;
        $this->container['globalCurrencyCode'] = isset($data['globalCurrencyCode']) ? $data['globalCurrencyCode'] : null;
        $this->container['grandTotal'] = isset($data['grandTotal']) ? $data['grandTotal'] : null;
        $this->container['discountTaxCompensationAmount'] = isset($data['discountTaxCompensationAmount']) ? $data['discountTaxCompensationAmount'] : null;
        $this->container['discountTaxCompensationInvoiced'] = isset($data['discountTaxCompensationInvoiced']) ? $data['discountTaxCompensationInvoiced'] : null;
        $this->container['discountTaxCompensationRefunded'] = isset($data['discountTaxCompensationRefunded']) ? $data['discountTaxCompensationRefunded'] : null;
        $this->container['holdBeforeState'] = isset($data['holdBeforeState']) ? $data['holdBeforeState'] : null;
        $this->container['holdBeforeStatus'] = isset($data['holdBeforeStatus']) ? $data['holdBeforeStatus'] : null;
        $this->container['incrementId'] = isset($data['incrementId']) ? $data['incrementId'] : null;
        $this->container['isVirtual'] = isset($data['isVirtual']) ? $data['isVirtual'] : null;
        $this->container['orderCurrencyCode'] = isset($data['orderCurrencyCode']) ? $data['orderCurrencyCode'] : null;
        $this->container['originalIncrementId'] = isset($data['originalIncrementId']) ? $data['originalIncrementId'] : null;
        $this->container['paymentAuthorizationAmount'] = isset($data['paymentAuthorizationAmount']) ? $data['paymentAuthorizationAmount'] : null;
        $this->container['paymentAuthExpiration'] = isset($data['paymentAuthExpiration']) ? $data['paymentAuthExpiration'] : null;
        $this->container['protectCode'] = isset($data['protectCode']) ? $data['protectCode'] : null;
        $this->container['quoteAddressId'] = isset($data['quoteAddressId']) ? $data['quoteAddressId'] : null;
        $this->container['quoteId'] = isset($data['quoteId']) ? $data['quoteId'] : null;
        $this->container['relationChildId'] = isset($data['relationChildId']) ? $data['relationChildId'] : null;
        $this->container['relationChildRealId'] = isset($data['relationChildRealId']) ? $data['relationChildRealId'] : null;
        $this->container['relationParentId'] = isset($data['relationParentId']) ? $data['relationParentId'] : null;
        $this->container['relationParentRealId'] = isset($data['relationParentRealId']) ? $data['relationParentRealId'] : null;
        $this->container['remoteIp'] = isset($data['remoteIp']) ? $data['remoteIp'] : null;
        $this->container['shippingAmount'] = isset($data['shippingAmount']) ? $data['shippingAmount'] : null;
        $this->container['shippingCanceled'] = isset($data['shippingCanceled']) ? $data['shippingCanceled'] : null;
        $this->container['shippingDescription'] = isset($data['shippingDescription']) ? $data['shippingDescription'] : null;
        $this->container['shippingDiscountAmount'] = isset($data['shippingDiscountAmount']) ? $data['shippingDiscountAmount'] : null;
        $this->container['shippingDiscountTaxCompensationAmount'] = isset($data['shippingDiscountTaxCompensationAmount']) ? $data['shippingDiscountTaxCompensationAmount'] : null;
        $this->container['shippingInclTax'] = isset($data['shippingInclTax']) ? $data['shippingInclTax'] : null;
        $this->container['shippingInvoiced'] = isset($data['shippingInvoiced']) ? $data['shippingInvoiced'] : null;
        $this->container['shippingRefunded'] = isset($data['shippingRefunded']) ? $data['shippingRefunded'] : null;
        $this->container['shippingTaxAmount'] = isset($data['shippingTaxAmount']) ? $data['shippingTaxAmount'] : null;
        $this->container['shippingTaxRefunded'] = isset($data['shippingTaxRefunded']) ? $data['shippingTaxRefunded'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['storeCurrencyCode'] = isset($data['storeCurrencyCode']) ? $data['storeCurrencyCode'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['storeName'] = isset($data['storeName']) ? $data['storeName'] : null;
        $this->container['storeToBaseRate'] = isset($data['storeToBaseRate']) ? $data['storeToBaseRate'] : null;
        $this->container['storeToOrderRate'] = isset($data['storeToOrderRate']) ? $data['storeToOrderRate'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['subtotalCanceled'] = isset($data['subtotalCanceled']) ? $data['subtotalCanceled'] : null;
        $this->container['subtotalInclTax'] = isset($data['subtotalInclTax']) ? $data['subtotalInclTax'] : null;
        $this->container['subtotalInvoiced'] = isset($data['subtotalInvoiced']) ? $data['subtotalInvoiced'] : null;
        $this->container['subtotalRefunded'] = isset($data['subtotalRefunded']) ? $data['subtotalRefunded'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxCanceled'] = isset($data['taxCanceled']) ? $data['taxCanceled'] : null;
        $this->container['taxInvoiced'] = isset($data['taxInvoiced']) ? $data['taxInvoiced'] : null;
        $this->container['taxRefunded'] = isset($data['taxRefunded']) ? $data['taxRefunded'] : null;
        $this->container['totalCanceled'] = isset($data['totalCanceled']) ? $data['totalCanceled'] : null;
        $this->container['totalDue'] = isset($data['totalDue']) ? $data['totalDue'] : null;
        $this->container['totalInvoiced'] = isset($data['totalInvoiced']) ? $data['totalInvoiced'] : null;
        $this->container['totalItemCount'] = isset($data['totalItemCount']) ? $data['totalItemCount'] : null;
        $this->container['totalOfflineRefunded'] = isset($data['totalOfflineRefunded']) ? $data['totalOfflineRefunded'] : null;
        $this->container['totalOnlineRefunded'] = isset($data['totalOnlineRefunded']) ? $data['totalOnlineRefunded'] : null;
        $this->container['totalPaid'] = isset($data['totalPaid']) ? $data['totalPaid'] : null;
        $this->container['totalQtyOrdered'] = isset($data['totalQtyOrdered']) ? $data['totalQtyOrdered'] : null;
        $this->container['totalRefunded'] = isset($data['totalRefunded']) ? $data['totalRefunded'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['xForwardedFor'] = isset($data['xForwardedFor']) ? $data['xForwardedFor'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['billingAddress'] = isset($data['billingAddress']) ? $data['billingAddress'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['statusHistories'] = isset($data['statusHistories']) ? $data['statusHistories'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['baseGrandTotal'] === null) {
            $invalid_properties[] = "'baseGrandTotal' can't be null";
        }
        if ($this->container['customerEmail'] === null) {
            $invalid_properties[] = "'customerEmail' can't be null";
        }
        if ($this->container['grandTotal'] === null) {
            $invalid_properties[] = "'grandTotal' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalid_properties[] = "'items' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['baseGrandTotal'] === null) {
            return false;
        }
        if ($this->container['customerEmail'] === null) {
            return false;
        }
        if ($this->container['grandTotal'] === null) {
            return false;
        }
        if ($this->container['items'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets adjustmentNegative
     * @return float
     */
    public function getAdjustmentNegative()
    {
        return $this->container['adjustmentNegative'];
    }

    /**
     * Sets adjustmentNegative
     * @param float $adjustmentNegative Negative adjustment value.
     * @return $this
     */
    public function setAdjustmentNegative($adjustmentNegative)
    {
        $this->container['adjustmentNegative'] = $adjustmentNegative;

        return $this;
    }

    /**
     * Gets adjustmentPositive
     * @return float
     */
    public function getAdjustmentPositive()
    {
        return $this->container['adjustmentPositive'];
    }

    /**
     * Sets adjustmentPositive
     * @param float $adjustmentPositive Positive adjustment value.
     * @return $this
     */
    public function setAdjustmentPositive($adjustmentPositive)
    {
        $this->container['adjustmentPositive'] = $adjustmentPositive;

        return $this;
    }

    /**
     * Gets appliedRuleIds
     * @return string
     */
    public function getAppliedRuleIds()
    {
        return $this->container['appliedRuleIds'];
    }

    /**
     * Sets appliedRuleIds
     * @param string $appliedRuleIds Applied rule IDs.
     * @return $this
     */
    public function setAppliedRuleIds($appliedRuleIds)
    {
        $this->container['appliedRuleIds'] = $appliedRuleIds;

        return $this;
    }

    /**
     * Gets baseAdjustmentNegative
     * @return float
     */
    public function getBaseAdjustmentNegative()
    {
        return $this->container['baseAdjustmentNegative'];
    }

    /**
     * Sets baseAdjustmentNegative
     * @param float $baseAdjustmentNegative Base negative adjustment value.
     * @return $this
     */
    public function setBaseAdjustmentNegative($baseAdjustmentNegative)
    {
        $this->container['baseAdjustmentNegative'] = $baseAdjustmentNegative;

        return $this;
    }

    /**
     * Gets baseAdjustmentPositive
     * @return float
     */
    public function getBaseAdjustmentPositive()
    {
        return $this->container['baseAdjustmentPositive'];
    }

    /**
     * Sets baseAdjustmentPositive
     * @param float $baseAdjustmentPositive Base positive adjustment value.
     * @return $this
     */
    public function setBaseAdjustmentPositive($baseAdjustmentPositive)
    {
        $this->container['baseAdjustmentPositive'] = $baseAdjustmentPositive;

        return $this;
    }

    /**
     * Gets baseCurrencyCode
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['baseCurrencyCode'];
    }

    /**
     * Sets baseCurrencyCode
     * @param string $baseCurrencyCode Base currency code.
     * @return $this
     */
    public function setBaseCurrencyCode($baseCurrencyCode)
    {
        $this->container['baseCurrencyCode'] = $baseCurrencyCode;

        return $this;
    }

    /**
     * Gets baseDiscountAmount
     * @return float
     */
    public function getBaseDiscountAmount()
    {
        return $this->container['baseDiscountAmount'];
    }

    /**
     * Sets baseDiscountAmount
     * @param float $baseDiscountAmount Base discount amount.
     * @return $this
     */
    public function setBaseDiscountAmount($baseDiscountAmount)
    {
        $this->container['baseDiscountAmount'] = $baseDiscountAmount;

        return $this;
    }

    /**
     * Gets baseDiscountCanceled
     * @return float
     */
    public function getBaseDiscountCanceled()
    {
        return $this->container['baseDiscountCanceled'];
    }

    /**
     * Sets baseDiscountCanceled
     * @param float $baseDiscountCanceled Base discount canceled.
     * @return $this
     */
    public function setBaseDiscountCanceled($baseDiscountCanceled)
    {
        $this->container['baseDiscountCanceled'] = $baseDiscountCanceled;

        return $this;
    }

    /**
     * Gets baseDiscountInvoiced
     * @return float
     */
    public function getBaseDiscountInvoiced()
    {
        return $this->container['baseDiscountInvoiced'];
    }

    /**
     * Sets baseDiscountInvoiced
     * @param float $baseDiscountInvoiced Base discount invoiced.
     * @return $this
     */
    public function setBaseDiscountInvoiced($baseDiscountInvoiced)
    {
        $this->container['baseDiscountInvoiced'] = $baseDiscountInvoiced;

        return $this;
    }

    /**
     * Gets baseDiscountRefunded
     * @return float
     */
    public function getBaseDiscountRefunded()
    {
        return $this->container['baseDiscountRefunded'];
    }

    /**
     * Sets baseDiscountRefunded
     * @param float $baseDiscountRefunded Base discount refunded.
     * @return $this
     */
    public function setBaseDiscountRefunded($baseDiscountRefunded)
    {
        $this->container['baseDiscountRefunded'] = $baseDiscountRefunded;

        return $this;
    }

    /**
     * Gets baseGrandTotal
     * @return float
     */
    public function getBaseGrandTotal()
    {
        return $this->container['baseGrandTotal'];
    }

    /**
     * Sets baseGrandTotal
     * @param float $baseGrandTotal Base grand total.
     * @return $this
     */
    public function setBaseGrandTotal($baseGrandTotal)
    {
        $this->container['baseGrandTotal'] = $baseGrandTotal;

        return $this;
    }

    /**
     * Gets baseDiscountTaxCompensationAmount
     * @return float
     */
    public function getBaseDiscountTaxCompensationAmount()
    {
        return $this->container['baseDiscountTaxCompensationAmount'];
    }

    /**
     * Sets baseDiscountTaxCompensationAmount
     * @param float $baseDiscountTaxCompensationAmount Base discount tax compensation amount.
     * @return $this
     */
    public function setBaseDiscountTaxCompensationAmount($baseDiscountTaxCompensationAmount)
    {
        $this->container['baseDiscountTaxCompensationAmount'] = $baseDiscountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets baseDiscountTaxCompensationInvoiced
     * @return float
     */
    public function getBaseDiscountTaxCompensationInvoiced()
    {
        return $this->container['baseDiscountTaxCompensationInvoiced'];
    }

    /**
     * Sets baseDiscountTaxCompensationInvoiced
     * @param float $baseDiscountTaxCompensationInvoiced Base discount tax compensation invoiced.
     * @return $this
     */
    public function setBaseDiscountTaxCompensationInvoiced($baseDiscountTaxCompensationInvoiced)
    {
        $this->container['baseDiscountTaxCompensationInvoiced'] = $baseDiscountTaxCompensationInvoiced;

        return $this;
    }

    /**
     * Gets baseDiscountTaxCompensationRefunded
     * @return float
     */
    public function getBaseDiscountTaxCompensationRefunded()
    {
        return $this->container['baseDiscountTaxCompensationRefunded'];
    }

    /**
     * Sets baseDiscountTaxCompensationRefunded
     * @param float $baseDiscountTaxCompensationRefunded Base discount tax compensation refunded.
     * @return $this
     */
    public function setBaseDiscountTaxCompensationRefunded($baseDiscountTaxCompensationRefunded)
    {
        $this->container['baseDiscountTaxCompensationRefunded'] = $baseDiscountTaxCompensationRefunded;

        return $this;
    }

    /**
     * Gets baseShippingAmount
     * @return float
     */
    public function getBaseShippingAmount()
    {
        return $this->container['baseShippingAmount'];
    }

    /**
     * Sets baseShippingAmount
     * @param float $baseShippingAmount Base shipping amount.
     * @return $this
     */
    public function setBaseShippingAmount($baseShippingAmount)
    {
        $this->container['baseShippingAmount'] = $baseShippingAmount;

        return $this;
    }

    /**
     * Gets baseShippingCanceled
     * @return float
     */
    public function getBaseShippingCanceled()
    {
        return $this->container['baseShippingCanceled'];
    }

    /**
     * Sets baseShippingCanceled
     * @param float $baseShippingCanceled Base shipping canceled.
     * @return $this
     */
    public function setBaseShippingCanceled($baseShippingCanceled)
    {
        $this->container['baseShippingCanceled'] = $baseShippingCanceled;

        return $this;
    }

    /**
     * Gets baseShippingDiscountAmount
     * @return float
     */
    public function getBaseShippingDiscountAmount()
    {
        return $this->container['baseShippingDiscountAmount'];
    }

    /**
     * Sets baseShippingDiscountAmount
     * @param float $baseShippingDiscountAmount Base shipping discount amount.
     * @return $this
     */
    public function setBaseShippingDiscountAmount($baseShippingDiscountAmount)
    {
        $this->container['baseShippingDiscountAmount'] = $baseShippingDiscountAmount;

        return $this;
    }

    /**
     * Gets baseShippingDiscountTaxCompensationAmnt
     * @return float
     */
    public function getBaseShippingDiscountTaxCompensationAmnt()
    {
        return $this->container['baseShippingDiscountTaxCompensationAmnt'];
    }

    /**
     * Sets baseShippingDiscountTaxCompensationAmnt
     * @param float $baseShippingDiscountTaxCompensationAmnt Base shipping discount tax compensation amount.
     * @return $this
     */
    public function setBaseShippingDiscountTaxCompensationAmnt($baseShippingDiscountTaxCompensationAmnt)
    {
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = $baseShippingDiscountTaxCompensationAmnt;

        return $this;
    }

    /**
     * Gets baseShippingInclTax
     * @return float
     */
    public function getBaseShippingInclTax()
    {
        return $this->container['baseShippingInclTax'];
    }

    /**
     * Sets baseShippingInclTax
     * @param float $baseShippingInclTax Base shipping including tax.
     * @return $this
     */
    public function setBaseShippingInclTax($baseShippingInclTax)
    {
        $this->container['baseShippingInclTax'] = $baseShippingInclTax;

        return $this;
    }

    /**
     * Gets baseShippingInvoiced
     * @return float
     */
    public function getBaseShippingInvoiced()
    {
        return $this->container['baseShippingInvoiced'];
    }

    /**
     * Sets baseShippingInvoiced
     * @param float $baseShippingInvoiced Base shipping invoiced.
     * @return $this
     */
    public function setBaseShippingInvoiced($baseShippingInvoiced)
    {
        $this->container['baseShippingInvoiced'] = $baseShippingInvoiced;

        return $this;
    }

    /**
     * Gets baseShippingRefunded
     * @return float
     */
    public function getBaseShippingRefunded()
    {
        return $this->container['baseShippingRefunded'];
    }

    /**
     * Sets baseShippingRefunded
     * @param float $baseShippingRefunded Base shipping refunded.
     * @return $this
     */
    public function setBaseShippingRefunded($baseShippingRefunded)
    {
        $this->container['baseShippingRefunded'] = $baseShippingRefunded;

        return $this;
    }

    /**
     * Gets baseShippingTaxAmount
     * @return float
     */
    public function getBaseShippingTaxAmount()
    {
        return $this->container['baseShippingTaxAmount'];
    }

    /**
     * Sets baseShippingTaxAmount
     * @param float $baseShippingTaxAmount Base shipping tax amount.
     * @return $this
     */
    public function setBaseShippingTaxAmount($baseShippingTaxAmount)
    {
        $this->container['baseShippingTaxAmount'] = $baseShippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseShippingTaxRefunded
     * @return float
     */
    public function getBaseShippingTaxRefunded()
    {
        return $this->container['baseShippingTaxRefunded'];
    }

    /**
     * Sets baseShippingTaxRefunded
     * @param float $baseShippingTaxRefunded Base shipping tax refunded.
     * @return $this
     */
    public function setBaseShippingTaxRefunded($baseShippingTaxRefunded)
    {
        $this->container['baseShippingTaxRefunded'] = $baseShippingTaxRefunded;

        return $this;
    }

    /**
     * Gets baseSubtotal
     * @return float
     */
    public function getBaseSubtotal()
    {
        return $this->container['baseSubtotal'];
    }

    /**
     * Sets baseSubtotal
     * @param float $baseSubtotal Base subtotal.
     * @return $this
     */
    public function setBaseSubtotal($baseSubtotal)
    {
        $this->container['baseSubtotal'] = $baseSubtotal;

        return $this;
    }

    /**
     * Gets baseSubtotalCanceled
     * @return float
     */
    public function getBaseSubtotalCanceled()
    {
        return $this->container['baseSubtotalCanceled'];
    }

    /**
     * Sets baseSubtotalCanceled
     * @param float $baseSubtotalCanceled Base subtotal canceled.
     * @return $this
     */
    public function setBaseSubtotalCanceled($baseSubtotalCanceled)
    {
        $this->container['baseSubtotalCanceled'] = $baseSubtotalCanceled;

        return $this;
    }

    /**
     * Gets baseSubtotalInclTax
     * @return float
     */
    public function getBaseSubtotalInclTax()
    {
        return $this->container['baseSubtotalInclTax'];
    }

    /**
     * Sets baseSubtotalInclTax
     * @param float $baseSubtotalInclTax Base subtotal including tax.
     * @return $this
     */
    public function setBaseSubtotalInclTax($baseSubtotalInclTax)
    {
        $this->container['baseSubtotalInclTax'] = $baseSubtotalInclTax;

        return $this;
    }

    /**
     * Gets baseSubtotalInvoiced
     * @return float
     */
    public function getBaseSubtotalInvoiced()
    {
        return $this->container['baseSubtotalInvoiced'];
    }

    /**
     * Sets baseSubtotalInvoiced
     * @param float $baseSubtotalInvoiced Base subtotal invoiced.
     * @return $this
     */
    public function setBaseSubtotalInvoiced($baseSubtotalInvoiced)
    {
        $this->container['baseSubtotalInvoiced'] = $baseSubtotalInvoiced;

        return $this;
    }

    /**
     * Gets baseSubtotalRefunded
     * @return float
     */
    public function getBaseSubtotalRefunded()
    {
        return $this->container['baseSubtotalRefunded'];
    }

    /**
     * Sets baseSubtotalRefunded
     * @param float $baseSubtotalRefunded Base subtotal refunded.
     * @return $this
     */
    public function setBaseSubtotalRefunded($baseSubtotalRefunded)
    {
        $this->container['baseSubtotalRefunded'] = $baseSubtotalRefunded;

        return $this;
    }

    /**
     * Gets baseTaxAmount
     * @return float
     */
    public function getBaseTaxAmount()
    {
        return $this->container['baseTaxAmount'];
    }

    /**
     * Sets baseTaxAmount
     * @param float $baseTaxAmount Base tax amount.
     * @return $this
     */
    public function setBaseTaxAmount($baseTaxAmount)
    {
        $this->container['baseTaxAmount'] = $baseTaxAmount;

        return $this;
    }

    /**
     * Gets baseTaxCanceled
     * @return float
     */
    public function getBaseTaxCanceled()
    {
        return $this->container['baseTaxCanceled'];
    }

    /**
     * Sets baseTaxCanceled
     * @param float $baseTaxCanceled Base tax canceled.
     * @return $this
     */
    public function setBaseTaxCanceled($baseTaxCanceled)
    {
        $this->container['baseTaxCanceled'] = $baseTaxCanceled;

        return $this;
    }

    /**
     * Gets baseTaxInvoiced
     * @return float
     */
    public function getBaseTaxInvoiced()
    {
        return $this->container['baseTaxInvoiced'];
    }

    /**
     * Sets baseTaxInvoiced
     * @param float $baseTaxInvoiced Base tax invoiced.
     * @return $this
     */
    public function setBaseTaxInvoiced($baseTaxInvoiced)
    {
        $this->container['baseTaxInvoiced'] = $baseTaxInvoiced;

        return $this;
    }

    /**
     * Gets baseTaxRefunded
     * @return float
     */
    public function getBaseTaxRefunded()
    {
        return $this->container['baseTaxRefunded'];
    }

    /**
     * Sets baseTaxRefunded
     * @param float $baseTaxRefunded Base tax refunded.
     * @return $this
     */
    public function setBaseTaxRefunded($baseTaxRefunded)
    {
        $this->container['baseTaxRefunded'] = $baseTaxRefunded;

        return $this;
    }

    /**
     * Gets baseTotalCanceled
     * @return float
     */
    public function getBaseTotalCanceled()
    {
        return $this->container['baseTotalCanceled'];
    }

    /**
     * Sets baseTotalCanceled
     * @param float $baseTotalCanceled Base total canceled.
     * @return $this
     */
    public function setBaseTotalCanceled($baseTotalCanceled)
    {
        $this->container['baseTotalCanceled'] = $baseTotalCanceled;

        return $this;
    }

    /**
     * Gets baseTotalDue
     * @return float
     */
    public function getBaseTotalDue()
    {
        return $this->container['baseTotalDue'];
    }

    /**
     * Sets baseTotalDue
     * @param float $baseTotalDue Base total due.
     * @return $this
     */
    public function setBaseTotalDue($baseTotalDue)
    {
        $this->container['baseTotalDue'] = $baseTotalDue;

        return $this;
    }

    /**
     * Gets baseTotalInvoiced
     * @return float
     */
    public function getBaseTotalInvoiced()
    {
        return $this->container['baseTotalInvoiced'];
    }

    /**
     * Sets baseTotalInvoiced
     * @param float $baseTotalInvoiced Base total invoiced.
     * @return $this
     */
    public function setBaseTotalInvoiced($baseTotalInvoiced)
    {
        $this->container['baseTotalInvoiced'] = $baseTotalInvoiced;

        return $this;
    }

    /**
     * Gets baseTotalInvoicedCost
     * @return float
     */
    public function getBaseTotalInvoicedCost()
    {
        return $this->container['baseTotalInvoicedCost'];
    }

    /**
     * Sets baseTotalInvoicedCost
     * @param float $baseTotalInvoicedCost Base total invoiced cost.
     * @return $this
     */
    public function setBaseTotalInvoicedCost($baseTotalInvoicedCost)
    {
        $this->container['baseTotalInvoicedCost'] = $baseTotalInvoicedCost;

        return $this;
    }

    /**
     * Gets baseTotalOfflineRefunded
     * @return float
     */
    public function getBaseTotalOfflineRefunded()
    {
        return $this->container['baseTotalOfflineRefunded'];
    }

    /**
     * Sets baseTotalOfflineRefunded
     * @param float $baseTotalOfflineRefunded Base total offline refunded.
     * @return $this
     */
    public function setBaseTotalOfflineRefunded($baseTotalOfflineRefunded)
    {
        $this->container['baseTotalOfflineRefunded'] = $baseTotalOfflineRefunded;

        return $this;
    }

    /**
     * Gets baseTotalOnlineRefunded
     * @return float
     */
    public function getBaseTotalOnlineRefunded()
    {
        return $this->container['baseTotalOnlineRefunded'];
    }

    /**
     * Sets baseTotalOnlineRefunded
     * @param float $baseTotalOnlineRefunded Base total online refunded.
     * @return $this
     */
    public function setBaseTotalOnlineRefunded($baseTotalOnlineRefunded)
    {
        $this->container['baseTotalOnlineRefunded'] = $baseTotalOnlineRefunded;

        return $this;
    }

    /**
     * Gets baseTotalPaid
     * @return float
     */
    public function getBaseTotalPaid()
    {
        return $this->container['baseTotalPaid'];
    }

    /**
     * Sets baseTotalPaid
     * @param float $baseTotalPaid Base total paid.
     * @return $this
     */
    public function setBaseTotalPaid($baseTotalPaid)
    {
        $this->container['baseTotalPaid'] = $baseTotalPaid;

        return $this;
    }

    /**
     * Gets baseTotalQtyOrdered
     * @return float
     */
    public function getBaseTotalQtyOrdered()
    {
        return $this->container['baseTotalQtyOrdered'];
    }

    /**
     * Sets baseTotalQtyOrdered
     * @param float $baseTotalQtyOrdered Base total quantity ordered.
     * @return $this
     */
    public function setBaseTotalQtyOrdered($baseTotalQtyOrdered)
    {
        $this->container['baseTotalQtyOrdered'] = $baseTotalQtyOrdered;

        return $this;
    }

    /**
     * Gets baseTotalRefunded
     * @return float
     */
    public function getBaseTotalRefunded()
    {
        return $this->container['baseTotalRefunded'];
    }

    /**
     * Sets baseTotalRefunded
     * @param float $baseTotalRefunded Base total refunded.
     * @return $this
     */
    public function setBaseTotalRefunded($baseTotalRefunded)
    {
        $this->container['baseTotalRefunded'] = $baseTotalRefunded;

        return $this;
    }

    /**
     * Gets baseToGlobalRate
     * @return float
     */
    public function getBaseToGlobalRate()
    {
        return $this->container['baseToGlobalRate'];
    }

    /**
     * Sets baseToGlobalRate
     * @param float $baseToGlobalRate Base-to-global rate.
     * @return $this
     */
    public function setBaseToGlobalRate($baseToGlobalRate)
    {
        $this->container['baseToGlobalRate'] = $baseToGlobalRate;

        return $this;
    }

    /**
     * Gets baseToOrderRate
     * @return float
     */
    public function getBaseToOrderRate()
    {
        return $this->container['baseToOrderRate'];
    }

    /**
     * Sets baseToOrderRate
     * @param float $baseToOrderRate Base-to-order rate.
     * @return $this
     */
    public function setBaseToOrderRate($baseToOrderRate)
    {
        $this->container['baseToOrderRate'] = $baseToOrderRate;

        return $this;
    }

    /**
     * Gets billingAddressId
     * @return int
     */
    public function getBillingAddressId()
    {
        return $this->container['billingAddressId'];
    }

    /**
     * Sets billingAddressId
     * @param int $billingAddressId Billing address ID.
     * @return $this
     */
    public function setBillingAddressId($billingAddressId)
    {
        $this->container['billingAddressId'] = $billingAddressId;

        return $this;
    }

    /**
     * Gets canShipPartially
     * @return int
     */
    public function getCanShipPartially()
    {
        return $this->container['canShipPartially'];
    }

    /**
     * Sets canShipPartially
     * @param int $canShipPartially Can-ship-partially flag value.
     * @return $this
     */
    public function setCanShipPartially($canShipPartially)
    {
        $this->container['canShipPartially'] = $canShipPartially;

        return $this;
    }

    /**
     * Gets canShipPartiallyItem
     * @return int
     */
    public function getCanShipPartiallyItem()
    {
        return $this->container['canShipPartiallyItem'];
    }

    /**
     * Sets canShipPartiallyItem
     * @param int $canShipPartiallyItem Can-ship-partially-item flag value.
     * @return $this
     */
    public function setCanShipPartiallyItem($canShipPartiallyItem)
    {
        $this->container['canShipPartiallyItem'] = $canShipPartiallyItem;

        return $this;
    }

    /**
     * Gets couponCode
     * @return string
     */
    public function getCouponCode()
    {
        return $this->container['couponCode'];
    }

    /**
     * Sets couponCode
     * @param string $couponCode Coupon code.
     * @return $this
     */
    public function setCouponCode($couponCode)
    {
        $this->container['couponCode'] = $couponCode;

        return $this;
    }

    /**
     * Gets createdAt
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     * @param string $createdAt Created-at timestamp.
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets customerDob
     * @return string
     */
    public function getCustomerDob()
    {
        return $this->container['customerDob'];
    }

    /**
     * Sets customerDob
     * @param string $customerDob Customer date-of-birth (DOB).
     * @return $this
     */
    public function setCustomerDob($customerDob)
    {
        $this->container['customerDob'] = $customerDob;

        return $this;
    }

    /**
     * Gets customerEmail
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customerEmail'];
    }

    /**
     * Sets customerEmail
     * @param string $customerEmail Customer email address.
     * @return $this
     */
    public function setCustomerEmail($customerEmail)
    {
        $this->container['customerEmail'] = $customerEmail;

        return $this;
    }

    /**
     * Gets customerFirstname
     * @return string
     */
    public function getCustomerFirstname()
    {
        return $this->container['customerFirstname'];
    }

    /**
     * Sets customerFirstname
     * @param string $customerFirstname Customer first name.
     * @return $this
     */
    public function setCustomerFirstname($customerFirstname)
    {
        $this->container['customerFirstname'] = $customerFirstname;

        return $this;
    }

    /**
     * Gets customerGender
     * @return int
     */
    public function getCustomerGender()
    {
        return $this->container['customerGender'];
    }

    /**
     * Sets customerGender
     * @param int $customerGender Customer gender.
     * @return $this
     */
    public function setCustomerGender($customerGender)
    {
        $this->container['customerGender'] = $customerGender;

        return $this;
    }

    /**
     * Gets customerGroupId
     * @return int
     */
    public function getCustomerGroupId()
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId
     * @param int $customerGroupId Customer group ID.
     * @return $this
     */
    public function setCustomerGroupId($customerGroupId)
    {
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets customerId
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     * @param int $customerId Customer ID.
     * @return $this
     */
    public function setCustomerId($customerId)
    {
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets customerIsGuest
     * @return int
     */
    public function getCustomerIsGuest()
    {
        return $this->container['customerIsGuest'];
    }

    /**
     * Sets customerIsGuest
     * @param int $customerIsGuest Customer-is-guest flag value.
     * @return $this
     */
    public function setCustomerIsGuest($customerIsGuest)
    {
        $this->container['customerIsGuest'] = $customerIsGuest;

        return $this;
    }

    /**
     * Gets customerLastname
     * @return string
     */
    public function getCustomerLastname()
    {
        return $this->container['customerLastname'];
    }

    /**
     * Sets customerLastname
     * @param string $customerLastname Customer last name.
     * @return $this
     */
    public function setCustomerLastname($customerLastname)
    {
        $this->container['customerLastname'] = $customerLastname;

        return $this;
    }

    /**
     * Gets customerMiddlename
     * @return string
     */
    public function getCustomerMiddlename()
    {
        return $this->container['customerMiddlename'];
    }

    /**
     * Sets customerMiddlename
     * @param string $customerMiddlename Customer middle name.
     * @return $this
     */
    public function setCustomerMiddlename($customerMiddlename)
    {
        $this->container['customerMiddlename'] = $customerMiddlename;

        return $this;
    }

    /**
     * Gets customerNote
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customerNote'];
    }

    /**
     * Sets customerNote
     * @param string $customerNote Customer note.
     * @return $this
     */
    public function setCustomerNote($customerNote)
    {
        $this->container['customerNote'] = $customerNote;

        return $this;
    }

    /**
     * Gets customerNoteNotify
     * @return int
     */
    public function getCustomerNoteNotify()
    {
        return $this->container['customerNoteNotify'];
    }

    /**
     * Sets customerNoteNotify
     * @param int $customerNoteNotify Customer-note-notify flag value.
     * @return $this
     */
    public function setCustomerNoteNotify($customerNoteNotify)
    {
        $this->container['customerNoteNotify'] = $customerNoteNotify;

        return $this;
    }

    /**
     * Gets customerPrefix
     * @return string
     */
    public function getCustomerPrefix()
    {
        return $this->container['customerPrefix'];
    }

    /**
     * Sets customerPrefix
     * @param string $customerPrefix Customer prefix.
     * @return $this
     */
    public function setCustomerPrefix($customerPrefix)
    {
        $this->container['customerPrefix'] = $customerPrefix;

        return $this;
    }

    /**
     * Gets customerSuffix
     * @return string
     */
    public function getCustomerSuffix()
    {
        return $this->container['customerSuffix'];
    }

    /**
     * Sets customerSuffix
     * @param string $customerSuffix Customer suffix.
     * @return $this
     */
    public function setCustomerSuffix($customerSuffix)
    {
        $this->container['customerSuffix'] = $customerSuffix;

        return $this;
    }

    /**
     * Gets customerTaxvat
     * @return string
     */
    public function getCustomerTaxvat()
    {
        return $this->container['customerTaxvat'];
    }

    /**
     * Sets customerTaxvat
     * @param string $customerTaxvat Customer value-added tax (VAT).
     * @return $this
     */
    public function setCustomerTaxvat($customerTaxvat)
    {
        $this->container['customerTaxvat'] = $customerTaxvat;

        return $this;
    }

    /**
     * Gets discountAmount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     * @param float $discountAmount Discount amount.
     * @return $this
     */
    public function setDiscountAmount($discountAmount)
    {
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets discountCanceled
     * @return float
     */
    public function getDiscountCanceled()
    {
        return $this->container['discountCanceled'];
    }

    /**
     * Sets discountCanceled
     * @param float $discountCanceled Discount canceled.
     * @return $this
     */
    public function setDiscountCanceled($discountCanceled)
    {
        $this->container['discountCanceled'] = $discountCanceled;

        return $this;
    }

    /**
     * Gets discountDescription
     * @return string
     */
    public function getDiscountDescription()
    {
        return $this->container['discountDescription'];
    }

    /**
     * Sets discountDescription
     * @param string $discountDescription Discount description.
     * @return $this
     */
    public function setDiscountDescription($discountDescription)
    {
        $this->container['discountDescription'] = $discountDescription;

        return $this;
    }

    /**
     * Gets discountInvoiced
     * @return float
     */
    public function getDiscountInvoiced()
    {
        return $this->container['discountInvoiced'];
    }

    /**
     * Sets discountInvoiced
     * @param float $discountInvoiced Discount invoiced.
     * @return $this
     */
    public function setDiscountInvoiced($discountInvoiced)
    {
        $this->container['discountInvoiced'] = $discountInvoiced;

        return $this;
    }

    /**
     * Gets discountRefunded
     * @return float
     */
    public function getDiscountRefunded()
    {
        return $this->container['discountRefunded'];
    }

    /**
     * Sets discountRefunded
     * @param float $discountRefunded Discount refunded amount.
     * @return $this
     */
    public function setDiscountRefunded($discountRefunded)
    {
        $this->container['discountRefunded'] = $discountRefunded;

        return $this;
    }

    /**
     * Gets editIncrement
     * @return int
     */
    public function getEditIncrement()
    {
        return $this->container['editIncrement'];
    }

    /**
     * Sets editIncrement
     * @param int $editIncrement Edit increment value.
     * @return $this
     */
    public function setEditIncrement($editIncrement)
    {
        $this->container['editIncrement'] = $editIncrement;

        return $this;
    }

    /**
     * Gets emailSent
     * @return int
     */
    public function getEmailSent()
    {
        return $this->container['emailSent'];
    }

    /**
     * Sets emailSent
     * @param int $emailSent Email-sent flag value.
     * @return $this
     */
    public function setEmailSent($emailSent)
    {
        $this->container['emailSent'] = $emailSent;

        return $this;
    }

    /**
     * Gets entityId
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     * @param int $entityId Order ID.
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets extCustomerId
     * @return string
     */
    public function getExtCustomerId()
    {
        return $this->container['extCustomerId'];
    }

    /**
     * Sets extCustomerId
     * @param string $extCustomerId External customer ID.
     * @return $this
     */
    public function setExtCustomerId($extCustomerId)
    {
        $this->container['extCustomerId'] = $extCustomerId;

        return $this;
    }

    /**
     * Gets extOrderId
     * @return string
     */
    public function getExtOrderId()
    {
        return $this->container['extOrderId'];
    }

    /**
     * Sets extOrderId
     * @param string $extOrderId External order ID.
     * @return $this
     */
    public function setExtOrderId($extOrderId)
    {
        $this->container['extOrderId'] = $extOrderId;

        return $this;
    }

    /**
     * Gets forcedShipmentWithInvoice
     * @return int
     */
    public function getForcedShipmentWithInvoice()
    {
        return $this->container['forcedShipmentWithInvoice'];
    }

    /**
     * Sets forcedShipmentWithInvoice
     * @param int $forcedShipmentWithInvoice Forced-shipment-with-invoice flag value.
     * @return $this
     */
    public function setForcedShipmentWithInvoice($forcedShipmentWithInvoice)
    {
        $this->container['forcedShipmentWithInvoice'] = $forcedShipmentWithInvoice;

        return $this;
    }

    /**
     * Gets globalCurrencyCode
     * @return string
     */
    public function getGlobalCurrencyCode()
    {
        return $this->container['globalCurrencyCode'];
    }

    /**
     * Sets globalCurrencyCode
     * @param string $globalCurrencyCode Global currency code.
     * @return $this
     */
    public function setGlobalCurrencyCode($globalCurrencyCode)
    {
        $this->container['globalCurrencyCode'] = $globalCurrencyCode;

        return $this;
    }

    /**
     * Gets grandTotal
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grandTotal'];
    }

    /**
     * Sets grandTotal
     * @param float $grandTotal Grand total.
     * @return $this
     */
    public function setGrandTotal($grandTotal)
    {
        $this->container['grandTotal'] = $grandTotal;

        return $this;
    }

    /**
     * Gets discountTaxCompensationAmount
     * @return float
     */
    public function getDiscountTaxCompensationAmount()
    {
        return $this->container['discountTaxCompensationAmount'];
    }

    /**
     * Sets discountTaxCompensationAmount
     * @param float $discountTaxCompensationAmount Discount tax compensation amount.
     * @return $this
     */
    public function setDiscountTaxCompensationAmount($discountTaxCompensationAmount)
    {
        $this->container['discountTaxCompensationAmount'] = $discountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets discountTaxCompensationInvoiced
     * @return float
     */
    public function getDiscountTaxCompensationInvoiced()
    {
        return $this->container['discountTaxCompensationInvoiced'];
    }

    /**
     * Sets discountTaxCompensationInvoiced
     * @param float $discountTaxCompensationInvoiced Discount tax compensation invoiced amount.
     * @return $this
     */
    public function setDiscountTaxCompensationInvoiced($discountTaxCompensationInvoiced)
    {
        $this->container['discountTaxCompensationInvoiced'] = $discountTaxCompensationInvoiced;

        return $this;
    }

    /**
     * Gets discountTaxCompensationRefunded
     * @return float
     */
    public function getDiscountTaxCompensationRefunded()
    {
        return $this->container['discountTaxCompensationRefunded'];
    }

    /**
     * Sets discountTaxCompensationRefunded
     * @param float $discountTaxCompensationRefunded Discount tax compensation refunded amount.
     * @return $this
     */
    public function setDiscountTaxCompensationRefunded($discountTaxCompensationRefunded)
    {
        $this->container['discountTaxCompensationRefunded'] = $discountTaxCompensationRefunded;

        return $this;
    }

    /**
     * Gets holdBeforeState
     * @return string
     */
    public function getHoldBeforeState()
    {
        return $this->container['holdBeforeState'];
    }

    /**
     * Sets holdBeforeState
     * @param string $holdBeforeState Hold before state.
     * @return $this
     */
    public function setHoldBeforeState($holdBeforeState)
    {
        $this->container['holdBeforeState'] = $holdBeforeState;

        return $this;
    }

    /**
     * Gets holdBeforeStatus
     * @return string
     */
    public function getHoldBeforeStatus()
    {
        return $this->container['holdBeforeStatus'];
    }

    /**
     * Sets holdBeforeStatus
     * @param string $holdBeforeStatus Hold before status.
     * @return $this
     */
    public function setHoldBeforeStatus($holdBeforeStatus)
    {
        $this->container['holdBeforeStatus'] = $holdBeforeStatus;

        return $this;
    }

    /**
     * Gets incrementId
     * @return string
     */
    public function getIncrementId()
    {
        return $this->container['incrementId'];
    }

    /**
     * Sets incrementId
     * @param string $incrementId Increment ID.
     * @return $this
     */
    public function setIncrementId($incrementId)
    {
        $this->container['incrementId'] = $incrementId;

        return $this;
    }

    /**
     * Gets isVirtual
     * @return int
     */
    public function getIsVirtual()
    {
        return $this->container['isVirtual'];
    }

    /**
     * Sets isVirtual
     * @param int $isVirtual Is-virtual flag value.
     * @return $this
     */
    public function setIsVirtual($isVirtual)
    {
        $this->container['isVirtual'] = $isVirtual;

        return $this;
    }

    /**
     * Gets orderCurrencyCode
     * @return string
     */
    public function getOrderCurrencyCode()
    {
        return $this->container['orderCurrencyCode'];
    }

    /**
     * Sets orderCurrencyCode
     * @param string $orderCurrencyCode Order currency code.
     * @return $this
     */
    public function setOrderCurrencyCode($orderCurrencyCode)
    {
        $this->container['orderCurrencyCode'] = $orderCurrencyCode;

        return $this;
    }

    /**
     * Gets originalIncrementId
     * @return string
     */
    public function getOriginalIncrementId()
    {
        return $this->container['originalIncrementId'];
    }

    /**
     * Sets originalIncrementId
     * @param string $originalIncrementId Original increment ID.
     * @return $this
     */
    public function setOriginalIncrementId($originalIncrementId)
    {
        $this->container['originalIncrementId'] = $originalIncrementId;

        return $this;
    }

    /**
     * Gets paymentAuthorizationAmount
     * @return float
     */
    public function getPaymentAuthorizationAmount()
    {
        return $this->container['paymentAuthorizationAmount'];
    }

    /**
     * Sets paymentAuthorizationAmount
     * @param float $paymentAuthorizationAmount Payment authorization amount.
     * @return $this
     */
    public function setPaymentAuthorizationAmount($paymentAuthorizationAmount)
    {
        $this->container['paymentAuthorizationAmount'] = $paymentAuthorizationAmount;

        return $this;
    }

    /**
     * Gets paymentAuthExpiration
     * @return int
     */
    public function getPaymentAuthExpiration()
    {
        return $this->container['paymentAuthExpiration'];
    }

    /**
     * Sets paymentAuthExpiration
     * @param int $paymentAuthExpiration Payment authorization expiration date.
     * @return $this
     */
    public function setPaymentAuthExpiration($paymentAuthExpiration)
    {
        $this->container['paymentAuthExpiration'] = $paymentAuthExpiration;

        return $this;
    }

    /**
     * Gets protectCode
     * @return string
     */
    public function getProtectCode()
    {
        return $this->container['protectCode'];
    }

    /**
     * Sets protectCode
     * @param string $protectCode Protect code.
     * @return $this
     */
    public function setProtectCode($protectCode)
    {
        $this->container['protectCode'] = $protectCode;

        return $this;
    }

    /**
     * Gets quoteAddressId
     * @return int
     */
    public function getQuoteAddressId()
    {
        return $this->container['quoteAddressId'];
    }

    /**
     * Sets quoteAddressId
     * @param int $quoteAddressId Quote address ID.
     * @return $this
     */
    public function setQuoteAddressId($quoteAddressId)
    {
        $this->container['quoteAddressId'] = $quoteAddressId;

        return $this;
    }

    /**
     * Gets quoteId
     * @return int
     */
    public function getQuoteId()
    {
        return $this->container['quoteId'];
    }

    /**
     * Sets quoteId
     * @param int $quoteId Quote ID.
     * @return $this
     */
    public function setQuoteId($quoteId)
    {
        $this->container['quoteId'] = $quoteId;

        return $this;
    }

    /**
     * Gets relationChildId
     * @return string
     */
    public function getRelationChildId()
    {
        return $this->container['relationChildId'];
    }

    /**
     * Sets relationChildId
     * @param string $relationChildId Relation child ID.
     * @return $this
     */
    public function setRelationChildId($relationChildId)
    {
        $this->container['relationChildId'] = $relationChildId;

        return $this;
    }

    /**
     * Gets relationChildRealId
     * @return string
     */
    public function getRelationChildRealId()
    {
        return $this->container['relationChildRealId'];
    }

    /**
     * Sets relationChildRealId
     * @param string $relationChildRealId Relation child real ID.
     * @return $this
     */
    public function setRelationChildRealId($relationChildRealId)
    {
        $this->container['relationChildRealId'] = $relationChildRealId;

        return $this;
    }

    /**
     * Gets relationParentId
     * @return string
     */
    public function getRelationParentId()
    {
        return $this->container['relationParentId'];
    }

    /**
     * Sets relationParentId
     * @param string $relationParentId Relation parent ID.
     * @return $this
     */
    public function setRelationParentId($relationParentId)
    {
        $this->container['relationParentId'] = $relationParentId;

        return $this;
    }

    /**
     * Gets relationParentRealId
     * @return string
     */
    public function getRelationParentRealId()
    {
        return $this->container['relationParentRealId'];
    }

    /**
     * Sets relationParentRealId
     * @param string $relationParentRealId Relation parent real ID.
     * @return $this
     */
    public function setRelationParentRealId($relationParentRealId)
    {
        $this->container['relationParentRealId'] = $relationParentRealId;

        return $this;
    }

    /**
     * Gets remoteIp
     * @return string
     */
    public function getRemoteIp()
    {
        return $this->container['remoteIp'];
    }

    /**
     * Sets remoteIp
     * @param string $remoteIp Remote IP address.
     * @return $this
     */
    public function setRemoteIp($remoteIp)
    {
        $this->container['remoteIp'] = $remoteIp;

        return $this;
    }

    /**
     * Gets shippingAmount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     * @param float $shippingAmount Shipping amount.
     * @return $this
     */
    public function setShippingAmount($shippingAmount)
    {
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets shippingCanceled
     * @return float
     */
    public function getShippingCanceled()
    {
        return $this->container['shippingCanceled'];
    }

    /**
     * Sets shippingCanceled
     * @param float $shippingCanceled Shipping canceled amount.
     * @return $this
     */
    public function setShippingCanceled($shippingCanceled)
    {
        $this->container['shippingCanceled'] = $shippingCanceled;

        return $this;
    }

    /**
     * Gets shippingDescription
     * @return string
     */
    public function getShippingDescription()
    {
        return $this->container['shippingDescription'];
    }

    /**
     * Sets shippingDescription
     * @param string $shippingDescription Shipping description.
     * @return $this
     */
    public function setShippingDescription($shippingDescription)
    {
        $this->container['shippingDescription'] = $shippingDescription;

        return $this;
    }

    /**
     * Gets shippingDiscountAmount
     * @return float
     */
    public function getShippingDiscountAmount()
    {
        return $this->container['shippingDiscountAmount'];
    }

    /**
     * Sets shippingDiscountAmount
     * @param float $shippingDiscountAmount Shipping discount amount.
     * @return $this
     */
    public function setShippingDiscountAmount($shippingDiscountAmount)
    {
        $this->container['shippingDiscountAmount'] = $shippingDiscountAmount;

        return $this;
    }

    /**
     * Gets shippingDiscountTaxCompensationAmount
     * @return float
     */
    public function getShippingDiscountTaxCompensationAmount()
    {
        return $this->container['shippingDiscountTaxCompensationAmount'];
    }

    /**
     * Sets shippingDiscountTaxCompensationAmount
     * @param float $shippingDiscountTaxCompensationAmount Shipping discount tax compensation amount.
     * @return $this
     */
    public function setShippingDiscountTaxCompensationAmount($shippingDiscountTaxCompensationAmount)
    {
        $this->container['shippingDiscountTaxCompensationAmount'] = $shippingDiscountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets shippingInclTax
     * @return float
     */
    public function getShippingInclTax()
    {
        return $this->container['shippingInclTax'];
    }

    /**
     * Sets shippingInclTax
     * @param float $shippingInclTax Shipping including tax amount.
     * @return $this
     */
    public function setShippingInclTax($shippingInclTax)
    {
        $this->container['shippingInclTax'] = $shippingInclTax;

        return $this;
    }

    /**
     * Gets shippingInvoiced
     * @return float
     */
    public function getShippingInvoiced()
    {
        return $this->container['shippingInvoiced'];
    }

    /**
     * Sets shippingInvoiced
     * @param float $shippingInvoiced Shipping invoiced amount.
     * @return $this
     */
    public function setShippingInvoiced($shippingInvoiced)
    {
        $this->container['shippingInvoiced'] = $shippingInvoiced;

        return $this;
    }

    /**
     * Gets shippingRefunded
     * @return float
     */
    public function getShippingRefunded()
    {
        return $this->container['shippingRefunded'];
    }

    /**
     * Sets shippingRefunded
     * @param float $shippingRefunded Shipping refunded amount.
     * @return $this
     */
    public function setShippingRefunded($shippingRefunded)
    {
        $this->container['shippingRefunded'] = $shippingRefunded;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     * @return float
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     * @param float $shippingTaxAmount Shipping tax amount.
     * @return $this
     */
    public function setShippingTaxAmount($shippingTaxAmount)
    {
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets shippingTaxRefunded
     * @return float
     */
    public function getShippingTaxRefunded()
    {
        return $this->container['shippingTaxRefunded'];
    }

    /**
     * Sets shippingTaxRefunded
     * @param float $shippingTaxRefunded Shipping tax refunded amount.
     * @return $this
     */
    public function setShippingTaxRefunded($shippingTaxRefunded)
    {
        $this->container['shippingTaxRefunded'] = $shippingTaxRefunded;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state State.
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets storeCurrencyCode
     * @return string
     */
    public function getStoreCurrencyCode()
    {
        return $this->container['storeCurrencyCode'];
    }

    /**
     * Sets storeCurrencyCode
     * @param string $storeCurrencyCode Store currency code.
     * @return $this
     */
    public function setStoreCurrencyCode($storeCurrencyCode)
    {
        $this->container['storeCurrencyCode'] = $storeCurrencyCode;

        return $this;
    }

    /**
     * Gets storeId
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     * @param int $storeId Store ID.
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets storeName
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['storeName'];
    }

    /**
     * Sets storeName
     * @param string $storeName Store name.
     * @return $this
     */
    public function setStoreName($storeName)
    {
        $this->container['storeName'] = $storeName;

        return $this;
    }

    /**
     * Gets storeToBaseRate
     * @return float
     */
    public function getStoreToBaseRate()
    {
        return $this->container['storeToBaseRate'];
    }

    /**
     * Sets storeToBaseRate
     * @param float $storeToBaseRate Store-to-base rate.
     * @return $this
     */
    public function setStoreToBaseRate($storeToBaseRate)
    {
        $this->container['storeToBaseRate'] = $storeToBaseRate;

        return $this;
    }

    /**
     * Gets storeToOrderRate
     * @return float
     */
    public function getStoreToOrderRate()
    {
        return $this->container['storeToOrderRate'];
    }

    /**
     * Sets storeToOrderRate
     * @param float $storeToOrderRate Store-to-order rate.
     * @return $this
     */
    public function setStoreToOrderRate($storeToOrderRate)
    {
        $this->container['storeToOrderRate'] = $storeToOrderRate;

        return $this;
    }

    /**
     * Gets subtotal
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param float $subtotal Subtotal.
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotalCanceled
     * @return float
     */
    public function getSubtotalCanceled()
    {
        return $this->container['subtotalCanceled'];
    }

    /**
     * Sets subtotalCanceled
     * @param float $subtotalCanceled Subtotal canceled amount.
     * @return $this
     */
    public function setSubtotalCanceled($subtotalCanceled)
    {
        $this->container['subtotalCanceled'] = $subtotalCanceled;

        return $this;
    }

    /**
     * Gets subtotalInclTax
     * @return float
     */
    public function getSubtotalInclTax()
    {
        return $this->container['subtotalInclTax'];
    }

    /**
     * Sets subtotalInclTax
     * @param float $subtotalInclTax Subtotal including tax amount.
     * @return $this
     */
    public function setSubtotalInclTax($subtotalInclTax)
    {
        $this->container['subtotalInclTax'] = $subtotalInclTax;

        return $this;
    }

    /**
     * Gets subtotalInvoiced
     * @return float
     */
    public function getSubtotalInvoiced()
    {
        return $this->container['subtotalInvoiced'];
    }

    /**
     * Sets subtotalInvoiced
     * @param float $subtotalInvoiced Subtotal invoiced amount.
     * @return $this
     */
    public function setSubtotalInvoiced($subtotalInvoiced)
    {
        $this->container['subtotalInvoiced'] = $subtotalInvoiced;

        return $this;
    }

    /**
     * Gets subtotalRefunded
     * @return float
     */
    public function getSubtotalRefunded()
    {
        return $this->container['subtotalRefunded'];
    }

    /**
     * Sets subtotalRefunded
     * @param float $subtotalRefunded Subtotal refunded amount.
     * @return $this
     */
    public function setSubtotalRefunded($subtotalRefunded)
    {
        $this->container['subtotalRefunded'] = $subtotalRefunded;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param float $taxAmount Tax amount.
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxCanceled
     * @return float
     */
    public function getTaxCanceled()
    {
        return $this->container['taxCanceled'];
    }

    /**
     * Sets taxCanceled
     * @param float $taxCanceled Tax canceled amount.
     * @return $this
     */
    public function setTaxCanceled($taxCanceled)
    {
        $this->container['taxCanceled'] = $taxCanceled;

        return $this;
    }

    /**
     * Gets taxInvoiced
     * @return float
     */
    public function getTaxInvoiced()
    {
        return $this->container['taxInvoiced'];
    }

    /**
     * Sets taxInvoiced
     * @param float $taxInvoiced Tax invoiced amount.
     * @return $this
     */
    public function setTaxInvoiced($taxInvoiced)
    {
        $this->container['taxInvoiced'] = $taxInvoiced;

        return $this;
    }

    /**
     * Gets taxRefunded
     * @return float
     */
    public function getTaxRefunded()
    {
        return $this->container['taxRefunded'];
    }

    /**
     * Sets taxRefunded
     * @param float $taxRefunded Tax refunded amount.
     * @return $this
     */
    public function setTaxRefunded($taxRefunded)
    {
        $this->container['taxRefunded'] = $taxRefunded;

        return $this;
    }

    /**
     * Gets totalCanceled
     * @return float
     */
    public function getTotalCanceled()
    {
        return $this->container['totalCanceled'];
    }

    /**
     * Sets totalCanceled
     * @param float $totalCanceled Total canceled.
     * @return $this
     */
    public function setTotalCanceled($totalCanceled)
    {
        $this->container['totalCanceled'] = $totalCanceled;

        return $this;
    }

    /**
     * Gets totalDue
     * @return float
     */
    public function getTotalDue()
    {
        return $this->container['totalDue'];
    }

    /**
     * Sets totalDue
     * @param float $totalDue Total due.
     * @return $this
     */
    public function setTotalDue($totalDue)
    {
        $this->container['totalDue'] = $totalDue;

        return $this;
    }

    /**
     * Gets totalInvoiced
     * @return float
     */
    public function getTotalInvoiced()
    {
        return $this->container['totalInvoiced'];
    }

    /**
     * Sets totalInvoiced
     * @param float $totalInvoiced Total invoiced amount.
     * @return $this
     */
    public function setTotalInvoiced($totalInvoiced)
    {
        $this->container['totalInvoiced'] = $totalInvoiced;

        return $this;
    }

    /**
     * Gets totalItemCount
     * @return int
     */
    public function getTotalItemCount()
    {
        return $this->container['totalItemCount'];
    }

    /**
     * Sets totalItemCount
     * @param int $totalItemCount Total item count.
     * @return $this
     */
    public function setTotalItemCount($totalItemCount)
    {
        $this->container['totalItemCount'] = $totalItemCount;

        return $this;
    }

    /**
     * Gets totalOfflineRefunded
     * @return float
     */
    public function getTotalOfflineRefunded()
    {
        return $this->container['totalOfflineRefunded'];
    }

    /**
     * Sets totalOfflineRefunded
     * @param float $totalOfflineRefunded Total offline refunded amount.
     * @return $this
     */
    public function setTotalOfflineRefunded($totalOfflineRefunded)
    {
        $this->container['totalOfflineRefunded'] = $totalOfflineRefunded;

        return $this;
    }

    /**
     * Gets totalOnlineRefunded
     * @return float
     */
    public function getTotalOnlineRefunded()
    {
        return $this->container['totalOnlineRefunded'];
    }

    /**
     * Sets totalOnlineRefunded
     * @param float $totalOnlineRefunded Total online refunded amount.
     * @return $this
     */
    public function setTotalOnlineRefunded($totalOnlineRefunded)
    {
        $this->container['totalOnlineRefunded'] = $totalOnlineRefunded;

        return $this;
    }

    /**
     * Gets totalPaid
     * @return float
     */
    public function getTotalPaid()
    {
        return $this->container['totalPaid'];
    }

    /**
     * Sets totalPaid
     * @param float $totalPaid Total paid.
     * @return $this
     */
    public function setTotalPaid($totalPaid)
    {
        $this->container['totalPaid'] = $totalPaid;

        return $this;
    }

    /**
     * Gets totalQtyOrdered
     * @return float
     */
    public function getTotalQtyOrdered()
    {
        return $this->container['totalQtyOrdered'];
    }

    /**
     * Sets totalQtyOrdered
     * @param float $totalQtyOrdered Total quantity ordered.
     * @return $this
     */
    public function setTotalQtyOrdered($totalQtyOrdered)
    {
        $this->container['totalQtyOrdered'] = $totalQtyOrdered;

        return $this;
    }

    /**
     * Gets totalRefunded
     * @return float
     */
    public function getTotalRefunded()
    {
        return $this->container['totalRefunded'];
    }

    /**
     * Sets totalRefunded
     * @param float $totalRefunded Total amount refunded.
     * @return $this
     */
    public function setTotalRefunded($totalRefunded)
    {
        $this->container['totalRefunded'] = $totalRefunded;

        return $this;
    }

    /**
     * Gets updatedAt
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     * @param string $updatedAt Updated-at timestamp.
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets weight
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param float $weight Weight.
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets xForwardedFor
     * @return string
     */
    public function getXForwardedFor()
    {
        return $this->container['xForwardedFor'];
    }

    /**
     * Sets xForwardedFor
     * @param string $xForwardedFor X-Forwarded-For field value.
     * @return $this
     */
    public function setXForwardedFor($xForwardedFor)
    {
        $this->container['xForwardedFor'] = $xForwardedFor;

        return $this;
    }

    /**
     * Gets items
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderItemInterface[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderItemInterface[] $items Array of items.
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets billingAddress
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderAddressInterface
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderAddressInterface $billingAddress
     * @return $this
     */
    public function setBillingAddress($billingAddress)
    {
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets payment
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentInterface
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderPaymentInterface $payment
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets statusHistories
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderStatusHistoryInterface[]
     */
    public function getStatusHistories()
    {
        return $this->container['statusHistories'];
    }

    /**
     * Sets statusHistories
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderStatusHistoryInterface[] $statusHistories Array of status histories.
     * @return $this
     */
    public function setStatusHistories($statusHistories)
    {
        $this->container['statusHistories'] = $statusHistories;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataOrderExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataOrderExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


