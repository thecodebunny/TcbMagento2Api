<?php
/**
 * SalesDataTotalInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * SalesDataTotalInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface TotalInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class SalesDataTotalInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'sales-data-total-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseShippingAmount' => 'float',
        'baseShippingCanceled' => 'float',
        'baseShippingDiscountAmount' => 'float',
        'baseShippingDiscountTaxCompensationAmnt' => 'float',
        'baseShippingInclTax' => 'float',
        'baseShippingInvoiced' => 'float',
        'baseShippingRefunded' => 'float',
        'baseShippingTaxAmount' => 'float',
        'baseShippingTaxRefunded' => 'float',
        'shippingAmount' => 'float',
        'shippingCanceled' => 'float',
        'shippingDiscountAmount' => 'float',
        'shippingDiscountTaxCompensationAmount' => 'float',
        'shippingInclTax' => 'float',
        'shippingInvoiced' => 'float',
        'shippingRefunded' => 'float',
        'shippingTaxAmount' => 'float',
        'shippingTaxRefunded' => 'float',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\SalesDataTotalExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'baseShippingAmount' => 'base_shipping_amount',
        'baseShippingCanceled' => 'base_shipping_canceled',
        'baseShippingDiscountAmount' => 'base_shipping_discount_amount',
        'baseShippingDiscountTaxCompensationAmnt' => 'base_shipping_discount_tax_compensation_amnt',
        'baseShippingInclTax' => 'base_shipping_incl_tax',
        'baseShippingInvoiced' => 'base_shipping_invoiced',
        'baseShippingRefunded' => 'base_shipping_refunded',
        'baseShippingTaxAmount' => 'base_shipping_tax_amount',
        'baseShippingTaxRefunded' => 'base_shipping_tax_refunded',
        'shippingAmount' => 'shipping_amount',
        'shippingCanceled' => 'shipping_canceled',
        'shippingDiscountAmount' => 'shipping_discount_amount',
        'shippingDiscountTaxCompensationAmount' => 'shipping_discount_tax_compensation_amount',
        'shippingInclTax' => 'shipping_incl_tax',
        'shippingInvoiced' => 'shipping_invoiced',
        'shippingRefunded' => 'shipping_refunded',
        'shippingTaxAmount' => 'shipping_tax_amount',
        'shippingTaxRefunded' => 'shipping_tax_refunded',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'baseShippingAmount' => 'setBaseShippingAmount',
        'baseShippingCanceled' => 'setBaseShippingCanceled',
        'baseShippingDiscountAmount' => 'setBaseShippingDiscountAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'setBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'setBaseShippingInclTax',
        'baseShippingInvoiced' => 'setBaseShippingInvoiced',
        'baseShippingRefunded' => 'setBaseShippingRefunded',
        'baseShippingTaxAmount' => 'setBaseShippingTaxAmount',
        'baseShippingTaxRefunded' => 'setBaseShippingTaxRefunded',
        'shippingAmount' => 'setShippingAmount',
        'shippingCanceled' => 'setShippingCanceled',
        'shippingDiscountAmount' => 'setShippingDiscountAmount',
        'shippingDiscountTaxCompensationAmount' => 'setShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'setShippingInclTax',
        'shippingInvoiced' => 'setShippingInvoiced',
        'shippingRefunded' => 'setShippingRefunded',
        'shippingTaxAmount' => 'setShippingTaxAmount',
        'shippingTaxRefunded' => 'setShippingTaxRefunded',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'baseShippingAmount' => 'getBaseShippingAmount',
        'baseShippingCanceled' => 'getBaseShippingCanceled',
        'baseShippingDiscountAmount' => 'getBaseShippingDiscountAmount',
        'baseShippingDiscountTaxCompensationAmnt' => 'getBaseShippingDiscountTaxCompensationAmnt',
        'baseShippingInclTax' => 'getBaseShippingInclTax',
        'baseShippingInvoiced' => 'getBaseShippingInvoiced',
        'baseShippingRefunded' => 'getBaseShippingRefunded',
        'baseShippingTaxAmount' => 'getBaseShippingTaxAmount',
        'baseShippingTaxRefunded' => 'getBaseShippingTaxRefunded',
        'shippingAmount' => 'getShippingAmount',
        'shippingCanceled' => 'getShippingCanceled',
        'shippingDiscountAmount' => 'getShippingDiscountAmount',
        'shippingDiscountTaxCompensationAmount' => 'getShippingDiscountTaxCompensationAmount',
        'shippingInclTax' => 'getShippingInclTax',
        'shippingInvoiced' => 'getShippingInvoiced',
        'shippingRefunded' => 'getShippingRefunded',
        'shippingTaxAmount' => 'getShippingTaxAmount',
        'shippingTaxRefunded' => 'getShippingTaxRefunded',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseShippingAmount'] = isset($data['baseShippingAmount']) ? $data['baseShippingAmount'] : null;
        $this->container['baseShippingCanceled'] = isset($data['baseShippingCanceled']) ? $data['baseShippingCanceled'] : null;
        $this->container['baseShippingDiscountAmount'] = isset($data['baseShippingDiscountAmount']) ? $data['baseShippingDiscountAmount'] : null;
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = isset($data['baseShippingDiscountTaxCompensationAmnt']) ? $data['baseShippingDiscountTaxCompensationAmnt'] : null;
        $this->container['baseShippingInclTax'] = isset($data['baseShippingInclTax']) ? $data['baseShippingInclTax'] : null;
        $this->container['baseShippingInvoiced'] = isset($data['baseShippingInvoiced']) ? $data['baseShippingInvoiced'] : null;
        $this->container['baseShippingRefunded'] = isset($data['baseShippingRefunded']) ? $data['baseShippingRefunded'] : null;
        $this->container['baseShippingTaxAmount'] = isset($data['baseShippingTaxAmount']) ? $data['baseShippingTaxAmount'] : null;
        $this->container['baseShippingTaxRefunded'] = isset($data['baseShippingTaxRefunded']) ? $data['baseShippingTaxRefunded'] : null;
        $this->container['shippingAmount'] = isset($data['shippingAmount']) ? $data['shippingAmount'] : null;
        $this->container['shippingCanceled'] = isset($data['shippingCanceled']) ? $data['shippingCanceled'] : null;
        $this->container['shippingDiscountAmount'] = isset($data['shippingDiscountAmount']) ? $data['shippingDiscountAmount'] : null;
        $this->container['shippingDiscountTaxCompensationAmount'] = isset($data['shippingDiscountTaxCompensationAmount']) ? $data['shippingDiscountTaxCompensationAmount'] : null;
        $this->container['shippingInclTax'] = isset($data['shippingInclTax']) ? $data['shippingInclTax'] : null;
        $this->container['shippingInvoiced'] = isset($data['shippingInvoiced']) ? $data['shippingInvoiced'] : null;
        $this->container['shippingRefunded'] = isset($data['shippingRefunded']) ? $data['shippingRefunded'] : null;
        $this->container['shippingTaxAmount'] = isset($data['shippingTaxAmount']) ? $data['shippingTaxAmount'] : null;
        $this->container['shippingTaxRefunded'] = isset($data['shippingTaxRefunded']) ? $data['shippingTaxRefunded'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets baseShippingAmount
     * @return float
     */
    public function getBaseShippingAmount()
    {
        return $this->container['baseShippingAmount'];
    }

    /**
     * Sets baseShippingAmount
     * @param float $baseShippingAmount Base shipping amount.
     * @return $this
     */
    public function setBaseShippingAmount($baseShippingAmount)
    {
        $this->container['baseShippingAmount'] = $baseShippingAmount;

        return $this;
    }

    /**
     * Gets baseShippingCanceled
     * @return float
     */
    public function getBaseShippingCanceled()
    {
        return $this->container['baseShippingCanceled'];
    }

    /**
     * Sets baseShippingCanceled
     * @param float $baseShippingCanceled Base shipping canceled.
     * @return $this
     */
    public function setBaseShippingCanceled($baseShippingCanceled)
    {
        $this->container['baseShippingCanceled'] = $baseShippingCanceled;

        return $this;
    }

    /**
     * Gets baseShippingDiscountAmount
     * @return float
     */
    public function getBaseShippingDiscountAmount()
    {
        return $this->container['baseShippingDiscountAmount'];
    }

    /**
     * Sets baseShippingDiscountAmount
     * @param float $baseShippingDiscountAmount Base shipping discount amount.
     * @return $this
     */
    public function setBaseShippingDiscountAmount($baseShippingDiscountAmount)
    {
        $this->container['baseShippingDiscountAmount'] = $baseShippingDiscountAmount;

        return $this;
    }

    /**
     * Gets baseShippingDiscountTaxCompensationAmnt
     * @return float
     */
    public function getBaseShippingDiscountTaxCompensationAmnt()
    {
        return $this->container['baseShippingDiscountTaxCompensationAmnt'];
    }

    /**
     * Sets baseShippingDiscountTaxCompensationAmnt
     * @param float $baseShippingDiscountTaxCompensationAmnt Base shipping discount tax compensation amount.
     * @return $this
     */
    public function setBaseShippingDiscountTaxCompensationAmnt($baseShippingDiscountTaxCompensationAmnt)
    {
        $this->container['baseShippingDiscountTaxCompensationAmnt'] = $baseShippingDiscountTaxCompensationAmnt;

        return $this;
    }

    /**
     * Gets baseShippingInclTax
     * @return float
     */
    public function getBaseShippingInclTax()
    {
        return $this->container['baseShippingInclTax'];
    }

    /**
     * Sets baseShippingInclTax
     * @param float $baseShippingInclTax Base shipping including tax.
     * @return $this
     */
    public function setBaseShippingInclTax($baseShippingInclTax)
    {
        $this->container['baseShippingInclTax'] = $baseShippingInclTax;

        return $this;
    }

    /**
     * Gets baseShippingInvoiced
     * @return float
     */
    public function getBaseShippingInvoiced()
    {
        return $this->container['baseShippingInvoiced'];
    }

    /**
     * Sets baseShippingInvoiced
     * @param float $baseShippingInvoiced Base shipping invoiced.
     * @return $this
     */
    public function setBaseShippingInvoiced($baseShippingInvoiced)
    {
        $this->container['baseShippingInvoiced'] = $baseShippingInvoiced;

        return $this;
    }

    /**
     * Gets baseShippingRefunded
     * @return float
     */
    public function getBaseShippingRefunded()
    {
        return $this->container['baseShippingRefunded'];
    }

    /**
     * Sets baseShippingRefunded
     * @param float $baseShippingRefunded Base shipping refunded.
     * @return $this
     */
    public function setBaseShippingRefunded($baseShippingRefunded)
    {
        $this->container['baseShippingRefunded'] = $baseShippingRefunded;

        return $this;
    }

    /**
     * Gets baseShippingTaxAmount
     * @return float
     */
    public function getBaseShippingTaxAmount()
    {
        return $this->container['baseShippingTaxAmount'];
    }

    /**
     * Sets baseShippingTaxAmount
     * @param float $baseShippingTaxAmount Base shipping tax amount.
     * @return $this
     */
    public function setBaseShippingTaxAmount($baseShippingTaxAmount)
    {
        $this->container['baseShippingTaxAmount'] = $baseShippingTaxAmount;

        return $this;
    }

    /**
     * Gets baseShippingTaxRefunded
     * @return float
     */
    public function getBaseShippingTaxRefunded()
    {
        return $this->container['baseShippingTaxRefunded'];
    }

    /**
     * Sets baseShippingTaxRefunded
     * @param float $baseShippingTaxRefunded Base shipping tax refunded.
     * @return $this
     */
    public function setBaseShippingTaxRefunded($baseShippingTaxRefunded)
    {
        $this->container['baseShippingTaxRefunded'] = $baseShippingTaxRefunded;

        return $this;
    }

    /**
     * Gets shippingAmount
     * @return float
     */
    public function getShippingAmount()
    {
        return $this->container['shippingAmount'];
    }

    /**
     * Sets shippingAmount
     * @param float $shippingAmount Shipping amount.
     * @return $this
     */
    public function setShippingAmount($shippingAmount)
    {
        $this->container['shippingAmount'] = $shippingAmount;

        return $this;
    }

    /**
     * Gets shippingCanceled
     * @return float
     */
    public function getShippingCanceled()
    {
        return $this->container['shippingCanceled'];
    }

    /**
     * Sets shippingCanceled
     * @param float $shippingCanceled Shipping canceled amount.
     * @return $this
     */
    public function setShippingCanceled($shippingCanceled)
    {
        $this->container['shippingCanceled'] = $shippingCanceled;

        return $this;
    }

    /**
     * Gets shippingDiscountAmount
     * @return float
     */
    public function getShippingDiscountAmount()
    {
        return $this->container['shippingDiscountAmount'];
    }

    /**
     * Sets shippingDiscountAmount
     * @param float $shippingDiscountAmount Shipping discount amount.
     * @return $this
     */
    public function setShippingDiscountAmount($shippingDiscountAmount)
    {
        $this->container['shippingDiscountAmount'] = $shippingDiscountAmount;

        return $this;
    }

    /**
     * Gets shippingDiscountTaxCompensationAmount
     * @return float
     */
    public function getShippingDiscountTaxCompensationAmount()
    {
        return $this->container['shippingDiscountTaxCompensationAmount'];
    }

    /**
     * Sets shippingDiscountTaxCompensationAmount
     * @param float $shippingDiscountTaxCompensationAmount Shipping discount tax compensation amount.
     * @return $this
     */
    public function setShippingDiscountTaxCompensationAmount($shippingDiscountTaxCompensationAmount)
    {
        $this->container['shippingDiscountTaxCompensationAmount'] = $shippingDiscountTaxCompensationAmount;

        return $this;
    }

    /**
     * Gets shippingInclTax
     * @return float
     */
    public function getShippingInclTax()
    {
        return $this->container['shippingInclTax'];
    }

    /**
     * Sets shippingInclTax
     * @param float $shippingInclTax Shipping including tax amount.
     * @return $this
     */
    public function setShippingInclTax($shippingInclTax)
    {
        $this->container['shippingInclTax'] = $shippingInclTax;

        return $this;
    }

    /**
     * Gets shippingInvoiced
     * @return float
     */
    public function getShippingInvoiced()
    {
        return $this->container['shippingInvoiced'];
    }

    /**
     * Sets shippingInvoiced
     * @param float $shippingInvoiced Shipping invoiced amount.
     * @return $this
     */
    public function setShippingInvoiced($shippingInvoiced)
    {
        $this->container['shippingInvoiced'] = $shippingInvoiced;

        return $this;
    }

    /**
     * Gets shippingRefunded
     * @return float
     */
    public function getShippingRefunded()
    {
        return $this->container['shippingRefunded'];
    }

    /**
     * Sets shippingRefunded
     * @param float $shippingRefunded Shipping refunded amount.
     * @return $this
     */
    public function setShippingRefunded($shippingRefunded)
    {
        $this->container['shippingRefunded'] = $shippingRefunded;

        return $this;
    }

    /**
     * Gets shippingTaxAmount
     * @return float
     */
    public function getShippingTaxAmount()
    {
        return $this->container['shippingTaxAmount'];
    }

    /**
     * Sets shippingTaxAmount
     * @param float $shippingTaxAmount Shipping tax amount.
     * @return $this
     */
    public function setShippingTaxAmount($shippingTaxAmount)
    {
        $this->container['shippingTaxAmount'] = $shippingTaxAmount;

        return $this;
    }

    /**
     * Gets shippingTaxRefunded
     * @return float
     */
    public function getShippingTaxRefunded()
    {
        return $this->container['shippingTaxRefunded'];
    }

    /**
     * Sets shippingTaxRefunded
     * @param float $shippingTaxRefunded Shipping tax refunded amount.
     * @return $this
     */
    public function setShippingTaxRefunded($shippingTaxRefunded)
    {
        $this->container['shippingTaxRefunded'] = $shippingTaxRefunded;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\SalesDataTotalExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\SalesDataTotalExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


