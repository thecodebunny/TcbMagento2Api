<?php
/**
 * StoreDataStoreConfigInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * StoreDataStoreConfigInterface Class Doc Comment
 *
 * @category    Class
 * @description StoreConfig interface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class StoreDataStoreConfigInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'store-data-store-config-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'websiteId' => 'int',
        'locale' => 'string',
        'baseCurrencyCode' => 'string',
        'defaultDisplayCurrencyCode' => 'string',
        'timezone' => 'string',
        'weightUnit' => 'string',
        'baseUrl' => 'string',
        'baseLinkUrl' => 'string',
        'baseStaticUrl' => 'string',
        'baseMediaUrl' => 'string',
        'secureBaseUrl' => 'string',
        'secureBaseLinkUrl' => 'string',
        'secureBaseStaticUrl' => 'string',
        'secureBaseMediaUrl' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\StoreDataStoreConfigExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'websiteId' => 'website_id',
        'locale' => 'locale',
        'baseCurrencyCode' => 'base_currency_code',
        'defaultDisplayCurrencyCode' => 'default_display_currency_code',
        'timezone' => 'timezone',
        'weightUnit' => 'weight_unit',
        'baseUrl' => 'base_url',
        'baseLinkUrl' => 'base_link_url',
        'baseStaticUrl' => 'base_static_url',
        'baseMediaUrl' => 'base_media_url',
        'secureBaseUrl' => 'secure_base_url',
        'secureBaseLinkUrl' => 'secure_base_link_url',
        'secureBaseStaticUrl' => 'secure_base_static_url',
        'secureBaseMediaUrl' => 'secure_base_media_url',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'websiteId' => 'setWebsiteId',
        'locale' => 'setLocale',
        'baseCurrencyCode' => 'setBaseCurrencyCode',
        'defaultDisplayCurrencyCode' => 'setDefaultDisplayCurrencyCode',
        'timezone' => 'setTimezone',
        'weightUnit' => 'setWeightUnit',
        'baseUrl' => 'setBaseUrl',
        'baseLinkUrl' => 'setBaseLinkUrl',
        'baseStaticUrl' => 'setBaseStaticUrl',
        'baseMediaUrl' => 'setBaseMediaUrl',
        'secureBaseUrl' => 'setSecureBaseUrl',
        'secureBaseLinkUrl' => 'setSecureBaseLinkUrl',
        'secureBaseStaticUrl' => 'setSecureBaseStaticUrl',
        'secureBaseMediaUrl' => 'setSecureBaseMediaUrl',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'websiteId' => 'getWebsiteId',
        'locale' => 'getLocale',
        'baseCurrencyCode' => 'getBaseCurrencyCode',
        'defaultDisplayCurrencyCode' => 'getDefaultDisplayCurrencyCode',
        'timezone' => 'getTimezone',
        'weightUnit' => 'getWeightUnit',
        'baseUrl' => 'getBaseUrl',
        'baseLinkUrl' => 'getBaseLinkUrl',
        'baseStaticUrl' => 'getBaseStaticUrl',
        'baseMediaUrl' => 'getBaseMediaUrl',
        'secureBaseUrl' => 'getSecureBaseUrl',
        'secureBaseLinkUrl' => 'getSecureBaseLinkUrl',
        'secureBaseStaticUrl' => 'getSecureBaseStaticUrl',
        'secureBaseMediaUrl' => 'getSecureBaseMediaUrl',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['websiteId'] = isset($data['websiteId']) ? $data['websiteId'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['baseCurrencyCode'] = isset($data['baseCurrencyCode']) ? $data['baseCurrencyCode'] : null;
        $this->container['defaultDisplayCurrencyCode'] = isset($data['defaultDisplayCurrencyCode']) ? $data['defaultDisplayCurrencyCode'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['weightUnit'] = isset($data['weightUnit']) ? $data['weightUnit'] : null;
        $this->container['baseUrl'] = isset($data['baseUrl']) ? $data['baseUrl'] : null;
        $this->container['baseLinkUrl'] = isset($data['baseLinkUrl']) ? $data['baseLinkUrl'] : null;
        $this->container['baseStaticUrl'] = isset($data['baseStaticUrl']) ? $data['baseStaticUrl'] : null;
        $this->container['baseMediaUrl'] = isset($data['baseMediaUrl']) ? $data['baseMediaUrl'] : null;
        $this->container['secureBaseUrl'] = isset($data['secureBaseUrl']) ? $data['secureBaseUrl'] : null;
        $this->container['secureBaseLinkUrl'] = isset($data['secureBaseLinkUrl']) ? $data['secureBaseLinkUrl'] : null;
        $this->container['secureBaseStaticUrl'] = isset($data['secureBaseStaticUrl']) ? $data['secureBaseStaticUrl'] : null;
        $this->container['secureBaseMediaUrl'] = isset($data['secureBaseMediaUrl']) ? $data['secureBaseMediaUrl'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ($this->container['websiteId'] === null) {
            $invalid_properties[] = "'websiteId' can't be null";
        }
        if ($this->container['locale'] === null) {
            $invalid_properties[] = "'locale' can't be null";
        }
        if ($this->container['baseCurrencyCode'] === null) {
            $invalid_properties[] = "'baseCurrencyCode' can't be null";
        }
        if ($this->container['defaultDisplayCurrencyCode'] === null) {
            $invalid_properties[] = "'defaultDisplayCurrencyCode' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalid_properties[] = "'timezone' can't be null";
        }
        if ($this->container['weightUnit'] === null) {
            $invalid_properties[] = "'weightUnit' can't be null";
        }
        if ($this->container['baseUrl'] === null) {
            $invalid_properties[] = "'baseUrl' can't be null";
        }
        if ($this->container['baseLinkUrl'] === null) {
            $invalid_properties[] = "'baseLinkUrl' can't be null";
        }
        if ($this->container['baseStaticUrl'] === null) {
            $invalid_properties[] = "'baseStaticUrl' can't be null";
        }
        if ($this->container['baseMediaUrl'] === null) {
            $invalid_properties[] = "'baseMediaUrl' can't be null";
        }
        if ($this->container['secureBaseUrl'] === null) {
            $invalid_properties[] = "'secureBaseUrl' can't be null";
        }
        if ($this->container['secureBaseLinkUrl'] === null) {
            $invalid_properties[] = "'secureBaseLinkUrl' can't be null";
        }
        if ($this->container['secureBaseStaticUrl'] === null) {
            $invalid_properties[] = "'secureBaseStaticUrl' can't be null";
        }
        if ($this->container['secureBaseMediaUrl'] === null) {
            $invalid_properties[] = "'secureBaseMediaUrl' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['websiteId'] === null) {
            return false;
        }
        if ($this->container['locale'] === null) {
            return false;
        }
        if ($this->container['baseCurrencyCode'] === null) {
            return false;
        }
        if ($this->container['defaultDisplayCurrencyCode'] === null) {
            return false;
        }
        if ($this->container['timezone'] === null) {
            return false;
        }
        if ($this->container['weightUnit'] === null) {
            return false;
        }
        if ($this->container['baseUrl'] === null) {
            return false;
        }
        if ($this->container['baseLinkUrl'] === null) {
            return false;
        }
        if ($this->container['baseStaticUrl'] === null) {
            return false;
        }
        if ($this->container['baseMediaUrl'] === null) {
            return false;
        }
        if ($this->container['secureBaseUrl'] === null) {
            return false;
        }
        if ($this->container['secureBaseLinkUrl'] === null) {
            return false;
        }
        if ($this->container['secureBaseStaticUrl'] === null) {
            return false;
        }
        if ($this->container['secureBaseMediaUrl'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Store id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Store code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets websiteId
     * @return int
     */
    public function getWebsiteId()
    {
        return $this->container['websiteId'];
    }

    /**
     * Sets websiteId
     * @param int $websiteId Website id of the store
     * @return $this
     */
    public function setWebsiteId($websiteId)
    {
        $this->container['websiteId'] = $websiteId;

        return $this;
    }

    /**
     * Gets locale
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     * @param string $locale Store locale
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets baseCurrencyCode
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['baseCurrencyCode'];
    }

    /**
     * Sets baseCurrencyCode
     * @param string $baseCurrencyCode Base currency code
     * @return $this
     */
    public function setBaseCurrencyCode($baseCurrencyCode)
    {
        $this->container['baseCurrencyCode'] = $baseCurrencyCode;

        return $this;
    }

    /**
     * Gets defaultDisplayCurrencyCode
     * @return string
     */
    public function getDefaultDisplayCurrencyCode()
    {
        return $this->container['defaultDisplayCurrencyCode'];
    }

    /**
     * Sets defaultDisplayCurrencyCode
     * @param string $defaultDisplayCurrencyCode Default display currency code
     * @return $this
     */
    public function setDefaultDisplayCurrencyCode($defaultDisplayCurrencyCode)
    {
        $this->container['defaultDisplayCurrencyCode'] = $defaultDisplayCurrencyCode;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone Timezone of the store
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets weightUnit
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weightUnit'];
    }

    /**
     * Sets weightUnit
     * @param string $weightUnit The unit of weight
     * @return $this
     */
    public function setWeightUnit($weightUnit)
    {
        $this->container['weightUnit'] = $weightUnit;

        return $this;
    }

    /**
     * Gets baseUrl
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['baseUrl'];
    }

    /**
     * Sets baseUrl
     * @param string $baseUrl Base URL for the store
     * @return $this
     */
    public function setBaseUrl($baseUrl)
    {
        $this->container['baseUrl'] = $baseUrl;

        return $this;
    }

    /**
     * Gets baseLinkUrl
     * @return string
     */
    public function getBaseLinkUrl()
    {
        return $this->container['baseLinkUrl'];
    }

    /**
     * Sets baseLinkUrl
     * @param string $baseLinkUrl Base link URL for the store
     * @return $this
     */
    public function setBaseLinkUrl($baseLinkUrl)
    {
        $this->container['baseLinkUrl'] = $baseLinkUrl;

        return $this;
    }

    /**
     * Gets baseStaticUrl
     * @return string
     */
    public function getBaseStaticUrl()
    {
        return $this->container['baseStaticUrl'];
    }

    /**
     * Sets baseStaticUrl
     * @param string $baseStaticUrl Base static URL for the store
     * @return $this
     */
    public function setBaseStaticUrl($baseStaticUrl)
    {
        $this->container['baseStaticUrl'] = $baseStaticUrl;

        return $this;
    }

    /**
     * Gets baseMediaUrl
     * @return string
     */
    public function getBaseMediaUrl()
    {
        return $this->container['baseMediaUrl'];
    }

    /**
     * Sets baseMediaUrl
     * @param string $baseMediaUrl Base media URL for the store
     * @return $this
     */
    public function setBaseMediaUrl($baseMediaUrl)
    {
        $this->container['baseMediaUrl'] = $baseMediaUrl;

        return $this;
    }

    /**
     * Gets secureBaseUrl
     * @return string
     */
    public function getSecureBaseUrl()
    {
        return $this->container['secureBaseUrl'];
    }

    /**
     * Sets secureBaseUrl
     * @param string $secureBaseUrl Secure base URL for the store
     * @return $this
     */
    public function setSecureBaseUrl($secureBaseUrl)
    {
        $this->container['secureBaseUrl'] = $secureBaseUrl;

        return $this;
    }

    /**
     * Gets secureBaseLinkUrl
     * @return string
     */
    public function getSecureBaseLinkUrl()
    {
        return $this->container['secureBaseLinkUrl'];
    }

    /**
     * Sets secureBaseLinkUrl
     * @param string $secureBaseLinkUrl Secure base link URL for the store
     * @return $this
     */
    public function setSecureBaseLinkUrl($secureBaseLinkUrl)
    {
        $this->container['secureBaseLinkUrl'] = $secureBaseLinkUrl;

        return $this;
    }

    /**
     * Gets secureBaseStaticUrl
     * @return string
     */
    public function getSecureBaseStaticUrl()
    {
        return $this->container['secureBaseStaticUrl'];
    }

    /**
     * Sets secureBaseStaticUrl
     * @param string $secureBaseStaticUrl Secure base static URL for the store
     * @return $this
     */
    public function setSecureBaseStaticUrl($secureBaseStaticUrl)
    {
        $this->container['secureBaseStaticUrl'] = $secureBaseStaticUrl;

        return $this;
    }

    /**
     * Gets secureBaseMediaUrl
     * @return string
     */
    public function getSecureBaseMediaUrl()
    {
        return $this->container['secureBaseMediaUrl'];
    }

    /**
     * Sets secureBaseMediaUrl
     * @param string $secureBaseMediaUrl Secure base media URL for the store
     * @return $this
     */
    public function setSecureBaseMediaUrl($secureBaseMediaUrl)
    {
        $this->container['secureBaseMediaUrl'] = $secureBaseMediaUrl;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\StoreDataStoreConfigExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\StoreDataStoreConfigExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


