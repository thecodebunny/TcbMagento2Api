<?php
/**
 * CustomerDataAttributeMetadataInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * CustomerDataAttributeMetadataInterface Class Doc Comment
 *
 * @category    Class
 * @description Customer attribute metadata interface.
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class CustomerDataAttributeMetadataInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'customer-data-attribute-metadata-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frontendInput' => 'string',
        'inputFilter' => 'string',
        'storeLabel' => 'string',
        'validationRules' => '\TheCodeBunny\Magento2Api\Model\CustomerDataValidationRuleInterface[]',
        'multilineCount' => 'int',
        'visible' => 'bool',
        'required' => 'bool',
        'dataModel' => 'string',
        'options' => '\TheCodeBunny\Magento2Api\Model\CustomerDataOptionInterface[]',
        'frontendClass' => 'string',
        'userDefined' => 'bool',
        'sortOrder' => 'int',
        'frontendLabel' => 'string',
        'note' => 'string',
        'system' => 'bool',
        'backendType' => 'string',
        'isUsedInGrid' => 'bool',
        'isVisibleInGrid' => 'bool',
        'isFilterableInGrid' => 'bool',
        'isSearchableInGrid' => 'bool',
        'attributeCode' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'frontendInput' => 'frontend_input',
        'inputFilter' => 'input_filter',
        'storeLabel' => 'store_label',
        'validationRules' => 'validation_rules',
        'multilineCount' => 'multiline_count',
        'visible' => 'visible',
        'required' => 'required',
        'dataModel' => 'data_model',
        'options' => 'options',
        'frontendClass' => 'frontend_class',
        'userDefined' => 'user_defined',
        'sortOrder' => 'sort_order',
        'frontendLabel' => 'frontend_label',
        'note' => 'note',
        'system' => 'system',
        'backendType' => 'backend_type',
        'isUsedInGrid' => 'is_used_in_grid',
        'isVisibleInGrid' => 'is_visible_in_grid',
        'isFilterableInGrid' => 'is_filterable_in_grid',
        'isSearchableInGrid' => 'is_searchable_in_grid',
        'attributeCode' => 'attribute_code'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'frontendInput' => 'setFrontendInput',
        'inputFilter' => 'setInputFilter',
        'storeLabel' => 'setStoreLabel',
        'validationRules' => 'setValidationRules',
        'multilineCount' => 'setMultilineCount',
        'visible' => 'setVisible',
        'required' => 'setRequired',
        'dataModel' => 'setDataModel',
        'options' => 'setOptions',
        'frontendClass' => 'setFrontendClass',
        'userDefined' => 'setUserDefined',
        'sortOrder' => 'setSortOrder',
        'frontendLabel' => 'setFrontendLabel',
        'note' => 'setNote',
        'system' => 'setSystem',
        'backendType' => 'setBackendType',
        'isUsedInGrid' => 'setIsUsedInGrid',
        'isVisibleInGrid' => 'setIsVisibleInGrid',
        'isFilterableInGrid' => 'setIsFilterableInGrid',
        'isSearchableInGrid' => 'setIsSearchableInGrid',
        'attributeCode' => 'setAttributeCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'frontendInput' => 'getFrontendInput',
        'inputFilter' => 'getInputFilter',
        'storeLabel' => 'getStoreLabel',
        'validationRules' => 'getValidationRules',
        'multilineCount' => 'getMultilineCount',
        'visible' => 'getVisible',
        'required' => 'getRequired',
        'dataModel' => 'getDataModel',
        'options' => 'getOptions',
        'frontendClass' => 'getFrontendClass',
        'userDefined' => 'getUserDefined',
        'sortOrder' => 'getSortOrder',
        'frontendLabel' => 'getFrontendLabel',
        'note' => 'getNote',
        'system' => 'getSystem',
        'backendType' => 'getBackendType',
        'isUsedInGrid' => 'getIsUsedInGrid',
        'isVisibleInGrid' => 'getIsVisibleInGrid',
        'isFilterableInGrid' => 'getIsFilterableInGrid',
        'isSearchableInGrid' => 'getIsSearchableInGrid',
        'attributeCode' => 'getAttributeCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frontendInput'] = isset($data['frontendInput']) ? $data['frontendInput'] : null;
        $this->container['inputFilter'] = isset($data['inputFilter']) ? $data['inputFilter'] : null;
        $this->container['storeLabel'] = isset($data['storeLabel']) ? $data['storeLabel'] : null;
        $this->container['validationRules'] = isset($data['validationRules']) ? $data['validationRules'] : null;
        $this->container['multilineCount'] = isset($data['multilineCount']) ? $data['multilineCount'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['dataModel'] = isset($data['dataModel']) ? $data['dataModel'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['frontendClass'] = isset($data['frontendClass']) ? $data['frontendClass'] : null;
        $this->container['userDefined'] = isset($data['userDefined']) ? $data['userDefined'] : null;
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['frontendLabel'] = isset($data['frontendLabel']) ? $data['frontendLabel'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['backendType'] = isset($data['backendType']) ? $data['backendType'] : null;
        $this->container['isUsedInGrid'] = isset($data['isUsedInGrid']) ? $data['isUsedInGrid'] : null;
        $this->container['isVisibleInGrid'] = isset($data['isVisibleInGrid']) ? $data['isVisibleInGrid'] : null;
        $this->container['isFilterableInGrid'] = isset($data['isFilterableInGrid']) ? $data['isFilterableInGrid'] : null;
        $this->container['isSearchableInGrid'] = isset($data['isSearchableInGrid']) ? $data['isSearchableInGrid'] : null;
        $this->container['attributeCode'] = isset($data['attributeCode']) ? $data['attributeCode'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['frontendInput'] === null) {
            $invalid_properties[] = "'frontendInput' can't be null";
        }
        if ($this->container['inputFilter'] === null) {
            $invalid_properties[] = "'inputFilter' can't be null";
        }
        if ($this->container['storeLabel'] === null) {
            $invalid_properties[] = "'storeLabel' can't be null";
        }
        if ($this->container['validationRules'] === null) {
            $invalid_properties[] = "'validationRules' can't be null";
        }
        if ($this->container['multilineCount'] === null) {
            $invalid_properties[] = "'multilineCount' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalid_properties[] = "'visible' can't be null";
        }
        if ($this->container['required'] === null) {
            $invalid_properties[] = "'required' can't be null";
        }
        if ($this->container['dataModel'] === null) {
            $invalid_properties[] = "'dataModel' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalid_properties[] = "'options' can't be null";
        }
        if ($this->container['frontendClass'] === null) {
            $invalid_properties[] = "'frontendClass' can't be null";
        }
        if ($this->container['userDefined'] === null) {
            $invalid_properties[] = "'userDefined' can't be null";
        }
        if ($this->container['sortOrder'] === null) {
            $invalid_properties[] = "'sortOrder' can't be null";
        }
        if ($this->container['frontendLabel'] === null) {
            $invalid_properties[] = "'frontendLabel' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalid_properties[] = "'note' can't be null";
        }
        if ($this->container['system'] === null) {
            $invalid_properties[] = "'system' can't be null";
        }
        if ($this->container['backendType'] === null) {
            $invalid_properties[] = "'backendType' can't be null";
        }
        if ($this->container['attributeCode'] === null) {
            $invalid_properties[] = "'attributeCode' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['frontendInput'] === null) {
            return false;
        }
        if ($this->container['inputFilter'] === null) {
            return false;
        }
        if ($this->container['storeLabel'] === null) {
            return false;
        }
        if ($this->container['validationRules'] === null) {
            return false;
        }
        if ($this->container['multilineCount'] === null) {
            return false;
        }
        if ($this->container['visible'] === null) {
            return false;
        }
        if ($this->container['required'] === null) {
            return false;
        }
        if ($this->container['dataModel'] === null) {
            return false;
        }
        if ($this->container['options'] === null) {
            return false;
        }
        if ($this->container['frontendClass'] === null) {
            return false;
        }
        if ($this->container['userDefined'] === null) {
            return false;
        }
        if ($this->container['sortOrder'] === null) {
            return false;
        }
        if ($this->container['frontendLabel'] === null) {
            return false;
        }
        if ($this->container['note'] === null) {
            return false;
        }
        if ($this->container['system'] === null) {
            return false;
        }
        if ($this->container['backendType'] === null) {
            return false;
        }
        if ($this->container['attributeCode'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets frontendInput
     * @return string
     */
    public function getFrontendInput()
    {
        return $this->container['frontendInput'];
    }

    /**
     * Sets frontendInput
     * @param string $frontendInput HTML for input element.
     * @return $this
     */
    public function setFrontendInput($frontendInput)
    {
        $this->container['frontendInput'] = $frontendInput;

        return $this;
    }

    /**
     * Gets inputFilter
     * @return string
     */
    public function getInputFilter()
    {
        return $this->container['inputFilter'];
    }

    /**
     * Sets inputFilter
     * @param string $inputFilter Template used for input (e.g. \"date\")
     * @return $this
     */
    public function setInputFilter($inputFilter)
    {
        $this->container['inputFilter'] = $inputFilter;

        return $this;
    }

    /**
     * Gets storeLabel
     * @return string
     */
    public function getStoreLabel()
    {
        return $this->container['storeLabel'];
    }

    /**
     * Sets storeLabel
     * @param string $storeLabel Label of the store.
     * @return $this
     */
    public function setStoreLabel($storeLabel)
    {
        $this->container['storeLabel'] = $storeLabel;

        return $this;
    }

    /**
     * Gets validationRules
     * @return \TheCodeBunny\Magento2Api\Model\CustomerDataValidationRuleInterface[]
     */
    public function getValidationRules()
    {
        return $this->container['validationRules'];
    }

    /**
     * Sets validationRules
     * @param \TheCodeBunny\Magento2Api\Model\CustomerDataValidationRuleInterface[] $validationRules Validation rules.
     * @return $this
     */
    public function setValidationRules($validationRules)
    {
        $this->container['validationRules'] = $validationRules;

        return $this;
    }

    /**
     * Gets multilineCount
     * @return int
     */
    public function getMultilineCount()
    {
        return $this->container['multilineCount'];
    }

    /**
     * Sets multilineCount
     * @param int $multilineCount Of lines of the attribute value.
     * @return $this
     */
    public function setMultilineCount($multilineCount)
    {
        $this->container['multilineCount'] = $multilineCount;

        return $this;
    }

    /**
     * Gets visible
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     * @param bool $visible Attribute is visible on frontend.
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets required
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     * @param bool $required Attribute is required.
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets dataModel
     * @return string
     */
    public function getDataModel()
    {
        return $this->container['dataModel'];
    }

    /**
     * Sets dataModel
     * @param string $dataModel Data model for attribute.
     * @return $this
     */
    public function setDataModel($dataModel)
    {
        $this->container['dataModel'] = $dataModel;

        return $this;
    }

    /**
     * Gets options
     * @return \TheCodeBunny\Magento2Api\Model\CustomerDataOptionInterface[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \TheCodeBunny\Magento2Api\Model\CustomerDataOptionInterface[] $options Options of the attribute (key => value pairs for select)
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets frontendClass
     * @return string
     */
    public function getFrontendClass()
    {
        return $this->container['frontendClass'];
    }

    /**
     * Sets frontendClass
     * @param string $frontendClass Class which is used to display the attribute on frontend.
     * @return $this
     */
    public function setFrontendClass($frontendClass)
    {
        $this->container['frontendClass'] = $frontendClass;

        return $this;
    }

    /**
     * Gets userDefined
     * @return bool
     */
    public function getUserDefined()
    {
        return $this->container['userDefined'];
    }

    /**
     * Sets userDefined
     * @param bool $userDefined Current attribute has been defined by a user.
     * @return $this
     */
    public function setUserDefined($userDefined)
    {
        $this->container['userDefined'] = $userDefined;

        return $this;
    }

    /**
     * Gets sortOrder
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     * @param int $sortOrder Attributes sort order.
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets frontendLabel
     * @return string
     */
    public function getFrontendLabel()
    {
        return $this->container['frontendLabel'];
    }

    /**
     * Sets frontendLabel
     * @param string $frontendLabel Label which supposed to be displayed on frontend.
     * @return $this
     */
    public function setFrontendLabel($frontendLabel)
    {
        $this->container['frontendLabel'] = $frontendLabel;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note The note attribute for the element.
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets system
     * @return bool
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     * @param bool $system This is a system attribute.
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets backendType
     * @return string
     */
    public function getBackendType()
    {
        return $this->container['backendType'];
    }

    /**
     * Sets backendType
     * @param string $backendType Backend type.
     * @return $this
     */
    public function setBackendType($backendType)
    {
        $this->container['backendType'] = $backendType;

        return $this;
    }

    /**
     * Gets isUsedInGrid
     * @return bool
     */
    public function getIsUsedInGrid()
    {
        return $this->container['isUsedInGrid'];
    }

    /**
     * Sets isUsedInGrid
     * @param bool $isUsedInGrid It is used in customer grid
     * @return $this
     */
    public function setIsUsedInGrid($isUsedInGrid)
    {
        $this->container['isUsedInGrid'] = $isUsedInGrid;

        return $this;
    }

    /**
     * Gets isVisibleInGrid
     * @return bool
     */
    public function getIsVisibleInGrid()
    {
        return $this->container['isVisibleInGrid'];
    }

    /**
     * Sets isVisibleInGrid
     * @param bool $isVisibleInGrid It is visible in customer grid
     * @return $this
     */
    public function setIsVisibleInGrid($isVisibleInGrid)
    {
        $this->container['isVisibleInGrid'] = $isVisibleInGrid;

        return $this;
    }

    /**
     * Gets isFilterableInGrid
     * @return bool
     */
    public function getIsFilterableInGrid()
    {
        return $this->container['isFilterableInGrid'];
    }

    /**
     * Sets isFilterableInGrid
     * @param bool $isFilterableInGrid It is filterable in customer grid
     * @return $this
     */
    public function setIsFilterableInGrid($isFilterableInGrid)
    {
        $this->container['isFilterableInGrid'] = $isFilterableInGrid;

        return $this;
    }

    /**
     * Gets isSearchableInGrid
     * @return bool
     */
    public function getIsSearchableInGrid()
    {
        return $this->container['isSearchableInGrid'];
    }

    /**
     * Sets isSearchableInGrid
     * @param bool $isSearchableInGrid It is searchable in customer grid
     * @return $this
     */
    public function setIsSearchableInGrid($isSearchableInGrid)
    {
        $this->container['isSearchableInGrid'] = $isSearchableInGrid;

        return $this;
    }

    /**
     * Gets attributeCode
     * @return string
     */
    public function getAttributeCode()
    {
        return $this->container['attributeCode'];
    }

    /**
     * Sets attributeCode
     * @param string $attributeCode Code of the attribute.
     * @return $this
     */
    public function setAttributeCode($attributeCode)
    {
        $this->container['attributeCode'] = $attributeCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


