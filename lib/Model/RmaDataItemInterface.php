<?php
/**
 * RmaDataItemInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Model;

use \ArrayAccess;

/**
 * RmaDataItemInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface CategoryInterface
 * @package     TheCodeBunny\Swagger\Magento2\Client
 * @author      Hemang Vyas (TheCodeBunny)
 * @link        https://github.com/thecodebunny/TcbMagento2Api.git
 */
class RmaDataItemInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'rma-data-item-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entityId' => 'int',
        'rmaEntityId' => 'int',
        'orderItemId' => 'int',
        'qtyRequested' => 'int',
        'qtyAuthorized' => 'int',
        'qtyApproved' => 'int',
        'qtyReturned' => 'int',
        'reason' => 'string',
        'condition' => 'string',
        'resolution' => 'string',
        'status' => 'string',
        'extensionAttributes' => '\TheCodeBunny\Magento2Api\Model\RmaDataItemExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entityId' => 'entity_id',
        'rmaEntityId' => 'rma_entity_id',
        'orderItemId' => 'order_item_id',
        'qtyRequested' => 'qty_requested',
        'qtyAuthorized' => 'qty_authorized',
        'qtyApproved' => 'qty_approved',
        'qtyReturned' => 'qty_returned',
        'reason' => 'reason',
        'condition' => 'condition',
        'resolution' => 'resolution',
        'status' => 'status',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entityId' => 'setEntityId',
        'rmaEntityId' => 'setRmaEntityId',
        'orderItemId' => 'setOrderItemId',
        'qtyRequested' => 'setQtyRequested',
        'qtyAuthorized' => 'setQtyAuthorized',
        'qtyApproved' => 'setQtyApproved',
        'qtyReturned' => 'setQtyReturned',
        'reason' => 'setReason',
        'condition' => 'setCondition',
        'resolution' => 'setResolution',
        'status' => 'setStatus',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entityId' => 'getEntityId',
        'rmaEntityId' => 'getRmaEntityId',
        'orderItemId' => 'getOrderItemId',
        'qtyRequested' => 'getQtyRequested',
        'qtyAuthorized' => 'getQtyAuthorized',
        'qtyApproved' => 'getQtyApproved',
        'qtyReturned' => 'getQtyReturned',
        'reason' => 'getReason',
        'condition' => 'getCondition',
        'resolution' => 'getResolution',
        'status' => 'getStatus',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityId'] = isset($data['entityId']) ? $data['entityId'] : null;
        $this->container['rmaEntityId'] = isset($data['rmaEntityId']) ? $data['rmaEntityId'] : null;
        $this->container['orderItemId'] = isset($data['orderItemId']) ? $data['orderItemId'] : null;
        $this->container['qtyRequested'] = isset($data['qtyRequested']) ? $data['qtyRequested'] : null;
        $this->container['qtyAuthorized'] = isset($data['qtyAuthorized']) ? $data['qtyAuthorized'] : null;
        $this->container['qtyApproved'] = isset($data['qtyApproved']) ? $data['qtyApproved'] : null;
        $this->container['qtyReturned'] = isset($data['qtyReturned']) ? $data['qtyReturned'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['entityId'] === null) {
            $invalid_properties[] = "'entityId' can't be null";
        }
        if ($this->container['rmaEntityId'] === null) {
            $invalid_properties[] = "'rmaEntityId' can't be null";
        }
        if ($this->container['orderItemId'] === null) {
            $invalid_properties[] = "'orderItemId' can't be null";
        }
        if ($this->container['qtyRequested'] === null) {
            $invalid_properties[] = "'qtyRequested' can't be null";
        }
        if ($this->container['qtyAuthorized'] === null) {
            $invalid_properties[] = "'qtyAuthorized' can't be null";
        }
        if ($this->container['qtyApproved'] === null) {
            $invalid_properties[] = "'qtyApproved' can't be null";
        }
        if ($this->container['qtyReturned'] === null) {
            $invalid_properties[] = "'qtyReturned' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalid_properties[] = "'reason' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalid_properties[] = "'condition' can't be null";
        }
        if ($this->container['resolution'] === null) {
            $invalid_properties[] = "'resolution' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['entityId'] === null) {
            return false;
        }
        if ($this->container['rmaEntityId'] === null) {
            return false;
        }
        if ($this->container['orderItemId'] === null) {
            return false;
        }
        if ($this->container['qtyRequested'] === null) {
            return false;
        }
        if ($this->container['qtyAuthorized'] === null) {
            return false;
        }
        if ($this->container['qtyApproved'] === null) {
            return false;
        }
        if ($this->container['qtyReturned'] === null) {
            return false;
        }
        if ($this->container['reason'] === null) {
            return false;
        }
        if ($this->container['condition'] === null) {
            return false;
        }
        if ($this->container['resolution'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets entityId
     * @return int
     */
    public function getEntityId()
    {
        return $this->container['entityId'];
    }

    /**
     * Sets entityId
     * @param int $entityId Id
     * @return $this
     */
    public function setEntityId($entityId)
    {
        $this->container['entityId'] = $entityId;

        return $this;
    }

    /**
     * Gets rmaEntityId
     * @return int
     */
    public function getRmaEntityId()
    {
        return $this->container['rmaEntityId'];
    }

    /**
     * Sets rmaEntityId
     * @param int $rmaEntityId RMA id
     * @return $this
     */
    public function setRmaEntityId($rmaEntityId)
    {
        $this->container['rmaEntityId'] = $rmaEntityId;

        return $this;
    }

    /**
     * Gets orderItemId
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId
     * @param int $orderItemId Order_item_id
     * @return $this
     */
    public function setOrderItemId($orderItemId)
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets qtyRequested
     * @return int
     */
    public function getQtyRequested()
    {
        return $this->container['qtyRequested'];
    }

    /**
     * Sets qtyRequested
     * @param int $qtyRequested Qty_requested
     * @return $this
     */
    public function setQtyRequested($qtyRequested)
    {
        $this->container['qtyRequested'] = $qtyRequested;

        return $this;
    }

    /**
     * Gets qtyAuthorized
     * @return int
     */
    public function getQtyAuthorized()
    {
        return $this->container['qtyAuthorized'];
    }

    /**
     * Sets qtyAuthorized
     * @param int $qtyAuthorized Qty_authorized
     * @return $this
     */
    public function setQtyAuthorized($qtyAuthorized)
    {
        $this->container['qtyAuthorized'] = $qtyAuthorized;

        return $this;
    }

    /**
     * Gets qtyApproved
     * @return int
     */
    public function getQtyApproved()
    {
        return $this->container['qtyApproved'];
    }

    /**
     * Sets qtyApproved
     * @param int $qtyApproved Qty_approved
     * @return $this
     */
    public function setQtyApproved($qtyApproved)
    {
        $this->container['qtyApproved'] = $qtyApproved;

        return $this;
    }

    /**
     * Gets qtyReturned
     * @return int
     */
    public function getQtyReturned()
    {
        return $this->container['qtyReturned'];
    }

    /**
     * Sets qtyReturned
     * @param int $qtyReturned Qty_returned
     * @return $this
     */
    public function setQtyReturned($qtyReturned)
    {
        $this->container['qtyReturned'] = $qtyReturned;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason Reason
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets condition
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param string $condition Condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets resolution
     * @return string
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     * @param string $resolution Resolution
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \TheCodeBunny\Magento2Api\Model\RmaDataItemExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \TheCodeBunny\Magento2Api\Model\RmaDataItemExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\TheCodeBunny\Magento2Api\ObjectSerializer::sanitizeForSerialization($this));
    }
}


