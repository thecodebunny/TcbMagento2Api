<?php
/**
 * GiftCardAccountGiftCardAccountManagementV1Api
 * PHP version 5
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Hemang Vyas (TheCodeBunny)
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */

/**
 * Magento Enterprise
 *
 * No description provided (generated by Swagger Codegen https://github.com/thecodebunny/TcbMagento2Api.git)
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/thecodebunny/TcbMagento2Api.git.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/thecodebunny/TcbMagento2Api.git
 * Do not edit the class manually.
 */

namespace TheCodeBunny\Magento2Api\Api;

use \TheCodeBunny\Magento2Api\ApiClient;
use \TheCodeBunny\Magento2Api\ApiException;
use \TheCodeBunny\Magento2Api\Configuration;
use \TheCodeBunny\Magento2Api\ObjectSerializer;

/**
 * GiftCardAccountGiftCardAccountManagementV1Api Class Doc Comment
 *
 * @category Class
 * @package  TheCodeBunny\Swagger\Magento2\Client
 * @author   Hemang Vyas (TheCodeBunny)
 * @link     https://github.com/thecodebunny/TcbMagento2Api.git
 */
class GiftCardAccountGiftCardAccountManagementV1Api
{
    /**
     * API Client
     *
     * @var \TheCodeBunny\Magento2Api\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \TheCodeBunny\Magento2Api\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\TheCodeBunny\Magento2Api\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \TheCodeBunny\Magento2Api\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \TheCodeBunny\Magento2Api\ApiClient $apiClient set the API client
     *
     * @return GiftCardAccountGiftCardAccountManagementV1Api
     */
    public function setApiClient(\TheCodeBunny\Magento2Api\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet
     *
     * 
     *
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return float
     */
    public function giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet($giftCardCode)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1CheckGiftCardGetWithHttpInfo($giftCardCode);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1CheckGiftCardGetWithHttpInfo
     *
     * 
     *
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1CheckGiftCardGetWithHttpInfo($giftCardCode)
    {
        // verify the required parameter 'giftCardCode' is set
        if ($giftCardCode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $giftCardCode when calling giftCardAccountGiftCardAccountManagementV1CheckGiftCardGet');
        }
        // parse inputs
        $resourcePath = "/V1/carts/mine/checkGiftCard/{giftCardCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($giftCardCode !== null) {
            $resourcePath = str_replace(
                "{" . "giftCardCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($giftCardCode),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'float',
                '/V1/carts/mine/checkGiftCard/{giftCardCode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'float', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'float', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete
     *
     * 
     *
     * @param int $cartId  (required)
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return bool
     */
    public function giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete($cartId, $giftCardCode)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDeleteWithHttpInfo($cartId, $giftCardCode);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDeleteWithHttpInfo
     *
     * 
     *
     * @param int $cartId  (required)
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDeleteWithHttpInfo($cartId, $giftCardCode)
    {
        // verify the required parameter 'cartId' is set
        if ($cartId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartId when calling giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete');
        }
        // verify the required parameter 'giftCardCode' is set
        if ($giftCardCode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $giftCardCode when calling giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete');
        }
        // parse inputs
        $resourcePath = "/V1/carts/{cartId}/giftCards/{giftCardCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($cartId !== null) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cartId),
                $resourcePath
            );
        }
        // path params
        if ($giftCardCode !== null) {
            $resourcePath = str_replace(
                "{" . "giftCardCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($giftCardCode),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/V1/carts/{cartId}/giftCards/{giftCardCode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0
     *
     * 
     *
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return bool
     */
    public function giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0($giftCardCode)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0WithHttpInfo($giftCardCode);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0WithHttpInfo
     *
     * 
     *
     * @param string $giftCardCode  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0WithHttpInfo($giftCardCode)
    {
        // verify the required parameter 'giftCardCode' is set
        if ($giftCardCode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $giftCardCode when calling giftCardAccountGiftCardAccountManagementV1DeleteByQuoteIdDelete_0');
        }
        // parse inputs
        $resourcePath = "/V1/carts/mine/giftCards/{giftCardCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($giftCardCode !== null) {
            $resourcePath = str_replace(
                "{" . "giftCardCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($giftCardCode),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/V1/carts/mine/giftCards/{giftCardCode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet
     *
     * 
     *
     * @param int $quoteId  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return \TheCodeBunny\Magento2Api\Model\GiftCardAccountDataGiftCardAccountInterface
     */
    public function giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet($quoteId)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGetWithHttpInfo($quoteId);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGetWithHttpInfo
     *
     * 
     *
     * @param int $quoteId  (required)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of \TheCodeBunny\Magento2Api\Model\GiftCardAccountDataGiftCardAccountInterface, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGetWithHttpInfo($quoteId)
    {
        // verify the required parameter 'quoteId' is set
        if ($quoteId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $quoteId when calling giftCardAccountGiftCardAccountManagementV1GetListByQuoteIdGet');
        }
        // parse inputs
        $resourcePath = "/V1/carts/{quoteId}/giftCards";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($quoteId !== null) {
            $resourcePath = str_replace(
                "{" . "quoteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($quoteId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\TheCodeBunny\Magento2Api\Model\GiftCardAccountDataGiftCardAccountInterface',
                '/V1/carts/{quoteId}/giftCards'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\TheCodeBunny\Magento2Api\Model\GiftCardAccountDataGiftCardAccountInterface', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\GiftCardAccountDataGiftCardAccountInterface', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost
     *
     * 
     *
     * @param \TheCodeBunny\Magento2Api\Model\Body119 $body  (optional)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return bool
     */
    public function giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPost($body = null)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostWithHttpInfo
     *
     * 
     *
     * @param \TheCodeBunny\Magento2Api\Model\Body119 $body  (optional)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPostWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/V1/carts/mine/giftCards";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/V1/carts/mine/giftCards'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut
     *
     * 
     *
     * @param int $cartId  (required)
     * @param \TheCodeBunny\Magento2Api\Model\Body118 $body  (optional)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return bool
     */
    public function giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut($cartId, $body = null)
    {
        list($response) = $this->giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutWithHttpInfo($cartId, $body);
        return $response;
    }

    /**
     * Operation giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutWithHttpInfo
     *
     * 
     *
     * @param int $cartId  (required)
     * @param \TheCodeBunny\Magento2Api\Model\Body118 $body  (optional)
     * @throws \TheCodeBunny\Magento2Api\ApiException on non-2xx response
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPutWithHttpInfo($cartId, $body = null)
    {
        // verify the required parameter 'cartId' is set
        if ($cartId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cartId when calling giftCardAccountGiftCardAccountManagementV1SaveByQuoteIdPut');
        }
        // parse inputs
        $resourcePath = "/V1/carts/{cartId}/giftCards";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($cartId !== null) {
            $resourcePath = str_replace(
                "{" . "cartId" . "}",
                $this->apiClient->getSerializer()->toPathValue($cartId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/V1/carts/{cartId}/giftCards'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\TheCodeBunny\Magento2Api\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
